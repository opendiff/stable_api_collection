#
# Stability.ai REST API
# Welcome to the Stability.ai REST API developer preview!  Please note, this is an alpha version of our new REST API, and is subject to change according to your feedback.  Feedback during this test is crucial for us to understand what the pain points are and how we can improve it going forward.  Changes will be communicated here, as well as on our online REST API documentation, which can be found at: https://api.stability.ai/docs  Your DreamStudio API key will be required for authentication. You can learn more about API keys here: https://platform.stability.ai/docs/getting-started/authentication  If you encounter any issues, please let us know in the #API discord channel: https://discord.gg/stablediffusion 
# Version: 0.1
# Contact: info@stability.ai
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER CfgScale
How strictly the diffusion process adheres to the prompt text (higher values keep your image closer to your prompt)
.PARAMETER ClipGuidancePreset
No description available.
.PARAMETER Height
Height of the image (note: `height * width` must be <= 1 Megapixel)
.PARAMETER Sampler
Which sampler to use for the diffusion process. If this value is omitted we'll automatically select an appropriate sampler for you.
.PARAMETER Samples
Number of images to generate
.PARAMETER Seed
Random noise seed (omit this option or use `0` for a random seed)
.PARAMETER Steps
Number of diffusion steps to run
.PARAMETER TextPrompts
No description available.
.PARAMETER Width
Width of the image (note: `height * width` must be <= 1 Megapixel)
.OUTPUTS

TextToImageRequestBody<PSCustomObject>
#>

function Initialize-TextToImageRequestBody {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${CfgScale} = 7,
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("FAST_BLUE", "FAST_GREEN", "NONE", "SIMPLE", "SLOW", "SLOWER", "SLOWEST")]
        [String]
        ${ClipGuidancePreset} = "NONE",
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Height} = 512,
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("DDIM", "DDPM", "K_DPMPP_2M", "K_DPMPP_2S_ANCESTRAL", "K_DPM_2", "K_DPM_2_ANCESTRAL", "K_EULER", "K_EULER_ANCESTRAL", "K_HEUN", "K_LMS")]
        [String]
        ${Sampler},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Samples} = 1,
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Seed},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Steps} = 50,
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${TextPrompts},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Width} = 512
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => TextToImageRequestBody' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($CfgScale -and $CfgScale -gt 35) {
          throw "invalid value for 'CfgScale', must be smaller than or equal to 35."
        }

        if ($CfgScale -and $CfgScale -lt 0) {
          throw "invalid value for 'CfgScale', must be greater than or equal to 0."
        }

        if ($Height -and $Height -gt 2048) {
          throw "invalid value for 'Height', must be smaller than or equal to 2048."
        }

        if ($Height -and $Height -lt 512) {
          throw "invalid value for 'Height', must be greater than or equal to 512."
        }

        if ($Samples -and $Samples -gt 10) {
          throw "invalid value for 'Samples', must be smaller than or equal to 10."
        }

        if ($Samples -and $Samples -lt 1) {
          throw "invalid value for 'Samples', must be greater than or equal to 1."
        }

        if ($Seed -and $Seed -gt 2147483647) {
          throw "invalid value for 'Seed', must be smaller than or equal to 2147483647."
        }

        if ($Seed -and $Seed -lt 0) {
          throw "invalid value for 'Seed', must be greater than or equal to 0."
        }

        if ($Steps -and $Steps -gt 150) {
          throw "invalid value for 'Steps', must be smaller than or equal to 150."
        }

        if ($Steps -and $Steps -lt 10) {
          throw "invalid value for 'Steps', must be greater than or equal to 10."
        }

        if ($null -eq $TextPrompts) {
            throw "invalid value for 'TextPrompts', 'TextPrompts' cannot be null."
        }

        if ($TextPrompts.length -lt 1) {
            throw "invalid value for 'TextPrompts', number of items must be greater than or equal to 1."
        }

        if ($Width -and $Width -gt 2048) {
          throw "invalid value for 'Width', must be smaller than or equal to 2048."
        }

        if ($Width -and $Width -lt 512) {
          throw "invalid value for 'Width', must be greater than or equal to 512."
        }


        $PSO = [PSCustomObject]@{
            "cfg_scale" = ${CfgScale}
            "clip_guidance_preset" = ${ClipGuidancePreset}
            "height" = ${Height}
            "sampler" = ${Sampler}
            "samples" = ${Samples}
            "seed" = ${Seed}
            "steps" = ${Steps}
            "text_prompts" = ${TextPrompts}
            "width" = ${Width}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to TextToImageRequestBody<PSCustomObject>

.DESCRIPTION

Convert from JSON to TextToImageRequestBody<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

TextToImageRequestBody<PSCustomObject>
#>
function ConvertFrom-JsonToTextToImageRequestBody {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => TextToImageRequestBody' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in TextToImageRequestBody
        $AllProperties = ("cfg_scale", "clip_guidance_preset", "height", "sampler", "samples", "seed", "steps", "text_prompts", "width")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'text_prompts' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "text_prompts"))) {
            throw "Error! JSON cannot be serialized due to the required property 'text_prompts' missing."
        } else {
            $TextPrompts = $JsonParameters.PSobject.Properties["text_prompts"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cfg_scale"))) { #optional property not found
            $CfgScale = $null
        } else {
            $CfgScale = $JsonParameters.PSobject.Properties["cfg_scale"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "clip_guidance_preset"))) { #optional property not found
            $ClipGuidancePreset = $null
        } else {
            $ClipGuidancePreset = $JsonParameters.PSobject.Properties["clip_guidance_preset"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "height"))) { #optional property not found
            $Height = $null
        } else {
            $Height = $JsonParameters.PSobject.Properties["height"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sampler"))) { #optional property not found
            $Sampler = $null
        } else {
            $Sampler = $JsonParameters.PSobject.Properties["sampler"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "samples"))) { #optional property not found
            $Samples = $null
        } else {
            $Samples = $JsonParameters.PSobject.Properties["samples"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "seed"))) { #optional property not found
            $Seed = $null
        } else {
            $Seed = $JsonParameters.PSobject.Properties["seed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "steps"))) { #optional property not found
            $Steps = $null
        } else {
            $Steps = $JsonParameters.PSobject.Properties["steps"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "width"))) { #optional property not found
            $Width = $null
        } else {
            $Width = $JsonParameters.PSobject.Properties["width"].value
        }

        $PSO = [PSCustomObject]@{
            "cfg_scale" = ${CfgScale}
            "clip_guidance_preset" = ${ClipGuidancePreset}
            "height" = ${Height}
            "sampler" = ${Sampler}
            "samples" = ${Samples}
            "seed" = ${Seed}
            "steps" = ${Steps}
            "text_prompts" = ${TextPrompts}
            "width" = ${Width}
        }

        return $PSO
    }

}

