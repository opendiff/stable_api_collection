#
# Stability.ai REST API
# Welcome to the Stability.ai REST API developer preview!  Please note, this is an alpha version of our new REST API, and is subject to change according to your feedback.  Feedback during this test is crucial for us to understand what the pain points are and how we can improve it going forward.  Changes will be communicated here, as well as on our online REST API documentation, which can be found at: https://api.stability.ai/docs  Your DreamStudio API key will be required for authentication. You can learn more about API keys here: https://platform.stability.ai/docs/getting-started/authentication  If you encounter any issues, please let us know in the #API discord channel: https://discord.gg/stablediffusion 
# Version: 0.1
# Contact: info@stability.ai
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Email
The user's email
.PARAMETER Id
The user's ID
.PARAMETER Organizations
The user's organizations
.PARAMETER ProfilePicture
The user's profile picture
.OUTPUTS

AccountResponseBody<PSCustomObject>
#>

function Initialize-AccountResponseBody {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Email},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Organizations},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProfilePicture}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => AccountResponseBody' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Email) {
            throw "invalid value for 'Email', 'Email' cannot be null."
        }

        if ($null -eq $Id) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($null -eq $Organizations) {
            throw "invalid value for 'Organizations', 'Organizations' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "email" = ${Email}
            "id" = ${Id}
            "organizations" = ${Organizations}
            "profile_picture" = ${ProfilePicture}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to AccountResponseBody<PSCustomObject>

.DESCRIPTION

Convert from JSON to AccountResponseBody<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

AccountResponseBody<PSCustomObject>
#>
function ConvertFrom-JsonToAccountResponseBody {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => AccountResponseBody' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in AccountResponseBody
        $AllProperties = ("email", "id", "organizations", "profile_picture")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'email' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "email"))) {
            throw "Error! JSON cannot be serialized due to the required property 'email' missing."
        } else {
            $Email = $JsonParameters.PSobject.Properties["email"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "organizations"))) {
            throw "Error! JSON cannot be serialized due to the required property 'organizations' missing."
        } else {
            $Organizations = $JsonParameters.PSobject.Properties["organizations"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "profile_picture"))) { #optional property not found
            $ProfilePicture = $null
        } else {
            $ProfilePicture = $JsonParameters.PSobject.Properties["profile_picture"].value
        }

        $PSO = [PSCustomObject]@{
            "email" = ${Email}
            "id" = ${Id}
            "organizations" = ${Organizations}
            "profile_picture" = ${ProfilePicture}
        }

        return $PSO
    }

}

