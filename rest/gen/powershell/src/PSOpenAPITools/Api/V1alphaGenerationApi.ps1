#
# Stability.ai REST API
# Welcome to the Stability.ai REST API developer preview!  Please note, this is an alpha version of our new REST API, and is subject to change according to your feedback.  Feedback during this test is crucial for us to understand what the pain points are and how we can improve it going forward.  Changes will be communicated here, as well as on our online REST API documentation, which can be found at: https://api.stability.ai/docs  Your DreamStudio API key will be required for authentication. You can learn more about API keys here: https://platform.stability.ai/docs/getting-started/authentication  If you encounter any issues, please let us know in the #API discord channel: https://discord.gg/stablediffusion 
# Version: 0.1
# Contact: info@stability.ai
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

image-to-image

.DESCRIPTION

No description available.

.PARAMETER EngineId
 

.PARAMETER Accept
 

.PARAMETER InitImage
Initial image to use for the image-to-image generation

.PARAMETER Options
No description available.

.PARAMETER Organization
Optional: Allows for requests to be scoped to an organization other than the user's default.  If not provided, the user's default organization will be used.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-V1alphaGenerationImageToImage {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${EngineId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [ValidateSet("image/png", "application/json")]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.IO.FileInfo]
        ${InitImage},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${Options},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Organization},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-V1alphaGenerationImageToImage' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/vnd.goa.error')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('multipart/form-data')

        $LocalVarUri = '/v1alpha/generation/{engine_id}/image-to-image'
        if (!$EngineId) {
            throw "Error! The required parameter `EngineId` missing when calling v1alpha_generationImageToImage."
        }
        $LocalVarUri = $LocalVarUri.replace('{engine_id}', [System.Web.HTTPUtility]::UrlEncode($EngineId))

        if (!$Accept) {
            throw "Error! The required parameter `Accept` missing when calling v1alpha_generationImageToImage."
        }
        $LocalVarHeaderParameters['Accept'] = $Accept

        if ($Organization) {
            $LocalVarHeaderParameters['Organization'] = $Organization
        }

        if (!$InitImage) {
            throw "Error! The required parameter `InitImage` missing when calling v1alpha_generationImageToImage."
        }
        $LocalVarFormParameters['init_image'] = $InitImage

        if (!$Options) {
            throw "Error! The required parameter `Options` missing when calling v1alpha_generationImageToImage."
        }
        $LocalVarFormParameters['options'] = $Options

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["api_key_header_Authorization"]) {
            $LocalVarHeaderParameters['api_key_header_Authorization'] = $Configuration["ApiKey"]["api_key_header_Authorization"]
            Write-Verbose ("Using API key 'api_key_header_Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

image-to-image/masking

.DESCRIPTION

No description available.

.PARAMETER EngineId
 

.PARAMETER Accept
 

.PARAMETER InitImage
Initial image to use for the image-to-image generation

.PARAMETER Options
No description available.

.PARAMETER Organization
Optional: Allows for requests to be scoped to an organization other than the user's default.  If not provided, the user's default organization will be used.

.PARAMETER MaskImage
Optional mask image to use for masking. Must be the same dimensions as the `init_image`. Use the `mask_source` option to specify whether the white or black pixels should be inpainted. (Note: if you set `mask_source` to `INIT_IMAGE_ALPHA` you can omit the `mask_image` parameter completely.)

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-V1alphaGenerationMasking {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${EngineId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [ValidateSet("image/png", "application/json")]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.IO.FileInfo]
        ${InitImage},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${Options},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Organization},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.IO.FileInfo]
        ${MaskImage},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-V1alphaGenerationMasking' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/vnd.goa.error')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('multipart/form-data')

        $LocalVarUri = '/v1alpha/generation/{engine_id}/image-to-image/masking'
        if (!$EngineId) {
            throw "Error! The required parameter `EngineId` missing when calling v1alpha_generationMasking."
        }
        $LocalVarUri = $LocalVarUri.replace('{engine_id}', [System.Web.HTTPUtility]::UrlEncode($EngineId))

        if (!$Accept) {
            throw "Error! The required parameter `Accept` missing when calling v1alpha_generationMasking."
        }
        $LocalVarHeaderParameters['Accept'] = $Accept

        if ($Organization) {
            $LocalVarHeaderParameters['Organization'] = $Organization
        }

        if (!$InitImage) {
            throw "Error! The required parameter `InitImage` missing when calling v1alpha_generationMasking."
        }
        $LocalVarFormParameters['init_image'] = $InitImage

        if ($MaskImage) {
            $LocalVarFormParameters['mask_image'] = $MaskImage
        }

        if (!$Options) {
            throw "Error! The required parameter `Options` missing when calling v1alpha_generationMasking."
        }
        $LocalVarFormParameters['options'] = $Options

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["api_key_header_Authorization"]) {
            $LocalVarHeaderParameters['api_key_header_Authorization'] = $Configuration["ApiKey"]["api_key_header_Authorization"]
            Write-Verbose ("Using API key 'api_key_header_Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

text-to-image

.DESCRIPTION

No description available.

.PARAMETER EngineId
 

.PARAMETER Accept
 

.PARAMETER TextToImageRequestBody
No description available.

.PARAMETER Organization
Optional: Allows for requests to be scoped to an organization other than the user's default.  If not provided, the user's default organization will be used.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-V1alphaGenerationTextToImage {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${EngineId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [ValidateSet("image/png", "application/json")]
        [String]
        ${Accept},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${TextToImageRequestBody},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Organization},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-V1alphaGenerationTextToImage' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/vnd.goa.error')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json')

        $LocalVarUri = '/v1alpha/generation/{engine_id}/text-to-image'
        if (!$EngineId) {
            throw "Error! The required parameter `EngineId` missing when calling v1alpha_generationTextToImage."
        }
        $LocalVarUri = $LocalVarUri.replace('{engine_id}', [System.Web.HTTPUtility]::UrlEncode($EngineId))

        if (!$Accept) {
            throw "Error! The required parameter `Accept` missing when calling v1alpha_generationTextToImage."
        }
        $LocalVarHeaderParameters['Accept'] = $Accept

        if ($Organization) {
            $LocalVarHeaderParameters['Organization'] = $Organization
        }

        if (!$TextToImageRequestBody) {
            throw "Error! The required parameter `TextToImageRequestBody` missing when calling v1alpha_generationTextToImage."
        }

        $LocalVarBodyParameter = $TextToImageRequestBody | ConvertTo-Json -Depth 100

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["api_key_header_Authorization"]) {
            $LocalVarHeaderParameters['api_key_header_Authorization'] = $Configuration["ApiKey"]["api_key_header_Authorization"]
            Write-Verbose ("Using API key 'api_key_header_Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

