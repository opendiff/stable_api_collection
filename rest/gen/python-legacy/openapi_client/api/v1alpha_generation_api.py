# coding: utf-8

"""
    Stability.ai REST API

    Welcome to the Stability.ai REST API developer preview!  Please note, this is an alpha version of our new REST API, and is subject to change according to your feedback.  Feedback during this test is crucial for us to understand what the pain points are and how we can improve it going forward.  Changes will be communicated here, as well as on our online REST API documentation, which can be found at: https://api.stability.ai/docs  Your DreamStudio API key will be required for authentication. You can learn more about API keys here: https://platform.stability.ai/docs/getting-started/authentication  If you encounter any issues, please let us know in the #API discord channel: https://discord.gg/stablediffusion   # noqa: E501

    The version of the OpenAPI document: 0.1
    Contact: info@stability.ai
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class V1alphaGenerationApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def v1alpha_generation_image_to_image(self, engine_id, accept, init_image, options, **kwargs):  # noqa: E501
        """image-to-image  # noqa: E501

        Generate big fancy pictures from small fancy pictures  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1alpha_generation_image_to_image(engine_id, accept, init_image, options, async_req=True)
        >>> result = thread.get()

        :param engine_id:   (required)
        :type engine_id: str
        :param accept:   (required)
        :type accept: str
        :param init_image: Initial image to use for the image-to-image generation (required)
        :type init_image: file
        :param options: (required)
        :type options: ImageToImageOptions
        :param organization: Optional: Allows for requests to be scoped to an organization other than the user's default.  If not provided, the user's default organization will be used.
        :type organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.v1alpha_generation_image_to_image_with_http_info(engine_id, accept, init_image, options, **kwargs)  # noqa: E501

    def v1alpha_generation_image_to_image_with_http_info(self, engine_id, accept, init_image, options, **kwargs):  # noqa: E501
        """image-to-image  # noqa: E501

        Generate big fancy pictures from small fancy pictures  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1alpha_generation_image_to_image_with_http_info(engine_id, accept, init_image, options, async_req=True)
        >>> result = thread.get()

        :param engine_id:   (required)
        :type engine_id: str
        :param accept:   (required)
        :type accept: str
        :param init_image: Initial image to use for the image-to-image generation (required)
        :type init_image: file
        :param options: (required)
        :type options: ImageToImageOptions
        :param organization: Optional: Allows for requests to be scoped to an organization other than the user's default.  If not provided, the user's default organization will be used.
        :type organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'engine_id',
            'accept',
            'init_image',
            'options',
            'organization'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1alpha_generation_image_to_image" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'engine_id' is set
        if self.api_client.client_side_validation and local_var_params.get('engine_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `engine_id` when calling `v1alpha_generation_image_to_image`")  # noqa: E501
        # verify the required parameter 'accept' is set
        if self.api_client.client_side_validation and local_var_params.get('accept') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `accept` when calling `v1alpha_generation_image_to_image`")  # noqa: E501
        # verify the required parameter 'init_image' is set
        if self.api_client.client_side_validation and local_var_params.get('init_image') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `init_image` when calling `v1alpha_generation_image_to_image`")  # noqa: E501
        # verify the required parameter 'options' is set
        if self.api_client.client_side_validation and local_var_params.get('options') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `options` when calling `v1alpha_generation_image_to_image`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'engine_id' in local_var_params:
            path_params['engine_id'] = local_var_params['engine_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))
        if 'accept' in local_var_params:
            header_params['Accept'] = local_var_params['accept']  # noqa: E501
        if 'organization' in local_var_params:
            header_params['Organization'] = local_var_params['organization']  # noqa: E501

        form_params = []
        local_var_files = {}
        if 'init_image' in local_var_params:
            local_var_files['init_image'] = local_var_params['init_image']  # noqa: E501
        if 'options' in local_var_params:
            form_params.append(('options', local_var_params['options']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.goa.error'])  # noqa: E501

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get('_content_type',
            self.api_client.select_header_content_type(
                ['multipart/form-data'],
                'POST', body_params))  # noqa: E501
        if content_types_list:
                header_params['Content-Type'] = content_types_list

        # Authentication setting
        auth_settings = ['api_key_header_Authorization']  # noqa: E501

        response_types_map = {}

        return self.api_client.call_api(
            '/v1alpha/generation/{engine_id}/image-to-image', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def v1alpha_generation_masking(self, engine_id, accept, init_image, options, **kwargs):  # noqa: E501
        """image-to-image/masking  # noqa: E501

        Paint fancy things into fancy pictures  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1alpha_generation_masking(engine_id, accept, init_image, options, async_req=True)
        >>> result = thread.get()

        :param engine_id:   (required)
        :type engine_id: str
        :param accept:   (required)
        :type accept: str
        :param init_image: Initial image to use for the image-to-image generation (required)
        :type init_image: file
        :param options: (required)
        :type options: MaskingOptions
        :param organization: Optional: Allows for requests to be scoped to an organization other than the user's default.  If not provided, the user's default organization will be used.
        :type organization: str
        :param mask_image: Optional mask image to use for masking. Must be the same dimensions as the `init_image`. Use the `mask_source` option to specify whether the white or black pixels should be inpainted. (Note: if you set `mask_source` to `INIT_IMAGE_ALPHA` you can omit the `mask_image` parameter completely.)
        :type mask_image: file
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.v1alpha_generation_masking_with_http_info(engine_id, accept, init_image, options, **kwargs)  # noqa: E501

    def v1alpha_generation_masking_with_http_info(self, engine_id, accept, init_image, options, **kwargs):  # noqa: E501
        """image-to-image/masking  # noqa: E501

        Paint fancy things into fancy pictures  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1alpha_generation_masking_with_http_info(engine_id, accept, init_image, options, async_req=True)
        >>> result = thread.get()

        :param engine_id:   (required)
        :type engine_id: str
        :param accept:   (required)
        :type accept: str
        :param init_image: Initial image to use for the image-to-image generation (required)
        :type init_image: file
        :param options: (required)
        :type options: MaskingOptions
        :param organization: Optional: Allows for requests to be scoped to an organization other than the user's default.  If not provided, the user's default organization will be used.
        :type organization: str
        :param mask_image: Optional mask image to use for masking. Must be the same dimensions as the `init_image`. Use the `mask_source` option to specify whether the white or black pixels should be inpainted. (Note: if you set `mask_source` to `INIT_IMAGE_ALPHA` you can omit the `mask_image` parameter completely.)
        :type mask_image: file
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'engine_id',
            'accept',
            'init_image',
            'options',
            'organization',
            'mask_image'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1alpha_generation_masking" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'engine_id' is set
        if self.api_client.client_side_validation and local_var_params.get('engine_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `engine_id` when calling `v1alpha_generation_masking`")  # noqa: E501
        # verify the required parameter 'accept' is set
        if self.api_client.client_side_validation and local_var_params.get('accept') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `accept` when calling `v1alpha_generation_masking`")  # noqa: E501
        # verify the required parameter 'init_image' is set
        if self.api_client.client_side_validation and local_var_params.get('init_image') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `init_image` when calling `v1alpha_generation_masking`")  # noqa: E501
        # verify the required parameter 'options' is set
        if self.api_client.client_side_validation and local_var_params.get('options') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `options` when calling `v1alpha_generation_masking`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'engine_id' in local_var_params:
            path_params['engine_id'] = local_var_params['engine_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))
        if 'accept' in local_var_params:
            header_params['Accept'] = local_var_params['accept']  # noqa: E501
        if 'organization' in local_var_params:
            header_params['Organization'] = local_var_params['organization']  # noqa: E501

        form_params = []
        local_var_files = {}
        if 'init_image' in local_var_params:
            local_var_files['init_image'] = local_var_params['init_image']  # noqa: E501
        if 'mask_image' in local_var_params:
            local_var_files['mask_image'] = local_var_params['mask_image']  # noqa: E501
        if 'options' in local_var_params:
            form_params.append(('options', local_var_params['options']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.goa.error'])  # noqa: E501

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get('_content_type',
            self.api_client.select_header_content_type(
                ['multipart/form-data'],
                'POST', body_params))  # noqa: E501
        if content_types_list:
                header_params['Content-Type'] = content_types_list

        # Authentication setting
        auth_settings = ['api_key_header_Authorization']  # noqa: E501

        response_types_map = {}

        return self.api_client.call_api(
            '/v1alpha/generation/{engine_id}/image-to-image/masking', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def v1alpha_generation_text_to_image(self, engine_id, accept, text_to_image_request_body, **kwargs):  # noqa: E501
        """text-to-image  # noqa: E501

        Generate an image from text  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1alpha_generation_text_to_image(engine_id, accept, text_to_image_request_body, async_req=True)
        >>> result = thread.get()

        :param engine_id:   (required)
        :type engine_id: str
        :param accept:   (required)
        :type accept: str
        :param text_to_image_request_body: (required)
        :type text_to_image_request_body: TextToImageRequestBody
        :param organization: Optional: Allows for requests to be scoped to an organization other than the user's default.  If not provided, the user's default organization will be used.
        :type organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.v1alpha_generation_text_to_image_with_http_info(engine_id, accept, text_to_image_request_body, **kwargs)  # noqa: E501

    def v1alpha_generation_text_to_image_with_http_info(self, engine_id, accept, text_to_image_request_body, **kwargs):  # noqa: E501
        """text-to-image  # noqa: E501

        Generate an image from text  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1alpha_generation_text_to_image_with_http_info(engine_id, accept, text_to_image_request_body, async_req=True)
        >>> result = thread.get()

        :param engine_id:   (required)
        :type engine_id: str
        :param accept:   (required)
        :type accept: str
        :param text_to_image_request_body: (required)
        :type text_to_image_request_body: TextToImageRequestBody
        :param organization: Optional: Allows for requests to be scoped to an organization other than the user's default.  If not provided, the user's default organization will be used.
        :type organization: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'engine_id',
            'accept',
            'text_to_image_request_body',
            'organization'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1alpha_generation_text_to_image" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'engine_id' is set
        if self.api_client.client_side_validation and local_var_params.get('engine_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `engine_id` when calling `v1alpha_generation_text_to_image`")  # noqa: E501
        # verify the required parameter 'accept' is set
        if self.api_client.client_side_validation and local_var_params.get('accept') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `accept` when calling `v1alpha_generation_text_to_image`")  # noqa: E501
        # verify the required parameter 'text_to_image_request_body' is set
        if self.api_client.client_side_validation and local_var_params.get('text_to_image_request_body') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `text_to_image_request_body` when calling `v1alpha_generation_text_to_image`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'engine_id' in local_var_params:
            path_params['engine_id'] = local_var_params['engine_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))
        if 'accept' in local_var_params:
            header_params['Accept'] = local_var_params['accept']  # noqa: E501
        if 'organization' in local_var_params:
            header_params['Organization'] = local_var_params['organization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'text_to_image_request_body' in local_var_params:
            body_params = local_var_params['text_to_image_request_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.goa.error'])  # noqa: E501

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json'],
                'POST', body_params))  # noqa: E501
        if content_types_list:
                header_params['Content-Type'] = content_types_list

        # Authentication setting
        auth_settings = ['api_key_header_Authorization']  # noqa: E501

        response_types_map = {}

        return self.api_client.call_api(
            '/v1alpha/generation/{engine_id}/text-to-image', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))
