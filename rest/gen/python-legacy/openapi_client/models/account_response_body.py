# coding: utf-8

"""
    Stability.ai REST API

    Welcome to the Stability.ai REST API developer preview!  Please note, this is an alpha version of our new REST API, and is subject to change according to your feedback.  Feedback during this test is crucial for us to understand what the pain points are and how we can improve it going forward.  Changes will be communicated here, as well as on our online REST API documentation, which can be found at: https://api.stability.ai/docs  Your DreamStudio API key will be required for authentication. You can learn more about API keys here: https://platform.stability.ai/docs/getting-started/authentication  If you encounter any issues, please let us know in the #API discord channel: https://discord.gg/stablediffusion   # noqa: E501

    The version of the OpenAPI document: 0.1
    Contact: info@stability.ai
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class AccountResponseBody(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'email': 'str',
        'id': 'str',
        'organizations': 'list[OrganizationMembership]',
        'profile_picture': 'str'
    }

    attribute_map = {
        'email': 'email',
        'id': 'id',
        'organizations': 'organizations',
        'profile_picture': 'profile_picture'
    }

    def __init__(self, email=None, id=None, organizations=None, profile_picture=None, local_vars_configuration=None):  # noqa: E501
        """AccountResponseBody - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._email = None
        self._id = None
        self._organizations = None
        self._profile_picture = None
        self.discriminator = None

        self.email = email
        self.id = id
        self.organizations = organizations
        if profile_picture is not None:
            self.profile_picture = profile_picture

    @property
    def email(self):
        """Gets the email of this AccountResponseBody.  # noqa: E501

        The user's email  # noqa: E501

        :return: The email of this AccountResponseBody.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this AccountResponseBody.

        The user's email  # noqa: E501

        :param email: The email of this AccountResponseBody.  # noqa: E501
        :type email: str
        """
        if self.local_vars_configuration.client_side_validation and email is None:  # noqa: E501
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def id(self):
        """Gets the id of this AccountResponseBody.  # noqa: E501

        The user's ID  # noqa: E501

        :return: The id of this AccountResponseBody.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AccountResponseBody.

        The user's ID  # noqa: E501

        :param id: The id of this AccountResponseBody.  # noqa: E501
        :type id: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def organizations(self):
        """Gets the organizations of this AccountResponseBody.  # noqa: E501

        The user's organizations  # noqa: E501

        :return: The organizations of this AccountResponseBody.  # noqa: E501
        :rtype: list[OrganizationMembership]
        """
        return self._organizations

    @organizations.setter
    def organizations(self, organizations):
        """Sets the organizations of this AccountResponseBody.

        The user's organizations  # noqa: E501

        :param organizations: The organizations of this AccountResponseBody.  # noqa: E501
        :type organizations: list[OrganizationMembership]
        """
        if self.local_vars_configuration.client_side_validation and organizations is None:  # noqa: E501
            raise ValueError("Invalid value for `organizations`, must not be `None`")  # noqa: E501

        self._organizations = organizations

    @property
    def profile_picture(self):
        """Gets the profile_picture of this AccountResponseBody.  # noqa: E501

        The user's profile picture  # noqa: E501

        :return: The profile_picture of this AccountResponseBody.  # noqa: E501
        :rtype: str
        """
        return self._profile_picture

    @profile_picture.setter
    def profile_picture(self, profile_picture):
        """Sets the profile_picture of this AccountResponseBody.

        The user's profile picture  # noqa: E501

        :param profile_picture: The profile_picture of this AccountResponseBody.  # noqa: E501
        :type profile_picture: str
        """

        self._profile_picture = profile_picture

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountResponseBody):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AccountResponseBody):
            return True

        return self.to_dict() != other.to_dict()
