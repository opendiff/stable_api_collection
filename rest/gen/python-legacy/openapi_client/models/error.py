# coding: utf-8

"""
    Stability.ai REST API

    Welcome to the Stability.ai REST API developer preview!  Please note, this is an alpha version of our new REST API, and is subject to change according to your feedback.  Feedback during this test is crucial for us to understand what the pain points are and how we can improve it going forward.  Changes will be communicated here, as well as on our online REST API documentation, which can be found at: https://api.stability.ai/docs  Your DreamStudio API key will be required for authentication. You can learn more about API keys here: https://platform.stability.ai/docs/getting-started/authentication  If you encounter any issues, please let us know in the #API discord channel: https://discord.gg/stablediffusion   # noqa: E501

    The version of the OpenAPI document: 0.1
    Contact: info@stability.ai
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class Error(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'fault': 'bool',
        'id': 'str',
        'message': 'str',
        'name': 'str',
        'temporary': 'bool',
        'timeout': 'bool'
    }

    attribute_map = {
        'fault': 'fault',
        'id': 'id',
        'message': 'message',
        'name': 'name',
        'temporary': 'temporary',
        'timeout': 'timeout'
    }

    def __init__(self, fault=None, id=None, message=None, name=None, temporary=None, timeout=None, local_vars_configuration=None):  # noqa: E501
        """Error - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._fault = None
        self._id = None
        self._message = None
        self._name = None
        self._temporary = None
        self._timeout = None
        self.discriminator = None

        self.fault = fault
        self.id = id
        self.message = message
        self.name = name
        self.temporary = temporary
        self.timeout = timeout

    @property
    def fault(self):
        """Gets the fault of this Error.  # noqa: E501

        Is the error a server-side fault?  # noqa: E501

        :return: The fault of this Error.  # noqa: E501
        :rtype: bool
        """
        return self._fault

    @fault.setter
    def fault(self, fault):
        """Sets the fault of this Error.

        Is the error a server-side fault?  # noqa: E501

        :param fault: The fault of this Error.  # noqa: E501
        :type fault: bool
        """
        if self.local_vars_configuration.client_side_validation and fault is None:  # noqa: E501
            raise ValueError("Invalid value for `fault`, must not be `None`")  # noqa: E501

        self._fault = fault

    @property
    def id(self):
        """Gets the id of this Error.  # noqa: E501

        ID is a unique identifier for this particular occurrence of the problem.  # noqa: E501

        :return: The id of this Error.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Error.

        ID is a unique identifier for this particular occurrence of the problem.  # noqa: E501

        :param id: The id of this Error.  # noqa: E501
        :type id: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def message(self):
        """Gets the message of this Error.  # noqa: E501

        Message is a human-readable explanation specific to this occurrence of the problem.  # noqa: E501

        :return: The message of this Error.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Error.

        Message is a human-readable explanation specific to this occurrence of the problem.  # noqa: E501

        :param message: The message of this Error.  # noqa: E501
        :type message: str
        """
        if self.local_vars_configuration.client_side_validation and message is None:  # noqa: E501
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def name(self):
        """Gets the name of this Error.  # noqa: E501

        Name is the name of this class of errors.  # noqa: E501

        :return: The name of this Error.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Error.

        Name is the name of this class of errors.  # noqa: E501

        :param name: The name of this Error.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def temporary(self):
        """Gets the temporary of this Error.  # noqa: E501

        Is the error temporary?  # noqa: E501

        :return: The temporary of this Error.  # noqa: E501
        :rtype: bool
        """
        return self._temporary

    @temporary.setter
    def temporary(self, temporary):
        """Sets the temporary of this Error.

        Is the error temporary?  # noqa: E501

        :param temporary: The temporary of this Error.  # noqa: E501
        :type temporary: bool
        """
        if self.local_vars_configuration.client_side_validation and temporary is None:  # noqa: E501
            raise ValueError("Invalid value for `temporary`, must not be `None`")  # noqa: E501

        self._temporary = temporary

    @property
    def timeout(self):
        """Gets the timeout of this Error.  # noqa: E501

        Is the error a timeout?  # noqa: E501

        :return: The timeout of this Error.  # noqa: E501
        :rtype: bool
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this Error.

        Is the error a timeout?  # noqa: E501

        :param timeout: The timeout of this Error.  # noqa: E501
        :type timeout: bool
        """
        if self.local_vars_configuration.client_side_validation and timeout is None:  # noqa: E501
            raise ValueError("Invalid value for `timeout`, must not be `None`")  # noqa: E501

        self._timeout = timeout

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Error):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Error):
            return True

        return self.to_dict() != other.to_dict()
