/*
 * Stability.ai REST API
 * Welcome to the Stability.ai REST API developer preview!  Please note, this is an alpha version of our new REST API, and is subject to change according to your feedback.  Feedback during this test is crucial for us to understand what the pain points are and how we can improve it going forward.  Changes will be communicated here, as well as on our online REST API documentation, which can be found at: https://api.stability.ai/docs  Your DreamStudio API key will be required for authentication. You can learn more about API keys here: https://platform.stability.ai/docs/getting-started/authentication  If you encounter any issues, please let us know in the #API discord channel: https://discord.gg/stablediffusion 
 *
 * The version of the OpenAPI document: 0.1
 * Contact: info@stability.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.model.TextPrompt;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;

/**
 * TextToImageRequestBody
 */
@JsonPropertyOrder({
  TextToImageRequestBody.JSON_PROPERTY_CFG_SCALE,
  TextToImageRequestBody.JSON_PROPERTY_CLIP_GUIDANCE_PRESET,
  TextToImageRequestBody.JSON_PROPERTY_HEIGHT,
  TextToImageRequestBody.JSON_PROPERTY_SAMPLER,
  TextToImageRequestBody.JSON_PROPERTY_SAMPLES,
  TextToImageRequestBody.JSON_PROPERTY_SEED,
  TextToImageRequestBody.JSON_PROPERTY_STEPS,
  TextToImageRequestBody.JSON_PROPERTY_TEXT_PROMPTS,
  TextToImageRequestBody.JSON_PROPERTY_WIDTH
})
@JsonTypeName("TextToImageRequestBody")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2022-12-31T22:15:06.514954-05:00[America/New_York]")
@Introspected
public class TextToImageRequestBody {
    public static final String JSON_PROPERTY_CFG_SCALE = "cfg_scale";
    private BigDecimal cfgScale = new BigDecimal("7");

    /**
     * Gets or Sets clipGuidancePreset
     */
    public enum ClipGuidancePresetEnum {
        FAST_BLUE("FAST_BLUE"),
        FAST_GREEN("FAST_GREEN"),
        NONE("NONE"),
        SIMPLE("SIMPLE"),
        SLOW("SLOW"),
        SLOWER("SLOWER"),
        SLOWEST("SLOWEST");

        private String value;

        ClipGuidancePresetEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static ClipGuidancePresetEnum fromValue(String value) {
            for (ClipGuidancePresetEnum b : ClipGuidancePresetEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }
    public static final String JSON_PROPERTY_CLIP_GUIDANCE_PRESET = "clip_guidance_preset";
    private ClipGuidancePresetEnum clipGuidancePreset = ClipGuidancePresetEnum.NONE;

    public static final String JSON_PROPERTY_HEIGHT = "height";
    private Integer height = 512;

    /**
     * Which sampler to use for the diffusion process. If this value is omitted we&#39;ll automatically select an appropriate sampler for you.
     */
    public enum SamplerEnum {
        DDIM("DDIM"),
        DDPM("DDPM"),
        K_DPMPP_2M("K_DPMPP_2M"),
        K_DPMPP_2S_ANCESTRAL("K_DPMPP_2S_ANCESTRAL"),
        K_DPM_2("K_DPM_2"),
        K_DPM_2_ANCESTRAL("K_DPM_2_ANCESTRAL"),
        K_EULER("K_EULER"),
        K_EULER_ANCESTRAL("K_EULER_ANCESTRAL"),
        K_HEUN("K_HEUN"),
        K_LMS("K_LMS");

        private String value;

        SamplerEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static SamplerEnum fromValue(String value) {
            for (SamplerEnum b : SamplerEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }
    public static final String JSON_PROPERTY_SAMPLER = "sampler";
    private SamplerEnum sampler;

    public static final String JSON_PROPERTY_SAMPLES = "samples";
    private Integer samples = 1;

    public static final String JSON_PROPERTY_SEED = "seed";
    private Integer seed;

    public static final String JSON_PROPERTY_STEPS = "steps";
    private Integer steps = 50;

    public static final String JSON_PROPERTY_TEXT_PROMPTS = "text_prompts";
    private List<TextPrompt> textPrompts = new ArrayList<>();

    public static final String JSON_PROPERTY_WIDTH = "width";
    private Integer width = 512;

    public TextToImageRequestBody(List<TextPrompt> textPrompts) {
        this.textPrompts = textPrompts;
    }

    public TextToImageRequestBody cfgScale(BigDecimal cfgScale) {
        this.cfgScale = cfgScale;
        return this;
    }

    /**
     * How strictly the diffusion process adheres to the prompt text (higher values keep your image closer to your prompt)
     * minimum: 0
     * maximum: 35
     * @return cfgScale
     **/
    @Nullable
    @DecimalMin("0")
    @DecimalMax("35")
    @JsonProperty(JSON_PROPERTY_CFG_SCALE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public BigDecimal getCfgScale() {
        return cfgScale;
    }

    @JsonProperty(JSON_PROPERTY_CFG_SCALE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCfgScale(BigDecimal cfgScale) {
        this.cfgScale = cfgScale;
    }

    public TextToImageRequestBody clipGuidancePreset(ClipGuidancePresetEnum clipGuidancePreset) {
        this.clipGuidancePreset = clipGuidancePreset;
        return this;
    }

    /**
     * Get clipGuidancePreset
     * @return clipGuidancePreset
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_CLIP_GUIDANCE_PRESET)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public ClipGuidancePresetEnum getClipGuidancePreset() {
        return clipGuidancePreset;
    }

    @JsonProperty(JSON_PROPERTY_CLIP_GUIDANCE_PRESET)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setClipGuidancePreset(ClipGuidancePresetEnum clipGuidancePreset) {
        this.clipGuidancePreset = clipGuidancePreset;
    }

    public TextToImageRequestBody height(Integer height) {
        this.height = height;
        return this;
    }

    /**
     * Height of the image (note: &#x60;height * width&#x60; must be &lt;&#x3D; 1 Megapixel)
     * minimum: 512
     * maximum: 2048
     * @return height
     **/
    @Nullable
    @Min(512)
    @Max(2048)
    @JsonProperty(JSON_PROPERTY_HEIGHT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Integer getHeight() {
        return height;
    }

    @JsonProperty(JSON_PROPERTY_HEIGHT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setHeight(Integer height) {
        this.height = height;
    }

    public TextToImageRequestBody sampler(SamplerEnum sampler) {
        this.sampler = sampler;
        return this;
    }

    /**
     * Which sampler to use for the diffusion process. If this value is omitted we&#39;ll automatically select an appropriate sampler for you.
     * @return sampler
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_SAMPLER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public SamplerEnum getSampler() {
        return sampler;
    }

    @JsonProperty(JSON_PROPERTY_SAMPLER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setSampler(SamplerEnum sampler) {
        this.sampler = sampler;
    }

    public TextToImageRequestBody samples(Integer samples) {
        this.samples = samples;
        return this;
    }

    /**
     * Number of images to generate
     * minimum: 1
     * maximum: 10
     * @return samples
     **/
    @Nullable
    @Min(1)
    @Max(10)
    @JsonProperty(JSON_PROPERTY_SAMPLES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Integer getSamples() {
        return samples;
    }

    @JsonProperty(JSON_PROPERTY_SAMPLES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setSamples(Integer samples) {
        this.samples = samples;
    }

    public TextToImageRequestBody seed(Integer seed) {
        this.seed = seed;
        return this;
    }

    /**
     * Random noise seed (omit this option or use &#x60;0&#x60; for a random seed)
     * minimum: 0
     * maximum: 2147483647
     * @return seed
     **/
    @Nullable
    @Min(0)
    @Max(2147483647)
    @JsonProperty(JSON_PROPERTY_SEED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Integer getSeed() {
        return seed;
    }

    @JsonProperty(JSON_PROPERTY_SEED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setSeed(Integer seed) {
        this.seed = seed;
    }

    public TextToImageRequestBody steps(Integer steps) {
        this.steps = steps;
        return this;
    }

    /**
     * Number of diffusion steps to run
     * minimum: 10
     * maximum: 150
     * @return steps
     **/
    @Nullable
    @Min(10)
    @Max(150)
    @JsonProperty(JSON_PROPERTY_STEPS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Integer getSteps() {
        return steps;
    }

    @JsonProperty(JSON_PROPERTY_STEPS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setSteps(Integer steps) {
        this.steps = steps;
    }

    public TextToImageRequestBody textPrompts(List<TextPrompt> textPrompts) {
        this.textPrompts = textPrompts;
        return this;
    }

    public TextToImageRequestBody addTextPromptsItem(TextPrompt textPromptsItem) {
        this.textPrompts.add(textPromptsItem);
        return this;
    }

    /**
     * Get textPrompts
     * @return textPrompts
     **/
    @NotNull
    @Size(min=1)
    @JsonProperty(JSON_PROPERTY_TEXT_PROMPTS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public List<TextPrompt> getTextPrompts() {
        return textPrompts;
    }

    @JsonProperty(JSON_PROPERTY_TEXT_PROMPTS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setTextPrompts(List<TextPrompt> textPrompts) {
        this.textPrompts = textPrompts;
    }

    public TextToImageRequestBody width(Integer width) {
        this.width = width;
        return this;
    }

    /**
     * Width of the image (note: &#x60;height * width&#x60; must be &lt;&#x3D; 1 Megapixel)
     * minimum: 512
     * maximum: 2048
     * @return width
     **/
    @Nullable
    @Min(512)
    @Max(2048)
    @JsonProperty(JSON_PROPERTY_WIDTH)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Integer getWidth() {
        return width;
    }

    @JsonProperty(JSON_PROPERTY_WIDTH)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setWidth(Integer width) {
        this.width = width;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TextToImageRequestBody textToImageRequestBody = (TextToImageRequestBody) o;
        return Objects.equals(this.cfgScale, textToImageRequestBody.cfgScale) &&
            Objects.equals(this.clipGuidancePreset, textToImageRequestBody.clipGuidancePreset) &&
            Objects.equals(this.height, textToImageRequestBody.height) &&
            Objects.equals(this.sampler, textToImageRequestBody.sampler) &&
            Objects.equals(this.samples, textToImageRequestBody.samples) &&
            Objects.equals(this.seed, textToImageRequestBody.seed) &&
            Objects.equals(this.steps, textToImageRequestBody.steps) &&
            Objects.equals(this.textPrompts, textToImageRequestBody.textPrompts) &&
            Objects.equals(this.width, textToImageRequestBody.width);
    }

    @Override
    public int hashCode() {
        return Objects.hash(cfgScale, clipGuidancePreset, height, sampler, samples, seed, steps, textPrompts, width);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class TextToImageRequestBody {\n");
        sb.append("    cfgScale: ").append(toIndentedString(cfgScale)).append("\n");
        sb.append("    clipGuidancePreset: ").append(toIndentedString(clipGuidancePreset)).append("\n");
        sb.append("    height: ").append(toIndentedString(height)).append("\n");
        sb.append("    sampler: ").append(toIndentedString(sampler)).append("\n");
        sb.append("    samples: ").append(toIndentedString(samples)).append("\n");
        sb.append("    seed: ").append(toIndentedString(seed)).append("\n");
        sb.append("    steps: ").append(toIndentedString(steps)).append("\n");
        sb.append("    textPrompts: ").append(toIndentedString(textPrompts)).append("\n");
        sb.append("    width: ").append(toIndentedString(width)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
