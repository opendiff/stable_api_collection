/*
 * Stability.ai REST API
 * Welcome to the Stability.ai REST API developer preview!  Please note, this is an alpha version of our new REST API, and is subject to change according to your feedback.  Feedback during this test is crucial for us to understand what the pain points are and how we can improve it going forward.  Changes will be communicated here, as well as on our online REST API documentation, which can be found at: https://api.stability.ai/docs  Your DreamStudio API key will be required for authentication. You can learn more about API keys here: https://platform.stability.ai/docs/getting-started/authentication  If you encounter any issues, please let us know in the #API discord channel: https://discord.gg/stablediffusion 
 *
 * The version of the OpenAPI document: 0.1
 * Contact: info@stability.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;

/**
 * Error
 */
@JsonPropertyOrder({
  Error.JSON_PROPERTY_FAULT,
  Error.JSON_PROPERTY_ID,
  Error.JSON_PROPERTY_MESSAGE,
  Error.JSON_PROPERTY_NAME,
  Error.JSON_PROPERTY_TEMPORARY,
  Error.JSON_PROPERTY_TIMEOUT
})
@JsonTypeName("Error")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2022-12-31T22:15:06.514954-05:00[America/New_York]")
@Introspected
public class Error {
    public static final String JSON_PROPERTY_FAULT = "fault";
    private Boolean fault;

    public static final String JSON_PROPERTY_ID = "id";
    private String id;

    public static final String JSON_PROPERTY_MESSAGE = "message";
    private String message;

    public static final String JSON_PROPERTY_NAME = "name";
    private String name;

    public static final String JSON_PROPERTY_TEMPORARY = "temporary";
    private Boolean temporary;

    public static final String JSON_PROPERTY_TIMEOUT = "timeout";
    private Boolean timeout;

    public Error(Boolean fault, String id, String message, String name, Boolean temporary, Boolean timeout) {
        this.fault = fault;
        this.id = id;
        this.message = message;
        this.name = name;
        this.temporary = temporary;
        this.timeout = timeout;
    }

    public Error fault(Boolean fault) {
        this.fault = fault;
        return this;
    }

    /**
     * Is the error a server-side fault?
     * @return fault
     **/
    @NotNull
    @JsonProperty(JSON_PROPERTY_FAULT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Boolean getFault() {
        return fault;
    }

    @JsonProperty(JSON_PROPERTY_FAULT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setFault(Boolean fault) {
        this.fault = fault;
    }

    public Error id(String id) {
        this.id = id;
        return this;
    }

    /**
     * ID is a unique identifier for this particular occurrence of the problem.
     * @return id
     **/
    @NotNull
    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getId() {
        return id;
    }

    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setId(String id) {
        this.id = id;
    }

    public Error message(String message) {
        this.message = message;
        return this;
    }

    /**
     * Message is a human-readable explanation specific to this occurrence of the problem.
     * @return message
     **/
    @NotNull
    @JsonProperty(JSON_PROPERTY_MESSAGE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getMessage() {
        return message;
    }

    @JsonProperty(JSON_PROPERTY_MESSAGE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setMessage(String message) {
        this.message = message;
    }

    public Error name(String name) {
        this.name = name;
        return this;
    }

    /**
     * Name is the name of this class of errors.
     * @return name
     **/
    @NotNull
    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getName() {
        return name;
    }

    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setName(String name) {
        this.name = name;
    }

    public Error temporary(Boolean temporary) {
        this.temporary = temporary;
        return this;
    }

    /**
     * Is the error temporary?
     * @return temporary
     **/
    @NotNull
    @JsonProperty(JSON_PROPERTY_TEMPORARY)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Boolean getTemporary() {
        return temporary;
    }

    @JsonProperty(JSON_PROPERTY_TEMPORARY)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setTemporary(Boolean temporary) {
        this.temporary = temporary;
    }

    public Error timeout(Boolean timeout) {
        this.timeout = timeout;
        return this;
    }

    /**
     * Is the error a timeout?
     * @return timeout
     **/
    @NotNull
    @JsonProperty(JSON_PROPERTY_TIMEOUT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Boolean getTimeout() {
        return timeout;
    }

    @JsonProperty(JSON_PROPERTY_TIMEOUT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setTimeout(Boolean timeout) {
        this.timeout = timeout;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Error error = (Error) o;
        return Objects.equals(this.fault, error.fault) &&
            Objects.equals(this.id, error.id) &&
            Objects.equals(this.message, error.message) &&
            Objects.equals(this.name, error.name) &&
            Objects.equals(this.temporary, error.temporary) &&
            Objects.equals(this.timeout, error.timeout);
    }

    @Override
    public int hashCode() {
        return Objects.hash(fault, id, message, name, temporary, timeout);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Error {\n");
        sb.append("    fault: ").append(toIndentedString(fault)).append("\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    message: ").append(toIndentedString(message)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    temporary: ").append(toIndentedString(temporary)).append("\n");
        sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
