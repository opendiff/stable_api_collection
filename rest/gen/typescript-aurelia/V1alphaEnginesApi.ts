/**
 * Stability.ai REST API
 * Welcome to the Stability.ai REST API developer preview!  Please note, this is an alpha version of our new REST API, and is subject to change according to your feedback.  Feedback during this test is crucial for us to understand what the pain points are and how we can improve it going forward.  Changes will be communicated here, as well as on our online REST API documentation, which can be found at: https://api.stability.ai/docs  Your DreamStudio API key will be required for authentication. You can learn more about API keys here: https://platform.stability.ai/docs/getting-started/authentication  If you encounter any issues, please let us know in the #API discord channel: https://discord.gg/stablediffusion 
 *
 * The version of the OpenAPI document: 0.1
 * Contact: info@stability.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  ListEnginesResponseBody,
} from './models';

/**
 * v1alphaEnginesListEngines - parameters interface
 */
export interface IV1alphaEnginesListEnginesParams {
  organization?: string;
}

/**
 * V1alphaEnginesApi - API class
 */
@autoinject()
export class V1alphaEnginesApi extends Api {

  /**
   * Creates a new V1alphaEnginesApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * list
   * List all engines available to your organization/user
   * @param params.organization Optional: Allows for requests to be scoped to an organization other than the user\&#39;s default.  If not provided, the user\&#39;s default organization will be used.
   */
  async v1alphaEnginesListEngines(params: IV1alphaEnginesListEnginesParams): Promise<ListEnginesResponseBody> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/v1alpha/engines/list`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      .withHeader('Organization', params['organization'])
      // Authentication 'api_key_header_Authorization' required
      .withHeader('Authorization', this.authStorage.getapi_key_header_Authorization())
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

