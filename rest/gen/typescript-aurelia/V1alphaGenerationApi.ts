/**
 * Stability.ai REST API
 * Welcome to the Stability.ai REST API developer preview!  Please note, this is an alpha version of our new REST API, and is subject to change according to your feedback.  Feedback during this test is crucial for us to understand what the pain points are and how we can improve it going forward.  Changes will be communicated here, as well as on our online REST API documentation, which can be found at: https://api.stability.ai/docs  Your DreamStudio API key will be required for authentication. You can learn more about API keys here: https://platform.stability.ai/docs/getting-started/authentication  If you encounter any issues, please let us know in the #API discord channel: https://discord.gg/stablediffusion 
 *
 * The version of the OpenAPI document: 0.1
 * Contact: info@stability.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  TextToImageRequestBody,
  MaskingOptions,
  ImageToImageOptions,
} from './models';

/**
 * v1alphaGenerationImageToImage - parameters interface
 */
export interface IV1alphaGenerationImageToImageParams {
  engineId: string;
  accept: 'image/png' | 'application/json';
  initImage: any;
  options: ImageToImageOptions;
  organization?: string;
}

/**
 * v1alphaGenerationMasking - parameters interface
 */
export interface IV1alphaGenerationMaskingParams {
  engineId: string;
  accept: 'image/png' | 'application/json';
  initImage: any;
  options: MaskingOptions;
  organization?: string;
  maskImage?: any;
}

/**
 * v1alphaGenerationTextToImage - parameters interface
 */
export interface IV1alphaGenerationTextToImageParams {
  engineId: string;
  accept: 'image/png' | 'application/json';
  textToImageRequestBody: TextToImageRequestBody;
  organization?: string;
}

/**
 * V1alphaGenerationApi - API class
 */
@autoinject()
export class V1alphaGenerationApi extends Api {

  /**
   * Creates a new V1alphaGenerationApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * image-to-image
   * Generate big fancy pictures from small fancy pictures
   * @param params.engineId  
   * @param params.accept  
   * @param params.initImage Initial image to use for the image-to-image generation
   * @param params.options 
   * @param params.organization Optional: Allows for requests to be scoped to an organization other than the user\&#39;s default.  If not provided, the user\&#39;s default organization will be used.
   */
  async v1alphaGenerationImageToImage(params: IV1alphaGenerationImageToImageParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('v1alphaGenerationImageToImage', params, 'engineId');
    this.ensureParamIsSet('v1alphaGenerationImageToImage', params, 'accept');
    this.ensureParamIsSet('v1alphaGenerationImageToImage', params, 'initImage');
    this.ensureParamIsSet('v1alphaGenerationImageToImage', params, 'options');

    // Create URL to call
    const url = `${this.basePath}/v1alpha/generation/{engine_id}/image-to-image`
      .replace(`{${'engine_id'}}`, encodeURIComponent(`${params['engineId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode form parameters
      .withHeader('content-type', 'application/x-www-form-urlencoded')
      .withContent(this.queryString({ 
        'init_image': params['initImage'],
        'options': params['options'],
      }))
      .withHeader('Accept', params['accept'])      .withHeader('Organization', params['organization'])
      // Authentication 'api_key_header_Authorization' required
      .withHeader('Authorization', this.authStorage.getapi_key_header_Authorization())
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * image-to-image/masking
   * Paint fancy things into fancy pictures
   * @param params.engineId  
   * @param params.accept  
   * @param params.initImage Initial image to use for the image-to-image generation
   * @param params.options 
   * @param params.organization Optional: Allows for requests to be scoped to an organization other than the user\&#39;s default.  If not provided, the user\&#39;s default organization will be used.
   * @param params.maskImage Optional mask image to use for masking. Must be the same dimensions as the &#x60;init_image&#x60;. Use the &#x60;mask_source&#x60; option to specify whether the white or black pixels should be inpainted. (Note: if you set &#x60;mask_source&#x60; to &#x60;INIT_IMAGE_ALPHA&#x60; you can omit the &#x60;mask_image&#x60; parameter completely.)
   */
  async v1alphaGenerationMasking(params: IV1alphaGenerationMaskingParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('v1alphaGenerationMasking', params, 'engineId');
    this.ensureParamIsSet('v1alphaGenerationMasking', params, 'accept');
    this.ensureParamIsSet('v1alphaGenerationMasking', params, 'initImage');
    this.ensureParamIsSet('v1alphaGenerationMasking', params, 'options');

    // Create URL to call
    const url = `${this.basePath}/v1alpha/generation/{engine_id}/image-to-image/masking`
      .replace(`{${'engine_id'}}`, encodeURIComponent(`${params['engineId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode form parameters
      .withHeader('content-type', 'application/x-www-form-urlencoded')
      .withContent(this.queryString({ 
        'init_image': params['initImage'],
        'mask_image': params['maskImage'],
        'options': params['options'],
      }))
      .withHeader('Accept', params['accept'])      .withHeader('Organization', params['organization'])
      // Authentication 'api_key_header_Authorization' required
      .withHeader('Authorization', this.authStorage.getapi_key_header_Authorization())
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * text-to-image
   * Generate an image from text
   * @param params.engineId  
   * @param params.accept  
   * @param params.textToImageRequestBody 
   * @param params.organization Optional: Allows for requests to be scoped to an organization other than the user\&#39;s default.  If not provided, the user\&#39;s default organization will be used.
   */
  async v1alphaGenerationTextToImage(params: IV1alphaGenerationTextToImageParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('v1alphaGenerationTextToImage', params, 'engineId');
    this.ensureParamIsSet('v1alphaGenerationTextToImage', params, 'accept');
    this.ensureParamIsSet('v1alphaGenerationTextToImage', params, 'textToImageRequestBody');

    // Create URL to call
    const url = `${this.basePath}/v1alpha/generation/{engine_id}/text-to-image`
      .replace(`{${'engine_id'}}`, encodeURIComponent(`${params['engineId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['textToImageRequestBody'] || {}))
      .withHeader('Accept', params['accept'])      .withHeader('Organization', params['organization'])
      // Authentication 'api_key_header_Authorization' required
      .withHeader('Authorization', this.authStorage.getapi_key_header_Authorization())
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

