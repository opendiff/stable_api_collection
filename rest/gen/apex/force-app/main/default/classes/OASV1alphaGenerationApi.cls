/*
 * Stability.ai REST API
 * Welcome to the Stability.ai REST API developer preview!\n\nPlease note, this is an alpha version of our new REST API, and is subject to change according to\nyour feedback.\n\nFeedback during this test is crucial for us to understand what the pain points are and how we can\nimprove it going forward.\n\nChanges will be communicated here, as well as on our online REST API documentation, which can be\nfound at: https://api.stability.ai/docs\n\nYour DreamStudio API key will be required for authentication. You can learn more about API keys\nhere: https://platform.stability.ai/docs/getting-started/authentication\n\nIf you encounter any issues, please let us know in the #API discord channel:\nhttps://discord.gg/stablediffusion\n
 *
 * The version of the OpenAPI document: 0.1
 * Contact: info@stability.ai
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

public class OASV1alphaGenerationApi {
    OASClient client;

    public OASV1alphaGenerationApi(OASClient client) {
        this.client = client;
    }

    public OASV1alphaGenerationApi() {
        this.client = new OASClient();
    }

    public OASClient getClient() {
        return this.client;
    }

    /**
     * image-to-image
     * Generate big fancy pictures from small fancy pictures
     * @param engineId   (required)
     * @param accept   (required)
     * @param initImage Initial image to use for the image-to-image generation (required)
     * @param options  (required)
     * @param organization Optional: Allows for requests to be scoped to an organization other than the user\&#39;s default.  If not provided, the user\&#39;s default organization will be used. (optional)
     * @throws OAS.ApiException if fails to make API call
     */
    public void v1alphaGenerationImageToImage(Map<String, Object> params) {
        client.assertNotNull(params.get('engineId'), 'engineId');
        client.assertNotNull(params.get('accept'), 'accept');
        client.assertNotNull(params.get('initImage'), 'initImage');
        client.assertNotNull(params.get('options'), 'options');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('init_image', (Blob) params.get('initImage')));
        form.addAll(client.makeParam('options', (OASImageToImageOptions) params.get('options')));

        client.invoke(
            'POST', '/v1alpha/generation/{engine_id}/image-to-image', '',
            query, form,
            new Map<String, Object>{
                'engine_id' => (String) params.get('engineId')
            },
            new Map<String, Object>{
                'Accept' => (String) params.get('accept'),
                'Organization' => (String) params.get('organization')
            },
            new List<String>{ 'application/vnd.goa.error' },
            new List<String>{ 'multipart/form-data' },
            new List<String> { 'api_key_header_Authorization' },
            null
        );
    }
    /**
     * image-to-image/masking
     * Paint fancy things into fancy pictures
     * @param engineId   (required)
     * @param accept   (required)
     * @param initImage Initial image to use for the image-to-image generation (required)
     * @param options  (required)
     * @param organization Optional: Allows for requests to be scoped to an organization other than the user\&#39;s default.  If not provided, the user\&#39;s default organization will be used. (optional)
     * @param maskImage Optional mask image to use for masking. Must be the same dimensions as the &#x60;init_image&#x60;. Use the &#x60;mask_source&#x60; option to specify whether the white or black pixels should be inpainted. (Note: if you set &#x60;mask_source&#x60; to &#x60;INIT_IMAGE_ALPHA&#x60; you can omit the &#x60;mask_image&#x60; parameter completely.) (optional)
     * @throws OAS.ApiException if fails to make API call
     */
    public void v1alphaGenerationMasking(Map<String, Object> params) {
        client.assertNotNull(params.get('engineId'), 'engineId');
        client.assertNotNull(params.get('accept'), 'accept');
        client.assertNotNull(params.get('initImage'), 'initImage');
        client.assertNotNull(params.get('options'), 'options');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('init_image', (Blob) params.get('initImage')));
        form.addAll(client.makeParam('mask_image', (Blob) params.get('maskImage')));
        form.addAll(client.makeParam('options', (OASMaskingOptions) params.get('options')));

        client.invoke(
            'POST', '/v1alpha/generation/{engine_id}/image-to-image/masking', '',
            query, form,
            new Map<String, Object>{
                'engine_id' => (String) params.get('engineId')
            },
            new Map<String, Object>{
                'Accept' => (String) params.get('accept'),
                'Organization' => (String) params.get('organization')
            },
            new List<String>{ 'application/vnd.goa.error' },
            new List<String>{ 'multipart/form-data' },
            new List<String> { 'api_key_header_Authorization' },
            null
        );
    }
    /**
     * text-to-image
     * Generate an image from text
     * @param engineId   (required)
     * @param accept   (required)
     * @param oaSTextToImageRequestBody  (required)
     * @param organization Optional: Allows for requests to be scoped to an organization other than the user\&#39;s default.  If not provided, the user\&#39;s default organization will be used. (optional)
     * @throws OAS.ApiException if fails to make API call
     */
    public void v1alphaGenerationTextToImage(Map<String, Object> params) {
        client.assertNotNull(params.get('engineId'), 'engineId');
        client.assertNotNull(params.get('accept'), 'accept');
        client.assertNotNull(params.get('oaSTextToImageRequestBody'), 'oaSTextToImageRequestBody');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        client.invoke(
            'POST', '/v1alpha/generation/{engine_id}/text-to-image',
            (OASTextToImageRequestBody) params.get('oaSTextToImageRequestBody'),
            query, form,
            new Map<String, Object>{
                'engine_id' => (String) params.get('engineId')
            },
            new Map<String, Object>{
                'Accept' => (String) params.get('accept'),
                'Organization' => (String) params.get('organization')
            },
            new List<String>{ 'application/vnd.goa.error' },
            new List<String>{ 'application/json' },
            new List<String> { 'api_key_header_Authorization' },
            null
        );
    }
}
