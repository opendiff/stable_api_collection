/*
 * Stability.ai REST API
 * Welcome to the Stability.ai REST API developer preview!\n\nPlease note, this is an alpha version of our new REST API, and is subject to change according to\nyour feedback.\n\nFeedback during this test is crucial for us to understand what the pain points are and how we can\nimprove it going forward.\n\nChanges will be communicated here, as well as on our online REST API documentation, which can be\nfound at: https://api.stability.ai/docs\n\nYour DreamStudio API key will be required for authentication. You can learn more about API keys\nhere: https://platform.stability.ai/docs/getting-started/authentication\n\nIf you encounter any issues, please let us know in the #API discord channel:\nhttps://discord.gg/stablediffusion\n
 *
 * The version of the OpenAPI document: 0.1
 * Contact: info@stability.ai
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * OASTextToImageRequestBody
 */
public class OASTextToImageRequestBody implements OAS.MappedProperties {
    /**
     * How strictly the diffusion process adheres to the prompt text (higher values keep your image closer to your prompt)
     * minimum: 0
     * maximum: 35
     * @return cfgScale
     */
    public Double cfgScale { get; set; }

    /**
     * Gets or Sets clipGuidancePreset
     */
    public enum ClipGuidancePresetEnum {
        FAST_BLUE,
        FAST_GREEN,
        NONE,
        SIMPLE,
        SLOW,
        SLOWER,
        SLOWEST
    }

    /**
     * Get clipGuidancePreset
     * @return clipGuidancePreset
     */
    public ClipGuidancePresetEnum clipGuidancePreset { get; set; }

    /**
     * Height of the image (note: `height * width` must be <= 1 Megapixel)
     * minimum: 512
     * maximum: 2048
     * @return height
     */
    public Integer height { get; set; }

    /**
     * Which sampler to use for the diffusion process. If this value is omitted we\'ll automatically select an appropriate sampler for you.
     */
    public enum SamplerEnum {
        DDIM,
        DDPM,
        K_DPMPP_2M,
        K_DPMPP_2S_ANCESTRAL,
        K_DPM_2,
        K_DPM_2_ANCESTRAL,
        K_EULER,
        K_EULER_ANCESTRAL,
        K_HEUN,
        K_LMS
    }

    /**
     * Which sampler to use for the diffusion process. If this value is omitted we\'ll automatically select an appropriate sampler for you.
     * @return sampler
     */
    public SamplerEnum sampler { get; set; }

    /**
     * Number of images to generate
     * minimum: 1
     * maximum: 10
     * @return samples
     */
    public Integer samples { get; set; }

    /**
     * Random noise seed (omit this option or use `0` for a random seed)
     * minimum: 0
     * maximum: 2147483647
     * @return seed
     */
    public Integer seed { get; set; }

    /**
     * Number of diffusion steps to run
     * minimum: 10
     * maximum: 150
     * @return steps
     */
    public Integer steps { get; set; }

    /**
     * Get textPrompts
     * @return textPrompts
     */
    public List<OASTextPrompt> textPrompts { get; set; }

    /**
     * Width of the image (note: `height * width` must be <= 1 Megapixel)
     * minimum: 512
     * maximum: 2048
     * @return width
     */
    public Integer width { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'cfg_scale' => 'cfgScale',
        'clip_guidance_preset' => 'clipGuidancePreset',
        'text_prompts' => 'textPrompts'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'cfg_scale' => 'cfgScale',
        'clip_guidance_preset' => 'clipGuidancePreset',
        'text_prompts' => 'textPrompts'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'cfg_scale' => 'cfgScale',
        'clip_guidance_preset' => 'clipGuidancePreset',
        'text_prompts' => 'textPrompts'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public OASTextToImageRequestBody() {
        cfgScale = 7;
        clipGuidancePreset = ClipGuidancePresetEnum.NONE;
        height = 512;
        samples = 1;
        steps = 50;
        textPrompts = new List<OASTextPrompt>();
        width = 512;
    }

    public static OASTextToImageRequestBody getExample() {
        OASTextToImageRequestBody textToImageRequestBody = new OASTextToImageRequestBody();
          textToImageRequestBody.cfgScale = 7;
          textToImageRequestBody.clipGuidancePreset = ClipGuidancePresetEnum.FAST_BLUE;
          textToImageRequestBody.height = 512;
          textToImageRequestBody.sampler = SamplerEnum.K_DPM_2_ANCESTRAL;
          textToImageRequestBody.samples = 1;
          textToImageRequestBody.seed = 0;
          textToImageRequestBody.steps = 75;
          textToImageRequestBody.textPrompts = new List<OASTextPrompt>{OASTextPrompt.getExample()};
          textToImageRequestBody.width = 512;
        return textToImageRequestBody;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASTextToImageRequestBody) {           
            OASTextToImageRequestBody textToImageRequestBody = (OASTextToImageRequestBody) obj;
            return this.cfgScale == textToImageRequestBody.cfgScale
                && this.clipGuidancePreset == textToImageRequestBody.clipGuidancePreset
                && this.height == textToImageRequestBody.height
                && this.sampler == textToImageRequestBody.sampler
                && this.samples == textToImageRequestBody.samples
                && this.seed == textToImageRequestBody.seed
                && this.steps == textToImageRequestBody.steps
                && this.textPrompts == textToImageRequestBody.textPrompts
                && this.width == textToImageRequestBody.width;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (cfgScale == null ? 0 : System.hashCode(cfgScale));
        hashCode = (17 * hashCode) + (clipGuidancePreset == null ? 0 : System.hashCode(clipGuidancePreset));
        hashCode = (17 * hashCode) + (height == null ? 0 : System.hashCode(height));
        hashCode = (17 * hashCode) + (sampler == null ? 0 : System.hashCode(sampler));
        hashCode = (17 * hashCode) + (samples == null ? 0 : System.hashCode(samples));
        hashCode = (17 * hashCode) + (seed == null ? 0 : System.hashCode(seed));
        hashCode = (17 * hashCode) + (steps == null ? 0 : System.hashCode(steps));
        hashCode = (17 * hashCode) + (textPrompts == null ? 0 : System.hashCode(textPrompts));
        hashCode = (17 * hashCode) + (width == null ? 0 : System.hashCode(width));
        return hashCode;
    }
}

