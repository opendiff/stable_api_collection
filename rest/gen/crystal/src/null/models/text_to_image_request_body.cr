# #Stability.ai REST API
#
##Welcome to the Stability.ai REST API developer preview!  Please note, this is an alpha version of our new REST API, and is subject to change according to your feedback.  Feedback during this test is crucial for us to understand what the pain points are and how we can improve it going forward.  Changes will be communicated here, as well as on our online REST API documentation, which can be found at: https://api.stability.ai/docs  Your DreamStudio API key will be required for authentication. You can learn more about API keys here: https://platform.stability.ai/docs/getting-started/authentication  If you encounter any issues, please let us know in the #API discord channel: https://discord.gg/stablediffusion 
#
#The version of the OpenAPI document: 0.1
#Contact: info@stability.ai
#Generated by: https://openapi-generator.tech
#OpenAPI Generator version: 7.0.0-SNAPSHOT
#

require "json"
require "time"

module 
  class TextToImageRequestBody
    include JSON::Serializable

    # Required properties
    @[JSON::Field(key: "text_prompts", type: Array(TextPrompt), nillable: false, emit_null: false)]
    property text_prompts : Array(TextPrompt)

    # Optional properties
    # How strictly the diffusion process adheres to the prompt text (higher values keep your image closer to your prompt)
    @[JSON::Field(key: "cfg_scale", type: Float64?, default: 7, nillable: true, emit_null: false)]
    property cfg_scale : Float64?

    @[JSON::Field(key: "clip_guidance_preset", type: String?, default: "NONE", nillable: true, emit_null: false)]
    property clip_guidance_preset : String?

    # Height of the image (note: `height * width` must be <= 1 Megapixel)
    @[JSON::Field(key: "height", type: Int32?, default: 512, nillable: true, emit_null: false)]
    property height : Int32?

    # Which sampler to use for the diffusion process. If this value is omitted we'll automatically select an appropriate sampler for you.
    @[JSON::Field(key: "sampler", type: String?, nillable: true, emit_null: false)]
    property sampler : String?

    # Number of images to generate
    @[JSON::Field(key: "samples", type: Int32?, default: 1, nillable: true, emit_null: false)]
    property samples : Int32?

    # Random noise seed (omit this option or use `0` for a random seed)
    @[JSON::Field(key: "seed", type: Int32?, nillable: true, emit_null: false)]
    property seed : Int32?

    # Number of diffusion steps to run
    @[JSON::Field(key: "steps", type: Int32?, default: 50, nillable: true, emit_null: false)]
    property steps : Int32?

    # Width of the image (note: `height * width` must be <= 1 Megapixel)
    @[JSON::Field(key: "width", type: Int32?, default: 512, nillable: true, emit_null: false)]
    property width : Int32?

    class EnumAttributeValidator
      getter datatype : String
      getter allowable_values : Array(String)

      def initialize(datatype, allowable_values)
        @datatype = datatype
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.includes?(value)
      end
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(@text_prompts : Array(TextPrompt), @cfg_scale : Float64?, @clip_guidance_preset : String?, @height : Int32?, @sampler : String?, @samples : Int32?, @seed : Int32?, @steps : Int32?, @width : Int32?)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      if !@cfg_scale.nil? && @cfg_scale > 35
        invalid_properties.push("invalid value for \"cfg_scale\", must be smaller than or equal to 35.")
      end

      if !@cfg_scale.nil? && @cfg_scale < 0
        invalid_properties.push("invalid value for \"cfg_scale\", must be greater than or equal to 0.")
      end

      if !@height.nil? && @height > 2048
        invalid_properties.push("invalid value for \"height\", must be smaller than or equal to 2048.")
      end

      if !@height.nil? && @height < 512
        invalid_properties.push("invalid value for \"height\", must be greater than or equal to 512.")
      end

      if !@samples.nil? && @samples > 10
        invalid_properties.push("invalid value for \"samples\", must be smaller than or equal to 10.")
      end

      if !@samples.nil? && @samples < 1
        invalid_properties.push("invalid value for \"samples\", must be greater than or equal to 1.")
      end

      if !@seed.nil? && @seed > 2147483647
        invalid_properties.push("invalid value for \"seed\", must be smaller than or equal to 2147483647.")
      end

      if !@seed.nil? && @seed < 0
        invalid_properties.push("invalid value for \"seed\", must be greater than or equal to 0.")
      end

      if !@steps.nil? && @steps > 150
        invalid_properties.push("invalid value for \"steps\", must be smaller than or equal to 150.")
      end

      if !@steps.nil? && @steps < 10
        invalid_properties.push("invalid value for \"steps\", must be greater than or equal to 10.")
      end

      if @text_prompts.size < 1
        invalid_properties.push("invalid value for \"text_prompts\", number of items must be greater than or equal to 1."
      end

      if !@width.nil? && @width > 2048
        invalid_properties.push("invalid value for \"width\", must be smaller than or equal to 2048.")
      end

      if !@width.nil? && @width < 512
        invalid_properties.push("invalid value for \"width\", must be greater than or equal to 512.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@cfg_scale.nil? && @cfg_scale > 35
      return false if !@cfg_scale.nil? && @cfg_scale < 0
      clip_guidance_preset_validator = EnumAttributeValidator.new("String", ["FAST_BLUE", "FAST_GREEN", "NONE", "SIMPLE", "SLOW", "SLOWER", "SLOWEST"])
      return false unless clip_guidance_preset_validator.valid?(@clip_guidance_preset)
      return false if !@height.nil? && @height > 2048
      return false if !@height.nil? && @height < 512
      sampler_validator = EnumAttributeValidator.new("String", ["DDIM", "DDPM", "K_DPMPP_2M", "K_DPMPP_2S_ANCESTRAL", "K_DPM_2", "K_DPM_2_ANCESTRAL", "K_EULER", "K_EULER_ANCESTRAL", "K_HEUN", "K_LMS"])
      return false unless sampler_validator.valid?(@sampler)
      return false if !@samples.nil? && @samples > 10
      return false if !@samples.nil? && @samples < 1
      return false if !@seed.nil? && @seed > 2147483647
      return false if !@seed.nil? && @seed < 0
      return false if !@steps.nil? && @steps > 150
      return false if !@steps.nil? && @steps < 10
      return false if @text_prompts.size < 1
      return false if !@width.nil? && @width > 2048
      return false if !@width.nil? && @width < 512
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] cfg_scale Value to be assigned
    def cfg_scale=(cfg_scale)
      if !cfg_scale.nil? && cfg_scale > 35
        raise ArgumentError.new("invalid value for \"cfg_scale\", must be smaller than or equal to 35.")
      end

      if !cfg_scale.nil? && cfg_scale < 0
        raise ArgumentError.new("invalid value for \"cfg_scale\", must be greater than or equal to 0.")
      end

      @cfg_scale = cfg_scale
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] clip_guidance_preset Object to be assigned
    def clip_guidance_preset=(clip_guidance_preset)
      validator = EnumAttributeValidator.new("String", ["FAST_BLUE", "FAST_GREEN", "NONE", "SIMPLE", "SLOW", "SLOWER", "SLOWEST"])
      unless validator.valid?(clip_guidance_preset)
        raise ArgumentError.new("invalid value for \"clip_guidance_preset\", must be one of #{validator.allowable_values}.")
      end
      @clip_guidance_preset = clip_guidance_preset
    end

    # Custom attribute writer method with validation
    # @param [Object] height Value to be assigned
    def height=(height)
      if !height.nil? && height > 2048
        raise ArgumentError.new("invalid value for \"height\", must be smaller than or equal to 2048.")
      end

      if !height.nil? && height < 512
        raise ArgumentError.new("invalid value for \"height\", must be greater than or equal to 512.")
      end

      @height = height
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sampler Object to be assigned
    def sampler=(sampler)
      validator = EnumAttributeValidator.new("String", ["DDIM", "DDPM", "K_DPMPP_2M", "K_DPMPP_2S_ANCESTRAL", "K_DPM_2", "K_DPM_2_ANCESTRAL", "K_EULER", "K_EULER_ANCESTRAL", "K_HEUN", "K_LMS"])
      unless validator.valid?(sampler)
        raise ArgumentError.new("invalid value for \"sampler\", must be one of #{validator.allowable_values}.")
      end
      @sampler = sampler
    end

    # Custom attribute writer method with validation
    # @param [Object] samples Value to be assigned
    def samples=(samples)
      if !samples.nil? && samples > 10
        raise ArgumentError.new("invalid value for \"samples\", must be smaller than or equal to 10.")
      end

      if !samples.nil? && samples < 1
        raise ArgumentError.new("invalid value for \"samples\", must be greater than or equal to 1.")
      end

      @samples = samples
    end

    # Custom attribute writer method with validation
    # @param [Object] seed Value to be assigned
    def seed=(seed)
      if !seed.nil? && seed > 2147483647
        raise ArgumentError.new("invalid value for \"seed\", must be smaller than or equal to 2147483647.")
      end

      if !seed.nil? && seed < 0
        raise ArgumentError.new("invalid value for \"seed\", must be greater than or equal to 0.")
      end

      @seed = seed
    end

    # Custom attribute writer method with validation
    # @param [Object] steps Value to be assigned
    def steps=(steps)
      if !steps.nil? && steps > 150
        raise ArgumentError.new("invalid value for \"steps\", must be smaller than or equal to 150.")
      end

      if !steps.nil? && steps < 10
        raise ArgumentError.new("invalid value for \"steps\", must be greater than or equal to 10.")
      end

      @steps = steps
    end

    # Custom attribute writer method with validation
    # @param [Object] text_prompts Value to be assigned
    def text_prompts=(text_prompts)
      if text_prompts.size < 1
        raise ArgumentError.new("invalid value for \"text_prompts\", number of items must be greater than or equal to 1.")
      end

      @text_prompts = text_prompts
    end

    # Custom attribute writer method with validation
    # @param [Object] width Value to be assigned
    def width=(width)
      if !width.nil? && width > 2048
        raise ArgumentError.new("invalid value for \"width\", must be smaller than or equal to 2048.")
      end

      if !width.nil? && width < 512
        raise ArgumentError.new("invalid value for \"width\", must be greater than or equal to 512.")
      end

      @width = width
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
          cfg_scale == o.cfg_scale &&
          clip_guidance_preset == o.clip_guidance_preset &&
          height == o.height &&
          sampler == o.sampler &&
          samples == o.samples &&
          seed == o.seed &&
          steps == o.steps &&
          text_prompts == o.text_prompts &&
          width == o.width
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [cfg_scale, clip_guidance_preset, height, sampler, samples, seed, steps, text_prompts, width].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if !attributes[self.class.attribute_map[key]]? && self.class.openapi_nullable.includes?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        ({} of Symbol => String).tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = .const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {} of Symbol => String
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.includes?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        ({} of Symbol => String).tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
