# #Stability.ai REST API
#
##Welcome to the Stability.ai REST API developer preview!  Please note, this is an alpha version of our new REST API, and is subject to change according to your feedback.  Feedback during this test is crucial for us to understand what the pain points are and how we can improve it going forward.  Changes will be communicated here, as well as on our online REST API documentation, which can be found at: https://api.stability.ai/docs  Your DreamStudio API key will be required for authentication. You can learn more about API keys here: https://platform.stability.ai/docs/getting-started/authentication  If you encounter any issues, please let us know in the #API discord channel: https://discord.gg/stablediffusion 
#
#The version of the OpenAPI document: 0.1
#Contact: info@stability.ai
#Generated by: https://openapi-generator.tech
#OpenAPI Generator version: 7.0.0-SNAPSHOT
#

require "uri"

module 
  class V1alphaGenerationApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # image-to-image
    # Generate big fancy pictures from small fancy pictures
    # @param engine_id [String]  
    # @param accept [String]  
    # @param init_image [::File] Initial image to use for the image-to-image generation
    # @param options [ImageToImageOptions] 
    # @return [nil]
    def v1alpha_generation_image_to_image(engine_id : String, accept : String, init_image : ::File, options : ImageToImageOptions, organization : String?)
      v1alpha_generation_image_to_image_with_http_info(engine_id, accept, init_image, options, organization)
      nil
    end

    # image-to-image
    # Generate big fancy pictures from small fancy pictures
    # @param engine_id [String]  
    # @param accept [String]  
    # @param init_image [::File] Initial image to use for the image-to-image generation
    # @param options [ImageToImageOptions] 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def v1alpha_generation_image_to_image_with_http_info(engine_id : String, accept : String, init_image : ::File, options : ImageToImageOptions, organization : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: V1alphaGenerationApi.v1alpha_generation_image_to_image ..."}
      end
      # verify the required parameter "engine_id" is set
      if @api_client.config.client_side_validation && engine_id.nil?
        raise ArgumentError.new("Missing the required parameter 'engine_id' when calling V1alphaGenerationApi.v1alpha_generation_image_to_image")
      end
      # verify the required parameter "accept" is set
      if @api_client.config.client_side_validation && accept.nil?
        raise ArgumentError.new("Missing the required parameter 'accept' when calling V1alphaGenerationApi.v1alpha_generation_image_to_image")
      end
      # verify enum value
      allowable_values = ["image/png", "application/json"]
      if @api_client.config.client_side_validation && !allowable_values.includes?(accept)
        raise ArgumentError.new("invalid value for \"accept\", must be one of #{allowable_values}")
      end
      # verify the required parameter "init_image" is set
      if @api_client.config.client_side_validation && init_image.nil?
        raise ArgumentError.new("Missing the required parameter 'init_image' when calling V1alphaGenerationApi.v1alpha_generation_image_to_image")
      end
      # verify the required parameter "options" is set
      if @api_client.config.client_side_validation && options.nil?
        raise ArgumentError.new("Missing the required parameter 'options' when calling V1alphaGenerationApi.v1alpha_generation_image_to_image")
      end
      # resource path
      local_var_path = "/v1alpha/generation/{engine_id}/image-to-image".sub("{" + "engine_id" + "}", URI.encode_path(engine_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/vnd.goa.error"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["multipart/form-data"])
      header_params["Accept"] = accept
      header_params["Organization"] = organization

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new
      form_params[:"init_image"] = init_image unless init_image.nil?
      form_params[:"options"] = options unless options.nil?

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = ["api_key_header_Authorization"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"V1alphaGenerationApi.v1alpha_generation_image_to_image",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: V1alphaGenerationApi#v1alpha_generation_image_to_image\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # image-to-image/masking
    # Paint fancy things into fancy pictures
    # @param engine_id [String]  
    # @param accept [String]  
    # @param init_image [::File] Initial image to use for the image-to-image generation
    # @param options [MaskingOptions] 
    # @return [nil]
    def v1alpha_generation_masking(engine_id : String, accept : String, init_image : ::File, options : MaskingOptions, organization : String?, mask_image : ::File?)
      v1alpha_generation_masking_with_http_info(engine_id, accept, init_image, options, organization, mask_image)
      nil
    end

    # image-to-image/masking
    # Paint fancy things into fancy pictures
    # @param engine_id [String]  
    # @param accept [String]  
    # @param init_image [::File] Initial image to use for the image-to-image generation
    # @param options [MaskingOptions] 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def v1alpha_generation_masking_with_http_info(engine_id : String, accept : String, init_image : ::File, options : MaskingOptions, organization : String?, mask_image : ::File?)
      if @api_client.config.debugging
        Log.debug {"Calling API: V1alphaGenerationApi.v1alpha_generation_masking ..."}
      end
      # verify the required parameter "engine_id" is set
      if @api_client.config.client_side_validation && engine_id.nil?
        raise ArgumentError.new("Missing the required parameter 'engine_id' when calling V1alphaGenerationApi.v1alpha_generation_masking")
      end
      # verify the required parameter "accept" is set
      if @api_client.config.client_side_validation && accept.nil?
        raise ArgumentError.new("Missing the required parameter 'accept' when calling V1alphaGenerationApi.v1alpha_generation_masking")
      end
      # verify enum value
      allowable_values = ["image/png", "application/json"]
      if @api_client.config.client_side_validation && !allowable_values.includes?(accept)
        raise ArgumentError.new("invalid value for \"accept\", must be one of #{allowable_values}")
      end
      # verify the required parameter "init_image" is set
      if @api_client.config.client_side_validation && init_image.nil?
        raise ArgumentError.new("Missing the required parameter 'init_image' when calling V1alphaGenerationApi.v1alpha_generation_masking")
      end
      # verify the required parameter "options" is set
      if @api_client.config.client_side_validation && options.nil?
        raise ArgumentError.new("Missing the required parameter 'options' when calling V1alphaGenerationApi.v1alpha_generation_masking")
      end
      # resource path
      local_var_path = "/v1alpha/generation/{engine_id}/image-to-image/masking".sub("{" + "engine_id" + "}", URI.encode_path(engine_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/vnd.goa.error"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["multipart/form-data"])
      header_params["Accept"] = accept
      header_params["Organization"] = organization

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new
      form_params[:"init_image"] = init_image unless init_image.nil?
      form_params[:"mask_image"] = mask_image unless mask_image.nil?
      form_params[:"options"] = options unless options.nil?

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = ["api_key_header_Authorization"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"V1alphaGenerationApi.v1alpha_generation_masking",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: V1alphaGenerationApi#v1alpha_generation_masking\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # text-to-image
    # Generate an image from text
    # @param engine_id [String]  
    # @param accept [String]  
    # @param text_to_image_request_body [TextToImageRequestBody] 
    # @return [nil]
    def v1alpha_generation_text_to_image(engine_id : String, accept : String, text_to_image_request_body : TextToImageRequestBody, organization : String?)
      v1alpha_generation_text_to_image_with_http_info(engine_id, accept, text_to_image_request_body, organization)
      nil
    end

    # text-to-image
    # Generate an image from text
    # @param engine_id [String]  
    # @param accept [String]  
    # @param text_to_image_request_body [TextToImageRequestBody] 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def v1alpha_generation_text_to_image_with_http_info(engine_id : String, accept : String, text_to_image_request_body : TextToImageRequestBody, organization : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: V1alphaGenerationApi.v1alpha_generation_text_to_image ..."}
      end
      # verify the required parameter "engine_id" is set
      if @api_client.config.client_side_validation && engine_id.nil?
        raise ArgumentError.new("Missing the required parameter 'engine_id' when calling V1alphaGenerationApi.v1alpha_generation_text_to_image")
      end
      # verify the required parameter "accept" is set
      if @api_client.config.client_side_validation && accept.nil?
        raise ArgumentError.new("Missing the required parameter 'accept' when calling V1alphaGenerationApi.v1alpha_generation_text_to_image")
      end
      # verify enum value
      allowable_values = ["image/png", "application/json"]
      if @api_client.config.client_side_validation && !allowable_values.includes?(accept)
        raise ArgumentError.new("invalid value for \"accept\", must be one of #{allowable_values}")
      end
      # verify the required parameter "text_to_image_request_body" is set
      if @api_client.config.client_side_validation && text_to_image_request_body.nil?
        raise ArgumentError.new("Missing the required parameter 'text_to_image_request_body' when calling V1alphaGenerationApi.v1alpha_generation_text_to_image")
      end
      # resource path
      local_var_path = "/v1alpha/generation/{engine_id}/text-to-image".sub("{" + "engine_id" + "}", URI.encode_path(engine_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/vnd.goa.error"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])
      header_params["Accept"] = accept
      header_params["Organization"] = organization

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = text_to_image_request_body.to_json

      # return_type
      return_type = nil

      # auth_names
      auth_names = ["api_key_header_Authorization"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"V1alphaGenerationApi.v1alpha_generation_text_to_image",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: V1alphaGenerationApi#v1alpha_generation_text_to_image\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end
  end
end
