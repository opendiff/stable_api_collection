# #Stability.ai REST API
#
##Welcome to the Stability.ai REST API developer preview!  Please note, this is an alpha version of our new REST API, and is subject to change according to your feedback.  Feedback during this test is crucial for us to understand what the pain points are and how we can improve it going forward.  Changes will be communicated here, as well as on our online REST API documentation, which can be found at: https://api.stability.ai/docs  Your DreamStudio API key will be required for authentication. You can learn more about API keys here: https://platform.stability.ai/docs/getting-started/authentication  If you encounter any issues, please let us know in the #API discord channel: https://discord.gg/stablediffusion 
#
#The version of the OpenAPI document: 0.1
#Contact: info@stability.ai
#Generated by: https://openapi-generator.tech
#OpenAPI Generator version: 7.0.0-SNAPSHOT
#

require "../spec_helper"
require "json"
require "time"

# Unit tests for ::V1alphaGenerationApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe "V1alphaGenerationApi" do
  describe "test an instance of V1alphaGenerationApi" do
    it "should create an instance of V1alphaGenerationApi" do
      api_instance = ::V1alphaGenerationApi.new
      # TODO expect(api_instance).to be_instance_of(::V1alphaGenerationApi)
    end
  end

  # unit tests for v1alpha_generation_image_to_image
  # image-to-image
  # Generate big fancy pictures from small fancy pictures
  # @param engine_id  
  # @param accept  
  # @param init_image Initial image to use for the image-to-image generation
  # @param options 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :organization Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used.
  # @return [nil]
  describe "v1alpha_generation_image_to_image test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for v1alpha_generation_masking
  # image-to-image/masking
  # Paint fancy things into fancy pictures
  # @param engine_id  
  # @param accept  
  # @param init_image Initial image to use for the image-to-image generation
  # @param options 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :organization Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used.
  # @option opts [::File] :mask_image Optional mask image to use for masking. Must be the same dimensions as the &#x60;init_image&#x60;. Use the &#x60;mask_source&#x60; option to specify whether the white or black pixels should be inpainted. (Note: if you set &#x60;mask_source&#x60; to &#x60;INIT_IMAGE_ALPHA&#x60; you can omit the &#x60;mask_image&#x60; parameter completely.)
  # @return [nil]
  describe "v1alpha_generation_masking test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for v1alpha_generation_text_to_image
  # text-to-image
  # Generate an image from text
  # @param engine_id  
  # @param accept  
  # @param text_to_image_request_body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :organization Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used.
  # @return [nil]
  describe "v1alpha_generation_text_to_image test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

end
