/**
 * Stability.ai REST API
 * Welcome to the Stability.ai REST API developer preview!  Please note, this is an alpha version of our new REST API, and is subject to change according to your feedback.  Feedback during this test is crucial for us to understand what the pain points are and how we can improve it going forward.  Changes will be communicated here, as well as on our online REST API documentation, which can be found at: https://api.stability.ai/docs  Your DreamStudio API key will be required for authentication. You can learn more about API keys here: https://platform.stability.ai/docs/getting-started/authentication  If you encounter any issues, please let us know in the #API discord channel: https://discord.gg/stablediffusion 
 *
 * The version of the OpenAPI document: 0.1
 * Contact: info@stability.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.Error;
import java.io.File;
import org.openapitools.client.model.ImageToImageOptions;
import org.openapitools.client.model.MaskingOptions;
import org.openapitools.client.model.TextToImageRequestBody;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class V1alphaGenerationApi {
  String basePath = "https://api.stability.ai";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * image-to-image
  * Generate big fancy pictures from small fancy pictures
   * @param engineId  
   * @param accept  
   * @param initImage Initial image to use for the image-to-image generation
   * @param options 
   * @param organization Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used.
   * @return void
  */
  public void v1alphaGenerationImageToImage (String engineId, String accept, File initImage, ImageToImageOptions options, String organization) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'engineId' is set
    if (engineId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'engineId' when calling v1alphaGenerationImageToImage",
        new ApiException(400, "Missing the required parameter 'engineId' when calling v1alphaGenerationImageToImage"));
    }
    // verify the required parameter 'accept' is set
    if (accept == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accept' when calling v1alphaGenerationImageToImage",
        new ApiException(400, "Missing the required parameter 'accept' when calling v1alphaGenerationImageToImage"));
    }
    // verify the required parameter 'initImage' is set
    if (initImage == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'initImage' when calling v1alphaGenerationImageToImage",
        new ApiException(400, "Missing the required parameter 'initImage' when calling v1alphaGenerationImageToImage"));
    }
    // verify the required parameter 'options' is set
    if (options == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'options' when calling v1alphaGenerationImageToImage",
        new ApiException(400, "Missing the required parameter 'options' when calling v1alphaGenerationImageToImage"));
    }

    // create path and map variables
    String path = "/v1alpha/generation/{engine_id}/image-to-image".replaceAll("\\{" + "engine_id" + "\\}", apiInvoker.escapeString(engineId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Organization", ApiInvoker.parameterToString(organization));
    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (initImage != null) {
        localVarBuilder.addBinaryBody("init_image", initImage);
      }
      if (options != null) {
        localVarBuilder.addTextBody("options", ApiInvoker.parameterToString(options), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("options", ApiInvoker.parameterToString(options));
    }

    String[] authNames = new String[] { "api_key_header_Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * image-to-image
   * Generate big fancy pictures from small fancy pictures
   * @param engineId     * @param accept     * @param initImage Initial image to use for the image-to-image generation   * @param options    * @param organization Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used.
  */
  public void v1alphaGenerationImageToImage (String engineId, String accept, File initImage, ImageToImageOptions options, String organization, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'engineId' is set
    if (engineId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'engineId' when calling v1alphaGenerationImageToImage",
        new ApiException(400, "Missing the required parameter 'engineId' when calling v1alphaGenerationImageToImage"));
    }
    // verify the required parameter 'accept' is set
    if (accept == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accept' when calling v1alphaGenerationImageToImage",
        new ApiException(400, "Missing the required parameter 'accept' when calling v1alphaGenerationImageToImage"));
    }
    // verify the required parameter 'initImage' is set
    if (initImage == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'initImage' when calling v1alphaGenerationImageToImage",
        new ApiException(400, "Missing the required parameter 'initImage' when calling v1alphaGenerationImageToImage"));
    }
    // verify the required parameter 'options' is set
    if (options == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'options' when calling v1alphaGenerationImageToImage",
        new ApiException(400, "Missing the required parameter 'options' when calling v1alphaGenerationImageToImage"));
    }

    // create path and map variables
    String path = "/v1alpha/generation/{engine_id}/image-to-image".replaceAll("\\{format\\}","json").replaceAll("\\{" + "engine_id" + "\\}", apiInvoker.escapeString(engineId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Organization", ApiInvoker.parameterToString(organization));

    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (initImage != null) {
        localVarBuilder.addBinaryBody("init_image", initImage);
      }
      
      if (options != null) {
        localVarBuilder.addTextBody("options", ApiInvoker.parameterToString(options), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      
formParams.put("options", ApiInvoker.parameterToString(options));
    }

    String[] authNames = new String[] { "api_key_header_Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * image-to-image/masking
  * Paint fancy things into fancy pictures
   * @param engineId  
   * @param accept  
   * @param initImage Initial image to use for the image-to-image generation
   * @param options 
   * @param organization Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used.
   * @param maskImage Optional mask image to use for masking. Must be the same dimensions as the &#x60;init_image&#x60;. Use the &#x60;mask_source&#x60; option to specify whether the white or black pixels should be inpainted. (Note: if you set &#x60;mask_source&#x60; to &#x60;INIT_IMAGE_ALPHA&#x60; you can omit the &#x60;mask_image&#x60; parameter completely.)
   * @return void
  */
  public void v1alphaGenerationMasking (String engineId, String accept, File initImage, MaskingOptions options, String organization, File maskImage) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'engineId' is set
    if (engineId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'engineId' when calling v1alphaGenerationMasking",
        new ApiException(400, "Missing the required parameter 'engineId' when calling v1alphaGenerationMasking"));
    }
    // verify the required parameter 'accept' is set
    if (accept == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accept' when calling v1alphaGenerationMasking",
        new ApiException(400, "Missing the required parameter 'accept' when calling v1alphaGenerationMasking"));
    }
    // verify the required parameter 'initImage' is set
    if (initImage == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'initImage' when calling v1alphaGenerationMasking",
        new ApiException(400, "Missing the required parameter 'initImage' when calling v1alphaGenerationMasking"));
    }
    // verify the required parameter 'options' is set
    if (options == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'options' when calling v1alphaGenerationMasking",
        new ApiException(400, "Missing the required parameter 'options' when calling v1alphaGenerationMasking"));
    }

    // create path and map variables
    String path = "/v1alpha/generation/{engine_id}/image-to-image/masking".replaceAll("\\{" + "engine_id" + "\\}", apiInvoker.escapeString(engineId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Organization", ApiInvoker.parameterToString(organization));
    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (initImage != null) {
        localVarBuilder.addBinaryBody("init_image", initImage);
      }
      if (maskImage != null) {
        localVarBuilder.addBinaryBody("mask_image", maskImage);
      }
      if (options != null) {
        localVarBuilder.addTextBody("options", ApiInvoker.parameterToString(options), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("options", ApiInvoker.parameterToString(options));
    }

    String[] authNames = new String[] { "api_key_header_Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * image-to-image/masking
   * Paint fancy things into fancy pictures
   * @param engineId     * @param accept     * @param initImage Initial image to use for the image-to-image generation   * @param options    * @param organization Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used.   * @param maskImage Optional mask image to use for masking. Must be the same dimensions as the &#x60;init_image&#x60;. Use the &#x60;mask_source&#x60; option to specify whether the white or black pixels should be inpainted. (Note: if you set &#x60;mask_source&#x60; to &#x60;INIT_IMAGE_ALPHA&#x60; you can omit the &#x60;mask_image&#x60; parameter completely.)
  */
  public void v1alphaGenerationMasking (String engineId, String accept, File initImage, MaskingOptions options, String organization, File maskImage, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'engineId' is set
    if (engineId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'engineId' when calling v1alphaGenerationMasking",
        new ApiException(400, "Missing the required parameter 'engineId' when calling v1alphaGenerationMasking"));
    }
    // verify the required parameter 'accept' is set
    if (accept == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accept' when calling v1alphaGenerationMasking",
        new ApiException(400, "Missing the required parameter 'accept' when calling v1alphaGenerationMasking"));
    }
    // verify the required parameter 'initImage' is set
    if (initImage == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'initImage' when calling v1alphaGenerationMasking",
        new ApiException(400, "Missing the required parameter 'initImage' when calling v1alphaGenerationMasking"));
    }
    // verify the required parameter 'options' is set
    if (options == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'options' when calling v1alphaGenerationMasking",
        new ApiException(400, "Missing the required parameter 'options' when calling v1alphaGenerationMasking"));
    }

    // create path and map variables
    String path = "/v1alpha/generation/{engine_id}/image-to-image/masking".replaceAll("\\{format\\}","json").replaceAll("\\{" + "engine_id" + "\\}", apiInvoker.escapeString(engineId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Organization", ApiInvoker.parameterToString(organization));

    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (initImage != null) {
        localVarBuilder.addBinaryBody("init_image", initImage);
      }
      
      if (maskImage != null) {
        localVarBuilder.addBinaryBody("mask_image", maskImage);
      }
      
      if (options != null) {
        localVarBuilder.addTextBody("options", ApiInvoker.parameterToString(options), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      

formParams.put("options", ApiInvoker.parameterToString(options));
    }

    String[] authNames = new String[] { "api_key_header_Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * text-to-image
  * Generate an image from text
   * @param engineId  
   * @param accept  
   * @param textToImageRequestBody 
   * @param organization Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used.
   * @return void
  */
  public void v1alphaGenerationTextToImage (String engineId, String accept, TextToImageRequestBody textToImageRequestBody, String organization) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = textToImageRequestBody;
    // verify the required parameter 'engineId' is set
    if (engineId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'engineId' when calling v1alphaGenerationTextToImage",
        new ApiException(400, "Missing the required parameter 'engineId' when calling v1alphaGenerationTextToImage"));
    }
    // verify the required parameter 'accept' is set
    if (accept == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accept' when calling v1alphaGenerationTextToImage",
        new ApiException(400, "Missing the required parameter 'accept' when calling v1alphaGenerationTextToImage"));
    }
    // verify the required parameter 'textToImageRequestBody' is set
    if (textToImageRequestBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'textToImageRequestBody' when calling v1alphaGenerationTextToImage",
        new ApiException(400, "Missing the required parameter 'textToImageRequestBody' when calling v1alphaGenerationTextToImage"));
    }

    // create path and map variables
    String path = "/v1alpha/generation/{engine_id}/text-to-image".replaceAll("\\{" + "engine_id" + "\\}", apiInvoker.escapeString(engineId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Organization", ApiInvoker.parameterToString(organization));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "api_key_header_Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * text-to-image
   * Generate an image from text
   * @param engineId     * @param accept     * @param textToImageRequestBody    * @param organization Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used.
  */
  public void v1alphaGenerationTextToImage (String engineId, String accept, TextToImageRequestBody textToImageRequestBody, String organization, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = textToImageRequestBody;

    // verify the required parameter 'engineId' is set
    if (engineId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'engineId' when calling v1alphaGenerationTextToImage",
        new ApiException(400, "Missing the required parameter 'engineId' when calling v1alphaGenerationTextToImage"));
    }
    // verify the required parameter 'accept' is set
    if (accept == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accept' when calling v1alphaGenerationTextToImage",
        new ApiException(400, "Missing the required parameter 'accept' when calling v1alphaGenerationTextToImage"));
    }
    // verify the required parameter 'textToImageRequestBody' is set
    if (textToImageRequestBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'textToImageRequestBody' when calling v1alphaGenerationTextToImage",
        new ApiException(400, "Missing the required parameter 'textToImageRequestBody' when calling v1alphaGenerationTextToImage"));
    }

    // create path and map variables
    String path = "/v1alpha/generation/{engine_id}/text-to-image".replaceAll("\\{format\\}","json").replaceAll("\\{" + "engine_id" + "\\}", apiInvoker.escapeString(engineId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Organization", ApiInvoker.parameterToString(organization));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "api_key_header_Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
