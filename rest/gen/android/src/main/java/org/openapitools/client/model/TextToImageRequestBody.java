/**
 * Stability.ai REST API
 * Welcome to the Stability.ai REST API developer preview!  Please note, this is an alpha version of our new REST API, and is subject to change according to your feedback.  Feedback during this test is crucial for us to understand what the pain points are and how we can improve it going forward.  Changes will be communicated here, as well as on our online REST API documentation, which can be found at: https://api.stability.ai/docs  Your DreamStudio API key will be required for authentication. You can learn more about API keys here: https://platform.stability.ai/docs/getting-started/authentication  If you encounter any issues, please let us know in the #API discord channel: https://discord.gg/stablediffusion 
 *
 * The version of the OpenAPI document: 0.1
 * Contact: info@stability.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import java.math.BigDecimal;
import java.util.*;
import org.openapitools.client.model.TextPrompt;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class TextToImageRequestBody {
  
  @SerializedName("cfg_scale")
  private BigDecimal cfgScale = 7;
  public enum ClipGuidancePresetEnum {
     FAST_BLUE,  FAST_GREEN,  NONE,  SIMPLE,  SLOW,  SLOWER,  SLOWEST, 
  };
  @SerializedName("clip_guidance_preset")
  private ClipGuidancePresetEnum clipGuidancePreset = NONE;
  @SerializedName("height")
  private Integer height = 512;
  public enum SamplerEnum {
     DDIM,  DDPM,  K_DPMPP_2M,  K_DPMPP_2S_ANCESTRAL,  K_DPM_2,  K_DPM_2_ANCESTRAL,  K_EULER,  K_EULER_ANCESTRAL,  K_HEUN,  K_LMS, 
  };
  @SerializedName("sampler")
  private SamplerEnum sampler = null;
  @SerializedName("samples")
  private Integer samples = 1;
  @SerializedName("seed")
  private Integer seed = null;
  @SerializedName("steps")
  private Integer steps = 50;
  @SerializedName("text_prompts")
  private List<TextPrompt> textPrompts = null;
  @SerializedName("width")
  private Integer width = 512;

  /**
   * How strictly the diffusion process adheres to the prompt text (higher values keep your image closer to your prompt)
   * minimum: 0
   * maximum: 35
   **/
  @ApiModelProperty(value = "How strictly the diffusion process adheres to the prompt text (higher values keep your image closer to your prompt)")
  public BigDecimal getCfgScale() {
    return cfgScale;
  }
  public void setCfgScale(BigDecimal cfgScale) {
    this.cfgScale = cfgScale;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ClipGuidancePresetEnum getClipGuidancePreset() {
    return clipGuidancePreset;
  }
  public void setClipGuidancePreset(ClipGuidancePresetEnum clipGuidancePreset) {
    this.clipGuidancePreset = clipGuidancePreset;
  }

  /**
   * Height of the image (note: `height * width` must be <= 1 Megapixel)
   * minimum: 512
   * maximum: 2048
   **/
  @ApiModelProperty(value = "Height of the image (note: `height * width` must be <= 1 Megapixel)")
  public Integer getHeight() {
    return height;
  }
  public void setHeight(Integer height) {
    this.height = height;
  }

  /**
   * Which sampler to use for the diffusion process. If this value is omitted we'll automatically select an appropriate sampler for you.
   **/
  @ApiModelProperty(value = "Which sampler to use for the diffusion process. If this value is omitted we'll automatically select an appropriate sampler for you.")
  public SamplerEnum getSampler() {
    return sampler;
  }
  public void setSampler(SamplerEnum sampler) {
    this.sampler = sampler;
  }

  /**
   * Number of images to generate
   * minimum: 1
   * maximum: 10
   **/
  @ApiModelProperty(value = "Number of images to generate")
  public Integer getSamples() {
    return samples;
  }
  public void setSamples(Integer samples) {
    this.samples = samples;
  }

  /**
   * Random noise seed (omit this option or use `0` for a random seed)
   * minimum: 0
   * maximum: 2147483647
   **/
  @ApiModelProperty(value = "Random noise seed (omit this option or use `0` for a random seed)")
  public Integer getSeed() {
    return seed;
  }
  public void setSeed(Integer seed) {
    this.seed = seed;
  }

  /**
   * Number of diffusion steps to run
   * minimum: 10
   * maximum: 150
   **/
  @ApiModelProperty(value = "Number of diffusion steps to run")
  public Integer getSteps() {
    return steps;
  }
  public void setSteps(Integer steps) {
    this.steps = steps;
  }

  /**
   **/
  @ApiModelProperty(required = true, value = "")
  public List<TextPrompt> getTextPrompts() {
    return textPrompts;
  }
  public void setTextPrompts(List<TextPrompt> textPrompts) {
    this.textPrompts = textPrompts;
  }

  /**
   * Width of the image (note: `height * width` must be <= 1 Megapixel)
   * minimum: 512
   * maximum: 2048
   **/
  @ApiModelProperty(value = "Width of the image (note: `height * width` must be <= 1 Megapixel)")
  public Integer getWidth() {
    return width;
  }
  public void setWidth(Integer width) {
    this.width = width;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TextToImageRequestBody textToImageRequestBody = (TextToImageRequestBody) o;
    return (this.cfgScale == null ? textToImageRequestBody.cfgScale == null : this.cfgScale.equals(textToImageRequestBody.cfgScale)) &&
        (this.clipGuidancePreset == null ? textToImageRequestBody.clipGuidancePreset == null : this.clipGuidancePreset.equals(textToImageRequestBody.clipGuidancePreset)) &&
        (this.height == null ? textToImageRequestBody.height == null : this.height.equals(textToImageRequestBody.height)) &&
        (this.sampler == null ? textToImageRequestBody.sampler == null : this.sampler.equals(textToImageRequestBody.sampler)) &&
        (this.samples == null ? textToImageRequestBody.samples == null : this.samples.equals(textToImageRequestBody.samples)) &&
        (this.seed == null ? textToImageRequestBody.seed == null : this.seed.equals(textToImageRequestBody.seed)) &&
        (this.steps == null ? textToImageRequestBody.steps == null : this.steps.equals(textToImageRequestBody.steps)) &&
        (this.textPrompts == null ? textToImageRequestBody.textPrompts == null : this.textPrompts.equals(textToImageRequestBody.textPrompts)) &&
        (this.width == null ? textToImageRequestBody.width == null : this.width.equals(textToImageRequestBody.width));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.cfgScale == null ? 0: this.cfgScale.hashCode());
    result = 31 * result + (this.clipGuidancePreset == null ? 0: this.clipGuidancePreset.hashCode());
    result = 31 * result + (this.height == null ? 0: this.height.hashCode());
    result = 31 * result + (this.sampler == null ? 0: this.sampler.hashCode());
    result = 31 * result + (this.samples == null ? 0: this.samples.hashCode());
    result = 31 * result + (this.seed == null ? 0: this.seed.hashCode());
    result = 31 * result + (this.steps == null ? 0: this.steps.hashCode());
    result = 31 * result + (this.textPrompts == null ? 0: this.textPrompts.hashCode());
    result = 31 * result + (this.width == null ? 0: this.width.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class TextToImageRequestBody {\n");
    
    sb.append("  cfgScale: ").append(cfgScale).append("\n");
    sb.append("  clipGuidancePreset: ").append(clipGuidancePreset).append("\n");
    sb.append("  height: ").append(height).append("\n");
    sb.append("  sampler: ").append(sampler).append("\n");
    sb.append("  samples: ").append(samples).append("\n");
    sb.append("  seed: ").append(seed).append("\n");
    sb.append("  steps: ").append(steps).append("\n");
    sb.append("  textPrompts: ").append(textPrompts).append("\n");
    sb.append("  width: ").append(width).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
