/**
 * Stability.ai REST API
 * Welcome to the Stability.ai REST API developer preview!  Please note, this is an alpha version of our new REST API, and is subject to change according to your feedback.  Feedback during this test is crucial for us to understand what the pain points are and how we can improve it going forward.  Changes will be communicated here, as well as on our online REST API documentation, which can be found at: https://api.stability.ai/docs  Your DreamStudio API key will be required for authentication. You can learn more about API keys here: https://platform.stability.ai/docs/getting-started/authentication  If you encounter any issues, please let us know in the #API discord channel: https://discord.gg/stablediffusion 
 *
 * The version of the OpenAPI document: 0.1
 * Contact: info@stability.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;
import java.util.List;
import java.util.Date;
import org.openapitools.client.model.*;

public class JsonUtil {
  public static GsonBuilder gsonBuilder;

  static {
    gsonBuilder = new GsonBuilder();
    gsonBuilder.serializeNulls();
    gsonBuilder.setDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
    gsonBuilder.registerTypeAdapter(Date.class, new JsonDeserializer<Date>() {
      public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
        return new Date(json.getAsJsonPrimitive().getAsLong());
      }
    });
  }

  public static Gson getGson() {
    return gsonBuilder.create();
  }

  public static String serialize(Object obj){
    return getGson().toJson(obj);
  }

  public static <T> T deserializeToList(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getListTypeForDeserialization(cls));
  }

  public static <T> T deserializeToObject(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getTypeForDeserialization(cls));
  }

  public static Type getListTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("AccountResponseBody".equalsIgnoreCase(className)) {
      return new TypeToken<List<AccountResponseBody>>(){}.getType();
    }
    
    if ("BalanceResponseBody".equalsIgnoreCase(className)) {
      return new TypeToken<List<BalanceResponseBody>>(){}.getType();
    }
    
    if ("Engine".equalsIgnoreCase(className)) {
      return new TypeToken<List<Engine>>(){}.getType();
    }
    
    if ("Error".equalsIgnoreCase(className)) {
      return new TypeToken<List<Error>>(){}.getType();
    }
    
    if ("ListEnginesResponseBody".equalsIgnoreCase(className)) {
      return new TypeToken<List<ListEnginesResponseBody>>(){}.getType();
    }
    
    if ("OrganizationMembership".equalsIgnoreCase(className)) {
      return new TypeToken<List<OrganizationMembership>>(){}.getType();
    }
    
    if ("TextPrompt".equalsIgnoreCase(className)) {
      return new TypeToken<List<TextPrompt>>(){}.getType();
    }
    
    if ("TextToImageRequestBody".equalsIgnoreCase(className)) {
      return new TypeToken<List<TextToImageRequestBody>>(){}.getType();
    }
    
    return new TypeToken<List<Object>>(){}.getType();
  }

  public static Type getTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("AccountResponseBody".equalsIgnoreCase(className)) {
      return new TypeToken<AccountResponseBody>(){}.getType();
    }
    
    if ("BalanceResponseBody".equalsIgnoreCase(className)) {
      return new TypeToken<BalanceResponseBody>(){}.getType();
    }
    
    if ("Engine".equalsIgnoreCase(className)) {
      return new TypeToken<Engine>(){}.getType();
    }
    
    if ("Error".equalsIgnoreCase(className)) {
      return new TypeToken<Error>(){}.getType();
    }
    
    if ("ListEnginesResponseBody".equalsIgnoreCase(className)) {
      return new TypeToken<ListEnginesResponseBody>(){}.getType();
    }
    
    if ("OrganizationMembership".equalsIgnoreCase(className)) {
      return new TypeToken<OrganizationMembership>(){}.getType();
    }
    
    if ("TextPrompt".equalsIgnoreCase(className)) {
      return new TypeToken<TextPrompt>(){}.getType();
    }
    
    if ("TextToImageRequestBody".equalsIgnoreCase(className)) {
      return new TypeToken<TextToImageRequestBody>(){}.getType();
    }
    
    return new TypeToken<Object>(){}.getType();
  }

};
