#
# Stability.ai REST API
# 
# Welcome to the Stability.ai REST API developer preview!  Please note, this is an alpha version of our new REST API, and is subject to change according to your feedback.  Feedback during this test is crucial for us to understand what the pain points are and how we can improve it going forward.  Changes will be communicated here, as well as on our online REST API documentation, which can be found at: https://api.stability.ai/docs  Your DreamStudio API key will be required for authentication. You can learn more about API keys here: https://platform.stability.ai/docs/getting-started/authentication  If you encounter any issues, please let us know in the #API discord channel: https://discord.gg/stablediffusion 
# The version of the OpenAPI document: 0.1
# Contact: info@stability.ai
# Generated by: https://openapi-generator.tech
#

import httpclient
import json
import logging
import marshal
import options
import strformat
import strutils
import tables
import typetraits
import uri

import ../models/model_error
import ../models/model_image_to_image_options
import ../models/model_masking_options
import ../models/model_text_to_image_request_body

const basepath = "https://api.stability.ai"

template constructResult[T](response: Response): untyped =
  if response.code in {Http200, Http201, Http202, Http204, Http206}:
    try:
      when name(stripGenericParams(T.typedesc).typedesc) == name(Table):
        (some(json.to(parseJson(response.body), T.typedesc)), response)
      else:
        (some(marshal.to[T](response.body)), response)
    except JsonParsingError:
      # The server returned a malformed response though the response code is 2XX
      # TODO: need better error handling
      error("JsonParsingError")
      (none(T.typedesc), response)
  else:
    (none(T.typedesc), response)


proc v1alphaGenerationImageToImage*(httpClient: HttpClient, engineId: string, accept: string, initImage: string, options: ImageToImageOptions, organization: string): Response =
  ## image-to-image
  httpClient.headers["Content-Type"] = "multipart/form-data"
  httpClient.headers["Accept"] = accept
  httpClient.headers["Organization"] = organization
  let query_for_api_call = newMultipartData({
    "init_image": $initImage, # Initial image to use for the image-to-image generation
    "options": $options, # 
  })
  httpClient.post(basepath & fmt"/v1alpha/generation/{engine_id}/image-to-image", multipart=query_for_api_call)


proc v1alphaGenerationMasking*(httpClient: HttpClient, engineId: string, accept: string, initImage: string, options: MaskingOptions, organization: string, maskImage: string): Response =
  ## image-to-image/masking
  httpClient.headers["Content-Type"] = "multipart/form-data"
  httpClient.headers["Accept"] = accept
  httpClient.headers["Organization"] = organization
  let query_for_api_call = newMultipartData({
    "init_image": $initImage, # Initial image to use for the image-to-image generation
    "mask_image": $maskImage, # Optional mask image to use for masking. Must be the same dimensions as the `init_image`. Use the `mask_source` option to specify whether the white or black pixels should be inpainted. (Note: if you set `mask_source` to `INIT_IMAGE_ALPHA` you can omit the `mask_image` parameter completely.)
    "options": $options, # 
  })
  httpClient.post(basepath & fmt"/v1alpha/generation/{engine_id}/image-to-image/masking", multipart=query_for_api_call)


proc v1alphaGenerationTextToImage*(httpClient: HttpClient, engineId: string, accept: string, textToImageRequestBody: TextToImageRequestBody, organization: string): Response =
  ## text-to-image
  httpClient.headers["Content-Type"] = "application/json"
  httpClient.headers["Accept"] = accept
  httpClient.headers["Organization"] = organization
  httpClient.post(basepath & fmt"/v1alpha/generation/{engine_id}/text-to-image", $(%textToImageRequestBody))

