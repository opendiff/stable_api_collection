=begin comment

Stability.ai REST API

Welcome to the Stability.ai REST API developer preview!  Please note, this is an alpha version of our new REST API, and is subject to change according to your feedback.  Feedback during this test is crucial for us to understand what the pain points are and how we can improve it going forward.  Changes will be communicated here, as well as on our online REST API documentation, which can be found at: https://api.stability.ai/docs  Your DreamStudio API key will be required for authentication. You can learn more about API keys here: https://platform.stability.ai/docs/getting-started/authentication  If you encounter any issues, please let us know in the #API discord channel: https://discord.gg/stablediffusion 

The version of the OpenAPI document: 0.1
Contact: info@stability.ai
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::V1alphaGenerationApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# v1alpha_generation_image_to_image
#
# image-to-image
#
# @param string $engine_id   (required)
# @param string $accept   (required)
# @param string $init_image Initial image to use for the image-to-image generation (required)
# @param ImageToImageOptions $options  (required)
# @param string $organization Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)
{
    my $params = {
    'engine_id' => {
        data_type => 'string',
        description => ' ',
        required => '1',
    },
    'accept' => {
        data_type => 'string',
        description => ' ',
        required => '1',
    },
    'init_image' => {
        data_type => 'string',
        description => 'Initial image to use for the image-to-image generation',
        required => '1',
    },
    'options' => {
        data_type => 'ImageToImageOptions',
        description => '',
        required => '1',
    },
    'organization' => {
        data_type => 'string',
        description => 'Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'v1alpha_generation_image_to_image' } = {
        summary => 'image-to-image',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub v1alpha_generation_image_to_image {
    my ($self, %args) = @_;

    # verify the required parameter 'engine_id' is set
    unless (exists $args{'engine_id'}) {
      croak("Missing the required parameter 'engine_id' when calling v1alpha_generation_image_to_image");
    }

    # verify the required parameter 'accept' is set
    unless (exists $args{'accept'}) {
      croak("Missing the required parameter 'accept' when calling v1alpha_generation_image_to_image");
    }

    # verify the required parameter 'init_image' is set
    unless (exists $args{'init_image'}) {
      croak("Missing the required parameter 'init_image' when calling v1alpha_generation_image_to_image");
    }

    # verify the required parameter 'options' is set
    unless (exists $args{'options'}) {
      croak("Missing the required parameter 'options' when calling v1alpha_generation_image_to_image");
    }

    # parse inputs
    my $_resource_path = '/v1alpha/generation/{engine_id}/image-to-image';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.goa.error');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('multipart/form-data');

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'organization'}) {
        $header_params->{'Organization'} = $self->{api_client}->to_header_value($args{'organization'});
    }

    # path params
    if ( exists $args{'engine_id'}) {
        my $_base_variable = "{" . "engine_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'engine_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # form params
    if ( exists $args{'init_image'} ) {
        $form_params->{'init_image'} = [] unless defined $form_params->{'init_image'};
        push @{$form_params->{'init_image'}}, $args{'init_image'};
            }

    # form params
    if ( exists $args{'options'} ) {
                $form_params->{'options'} = $self->{api_client}->to_form_value($args{'options'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(api_key_header_Authorization )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# v1alpha_generation_masking
#
# image-to-image/masking
#
# @param string $engine_id   (required)
# @param string $accept   (required)
# @param string $init_image Initial image to use for the image-to-image generation (required)
# @param MaskingOptions $options  (required)
# @param string $organization Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)
# @param string $mask_image Optional mask image to use for masking. Must be the same dimensions as the &#x60;init_image&#x60;. Use the &#x60;mask_source&#x60; option to specify whether the white or black pixels should be inpainted. (Note: if you set &#x60;mask_source&#x60; to &#x60;INIT_IMAGE_ALPHA&#x60; you can omit the &#x60;mask_image&#x60; parameter completely.) (optional)
{
    my $params = {
    'engine_id' => {
        data_type => 'string',
        description => ' ',
        required => '1',
    },
    'accept' => {
        data_type => 'string',
        description => ' ',
        required => '1',
    },
    'init_image' => {
        data_type => 'string',
        description => 'Initial image to use for the image-to-image generation',
        required => '1',
    },
    'options' => {
        data_type => 'MaskingOptions',
        description => '',
        required => '1',
    },
    'organization' => {
        data_type => 'string',
        description => 'Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used.',
        required => '0',
    },
    'mask_image' => {
        data_type => 'string',
        description => 'Optional mask image to use for masking. Must be the same dimensions as the &#x60;init_image&#x60;. Use the &#x60;mask_source&#x60; option to specify whether the white or black pixels should be inpainted. (Note: if you set &#x60;mask_source&#x60; to &#x60;INIT_IMAGE_ALPHA&#x60; you can omit the &#x60;mask_image&#x60; parameter completely.)',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'v1alpha_generation_masking' } = {
        summary => 'image-to-image/masking',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub v1alpha_generation_masking {
    my ($self, %args) = @_;

    # verify the required parameter 'engine_id' is set
    unless (exists $args{'engine_id'}) {
      croak("Missing the required parameter 'engine_id' when calling v1alpha_generation_masking");
    }

    # verify the required parameter 'accept' is set
    unless (exists $args{'accept'}) {
      croak("Missing the required parameter 'accept' when calling v1alpha_generation_masking");
    }

    # verify the required parameter 'init_image' is set
    unless (exists $args{'init_image'}) {
      croak("Missing the required parameter 'init_image' when calling v1alpha_generation_masking");
    }

    # verify the required parameter 'options' is set
    unless (exists $args{'options'}) {
      croak("Missing the required parameter 'options' when calling v1alpha_generation_masking");
    }

    # parse inputs
    my $_resource_path = '/v1alpha/generation/{engine_id}/image-to-image/masking';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.goa.error');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('multipart/form-data');

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'organization'}) {
        $header_params->{'Organization'} = $self->{api_client}->to_header_value($args{'organization'});
    }

    # path params
    if ( exists $args{'engine_id'}) {
        my $_base_variable = "{" . "engine_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'engine_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # form params
    if ( exists $args{'init_image'} ) {
        $form_params->{'init_image'} = [] unless defined $form_params->{'init_image'};
        push @{$form_params->{'init_image'}}, $args{'init_image'};
            }

    # form params
    if ( exists $args{'mask_image'} ) {
        $form_params->{'mask_image'} = [] unless defined $form_params->{'mask_image'};
        push @{$form_params->{'mask_image'}}, $args{'mask_image'};
            }

    # form params
    if ( exists $args{'options'} ) {
                $form_params->{'options'} = $self->{api_client}->to_form_value($args{'options'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(api_key_header_Authorization )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# v1alpha_generation_text_to_image
#
# text-to-image
#
# @param string $engine_id   (required)
# @param string $accept   (required)
# @param TextToImageRequestBody $text_to_image_request_body  (required)
# @param string $organization Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)
{
    my $params = {
    'engine_id' => {
        data_type => 'string',
        description => ' ',
        required => '1',
    },
    'accept' => {
        data_type => 'string',
        description => ' ',
        required => '1',
    },
    'text_to_image_request_body' => {
        data_type => 'TextToImageRequestBody',
        description => '',
        required => '1',
    },
    'organization' => {
        data_type => 'string',
        description => 'Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'v1alpha_generation_text_to_image' } = {
        summary => 'text-to-image',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub v1alpha_generation_text_to_image {
    my ($self, %args) = @_;

    # verify the required parameter 'engine_id' is set
    unless (exists $args{'engine_id'}) {
      croak("Missing the required parameter 'engine_id' when calling v1alpha_generation_text_to_image");
    }

    # verify the required parameter 'accept' is set
    unless (exists $args{'accept'}) {
      croak("Missing the required parameter 'accept' when calling v1alpha_generation_text_to_image");
    }

    # verify the required parameter 'text_to_image_request_body' is set
    unless (exists $args{'text_to_image_request_body'}) {
      croak("Missing the required parameter 'text_to_image_request_body' when calling v1alpha_generation_text_to_image");
    }

    # parse inputs
    my $_resource_path = '/v1alpha/generation/{engine_id}/text-to-image';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/vnd.goa.error');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # header params
    if ( exists $args{'accept'}) {
        $header_params->{'Accept'} = $self->{api_client}->to_header_value($args{'accept'});
    }

    # header params
    if ( exists $args{'organization'}) {
        $header_params->{'Organization'} = $self->{api_client}->to_header_value($args{'organization'});
    }

    # path params
    if ( exists $args{'engine_id'}) {
        my $_base_variable = "{" . "engine_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'engine_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'text_to_image_request_body'}) {
        $_body_data = $args{'text_to_image_request_body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(api_key_header_Authorization )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

1;
