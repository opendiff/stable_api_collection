{-
   Stability.ai REST API

   Welcome to the Stability.ai REST API developer preview!  Please note, this is an alpha version of our new REST API, and is subject to change according to your feedback.  Feedback during this test is crucial for us to understand what the pain points are and how we can improve it going forward.  Changes will be communicated here, as well as on our online REST API documentation, which can be found at: https://api.stability.ai/docs  Your DreamStudio API key will be required for authentication. You can learn more about API keys here: https://platform.stability.ai/docs/getting-started/authentication  If you encounter any issues, please let us know in the #API discord channel: https://discord.gg/stablediffusion 

   OpenAPI Version: 3.0.3
   Stability.ai REST API API version: 0.1
   Contact: info@stability.ai
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : Stability.aiREST.API.V1alphaEngines
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module Stability.aiREST.API.V1alphaEngines where

import Stability.aiREST.Core
import Stability.aiREST.MimeTypes
import Stability.aiREST.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** V1alphaEngines

-- *** v1alphaEnginesListEngines

-- | @GET \/v1alpha\/engines\/list@
-- 
-- list
-- 
-- List all engines available to your organization/user
-- 
-- AuthMethod: 'AuthApiKeyApiKeyHeaderAuthorization'
-- 
v1alphaEnginesListEngines
  :: aiRESTRequest V1alphaEnginesListEngines MimeNoContent ListEnginesResponseBody MimeJSON
v1alphaEnginesListEngines =
  _mkRequest "GET" ["/v1alpha/engines/list"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyHeaderAuthorization)

data V1alphaEnginesListEngines  

-- | /Optional Param/ "Organization" - Optional: Allows for requests to be scoped to an organization other than the user's default.  If not provided, the user's default organization will be used.
instance HasOptionalParam V1alphaEnginesListEngines Organization where
  applyOptionalParam req (Organization xs) =
    req `addHeader` toHeader ("Organization", xs)
-- | @application/json@
instance Produces V1alphaEnginesListEngines MimeJSON

