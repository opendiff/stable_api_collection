/**
 * Stability.ai REST API
 * Welcome to the Stability.ai REST API developer preview!  Please note, this is an alpha version of our new REST API, and is subject to change according to your feedback.  Feedback during this test is crucial for us to understand what the pain points are and how we can improve it going forward.  Changes will be communicated here, as well as on our online REST API documentation, which can be found at: https://api.stability.ai/docs  Your DreamStudio API key will be required for authentication. You can learn more about API keys here: https://platform.stability.ai/docs/getting-started/authentication  If you encounter any issues, please let us know in the #API discord channel: https://discord.gg/stablediffusion 
 *
 * The version of the OpenAPI document: 0.1
 * Contact: info@stability.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.StabilityAiRestApi);
  }
}(this, function(expect, StabilityAiRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new StabilityAiRestApi.TextToImageRequestBody();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('TextToImageRequestBody', function() {
    it('should create an instance of TextToImageRequestBody', function() {
      // uncomment below and update the code to test TextToImageRequestBody
      //var instance = new StabilityAiRestApi.TextToImageRequestBody();
      //expect(instance).to.be.a(StabilityAiRestApi.TextToImageRequestBody);
    });

    it('should have the property cfgScale (base name: "cfg_scale")', function() {
      // uncomment below and update the code to test the property cfgScale
      //var instance = new StabilityAiRestApi.TextToImageRequestBody();
      //expect(instance).to.be();
    });

    it('should have the property clipGuidancePreset (base name: "clip_guidance_preset")', function() {
      // uncomment below and update the code to test the property clipGuidancePreset
      //var instance = new StabilityAiRestApi.TextToImageRequestBody();
      //expect(instance).to.be();
    });

    it('should have the property height (base name: "height")', function() {
      // uncomment below and update the code to test the property height
      //var instance = new StabilityAiRestApi.TextToImageRequestBody();
      //expect(instance).to.be();
    });

    it('should have the property sampler (base name: "sampler")', function() {
      // uncomment below and update the code to test the property sampler
      //var instance = new StabilityAiRestApi.TextToImageRequestBody();
      //expect(instance).to.be();
    });

    it('should have the property samples (base name: "samples")', function() {
      // uncomment below and update the code to test the property samples
      //var instance = new StabilityAiRestApi.TextToImageRequestBody();
      //expect(instance).to.be();
    });

    it('should have the property seed (base name: "seed")', function() {
      // uncomment below and update the code to test the property seed
      //var instance = new StabilityAiRestApi.TextToImageRequestBody();
      //expect(instance).to.be();
    });

    it('should have the property steps (base name: "steps")', function() {
      // uncomment below and update the code to test the property steps
      //var instance = new StabilityAiRestApi.TextToImageRequestBody();
      //expect(instance).to.be();
    });

    it('should have the property textPrompts (base name: "text_prompts")', function() {
      // uncomment below and update the code to test the property textPrompts
      //var instance = new StabilityAiRestApi.TextToImageRequestBody();
      //expect(instance).to.be();
    });

    it('should have the property width (base name: "width")', function() {
      // uncomment below and update the code to test the property width
      //var instance = new StabilityAiRestApi.TextToImageRequestBody();
      //expect(instance).to.be();
    });

  });

}));
