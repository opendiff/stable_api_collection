/* tslint:disable */
/* eslint-disable */
/**
 * Stability.ai REST API
 * Welcome to the Stability.ai REST API developer preview!  Please note, this is an alpha version of our new REST API, and is subject to change according to your feedback.  Feedback during this test is crucial for us to understand what the pain points are and how we can improve it going forward.  Changes will be communicated here, as well as on our online REST API documentation, which can be found at: https://api.stability.ai/docs  Your DreamStudio API key will be required for authentication. You can learn more about API keys here: https://platform.stability.ai/docs/getting-started/authentication  If you encounter any issues, please let us know in the #API discord channel: https://discord.gg/stablediffusion 
 *
 * The version of the OpenAPI document: 0.1
 * Contact: info@stability.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AccountResponseBody,
  BalanceResponseBody,
} from '../models';
import {
    AccountResponseBodyFromJSON,
    AccountResponseBodyToJSON,
    BalanceResponseBodyFromJSON,
    BalanceResponseBodyToJSON,
} from '../models';

export interface V1alphaUserBalanceRequest {
    organization?: string;
}

/**
 * 
 */
export class V1alphaUserApi extends runtime.BaseAPI {

    /**
     * Get information about the account associated with the provided API key
     * account
     */
    async v1alphaUserAccountRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountResponseBody>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // api_key_header_Authorization authentication
        }

        const response = await this.request({
            path: `/v1alpha/user/account`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountResponseBodyFromJSON(jsonValue));
    }

    /**
     * Get information about the account associated with the provided API key
     * account
     */
    async v1alphaUserAccount(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountResponseBody> {
        const response = await this.v1alphaUserAccountRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get the credit balance of the account/organization associated with the API key
     * balance
     */
    async v1alphaUserBalanceRaw(requestParameters: V1alphaUserBalanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BalanceResponseBody>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.organization !== undefined && requestParameters.organization !== null) {
            headerParameters['Organization'] = String(requestParameters.organization);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // api_key_header_Authorization authentication
        }

        const response = await this.request({
            path: `/v1alpha/user/balance`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BalanceResponseBodyFromJSON(jsonValue));
    }

    /**
     * Get the credit balance of the account/organization associated with the API key
     * balance
     */
    async v1alphaUserBalance(requestParameters: V1alphaUserBalanceRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BalanceResponseBody> {
        const response = await this.v1alphaUserBalanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
