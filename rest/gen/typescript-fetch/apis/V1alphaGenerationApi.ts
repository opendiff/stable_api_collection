/* tslint:disable */
/* eslint-disable */
/**
 * Stability.ai REST API
 * Welcome to the Stability.ai REST API developer preview!  Please note, this is an alpha version of our new REST API, and is subject to change according to your feedback.  Feedback during this test is crucial for us to understand what the pain points are and how we can improve it going forward.  Changes will be communicated here, as well as on our online REST API documentation, which can be found at: https://api.stability.ai/docs  Your DreamStudio API key will be required for authentication. You can learn more about API keys here: https://platform.stability.ai/docs/getting-started/authentication  If you encounter any issues, please let us know in the #API discord channel: https://discord.gg/stablediffusion 
 *
 * The version of the OpenAPI document: 0.1
 * Contact: info@stability.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ImageToImageOptions,
  MaskingOptions,
  TextToImageRequestBody,
} from '../models';
import {
    ImageToImageOptionsFromJSON,
    ImageToImageOptionsToJSON,
    MaskingOptionsFromJSON,
    MaskingOptionsToJSON,
    TextToImageRequestBodyFromJSON,
    TextToImageRequestBodyToJSON,
} from '../models';

export interface V1alphaGenerationImageToImageRequest {
    engineId: string;
    accept: V1alphaGenerationImageToImageAcceptEnum;
    initImage: Blob;
    options: ImageToImageOptions;
    organization?: string;
}

export interface V1alphaGenerationMaskingRequest {
    engineId: string;
    accept: V1alphaGenerationMaskingAcceptEnum;
    initImage: Blob;
    options: MaskingOptions;
    organization?: string;
    maskImage?: Blob;
}

export interface V1alphaGenerationTextToImageRequest {
    engineId: string;
    accept: V1alphaGenerationTextToImageAcceptEnum;
    textToImageRequestBody: TextToImageRequestBody;
    organization?: string;
}

/**
 * 
 */
export class V1alphaGenerationApi extends runtime.BaseAPI {

    /**
     * Generate big fancy pictures from small fancy pictures
     * image-to-image
     */
    async v1alphaGenerationImageToImageRaw(requestParameters: V1alphaGenerationImageToImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.engineId === null || requestParameters.engineId === undefined) {
            throw new runtime.RequiredError('engineId','Required parameter requestParameters.engineId was null or undefined when calling v1alphaGenerationImageToImage.');
        }

        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling v1alphaGenerationImageToImage.');
        }

        if (requestParameters.initImage === null || requestParameters.initImage === undefined) {
            throw new runtime.RequiredError('initImage','Required parameter requestParameters.initImage was null or undefined when calling v1alphaGenerationImageToImage.');
        }

        if (requestParameters.options === null || requestParameters.options === undefined) {
            throw new runtime.RequiredError('options','Required parameter requestParameters.options was null or undefined when calling v1alphaGenerationImageToImage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.organization !== undefined && requestParameters.organization !== null) {
            headerParameters['Organization'] = String(requestParameters.organization);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // api_key_header_Authorization authentication
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.initImage !== undefined) {
            formParams.append('init_image', requestParameters.initImage as any);
        }

        if (requestParameters.options !== undefined) {
            formParams.append('options', new Blob([JSON.stringify(ImageToImageOptionsToJSON(requestParameters.options))], { type: "application/json", }));
                    }

        const response = await this.request({
            path: `/v1alpha/generation/{engine_id}/image-to-image`.replace(`{${"engine_id"}}`, encodeURIComponent(String(requestParameters.engineId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Generate big fancy pictures from small fancy pictures
     * image-to-image
     */
    async v1alphaGenerationImageToImage(requestParameters: V1alphaGenerationImageToImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1alphaGenerationImageToImageRaw(requestParameters, initOverrides);
    }

    /**
     * Paint fancy things into fancy pictures
     * image-to-image/masking
     */
    async v1alphaGenerationMaskingRaw(requestParameters: V1alphaGenerationMaskingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.engineId === null || requestParameters.engineId === undefined) {
            throw new runtime.RequiredError('engineId','Required parameter requestParameters.engineId was null or undefined when calling v1alphaGenerationMasking.');
        }

        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling v1alphaGenerationMasking.');
        }

        if (requestParameters.initImage === null || requestParameters.initImage === undefined) {
            throw new runtime.RequiredError('initImage','Required parameter requestParameters.initImage was null or undefined when calling v1alphaGenerationMasking.');
        }

        if (requestParameters.options === null || requestParameters.options === undefined) {
            throw new runtime.RequiredError('options','Required parameter requestParameters.options was null or undefined when calling v1alphaGenerationMasking.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.organization !== undefined && requestParameters.organization !== null) {
            headerParameters['Organization'] = String(requestParameters.organization);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // api_key_header_Authorization authentication
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.initImage !== undefined) {
            formParams.append('init_image', requestParameters.initImage as any);
        }

        if (requestParameters.maskImage !== undefined) {
            formParams.append('mask_image', requestParameters.maskImage as any);
        }

        if (requestParameters.options !== undefined) {
            formParams.append('options', new Blob([JSON.stringify(MaskingOptionsToJSON(requestParameters.options))], { type: "application/json", }));
                    }

        const response = await this.request({
            path: `/v1alpha/generation/{engine_id}/image-to-image/masking`.replace(`{${"engine_id"}}`, encodeURIComponent(String(requestParameters.engineId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Paint fancy things into fancy pictures
     * image-to-image/masking
     */
    async v1alphaGenerationMasking(requestParameters: V1alphaGenerationMaskingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1alphaGenerationMaskingRaw(requestParameters, initOverrides);
    }

    /**
     * Generate an image from text
     * text-to-image
     */
    async v1alphaGenerationTextToImageRaw(requestParameters: V1alphaGenerationTextToImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.engineId === null || requestParameters.engineId === undefined) {
            throw new runtime.RequiredError('engineId','Required parameter requestParameters.engineId was null or undefined when calling v1alphaGenerationTextToImage.');
        }

        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling v1alphaGenerationTextToImage.');
        }

        if (requestParameters.textToImageRequestBody === null || requestParameters.textToImageRequestBody === undefined) {
            throw new runtime.RequiredError('textToImageRequestBody','Required parameter requestParameters.textToImageRequestBody was null or undefined when calling v1alphaGenerationTextToImage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.organization !== undefined && requestParameters.organization !== null) {
            headerParameters['Organization'] = String(requestParameters.organization);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // api_key_header_Authorization authentication
        }

        const response = await this.request({
            path: `/v1alpha/generation/{engine_id}/text-to-image`.replace(`{${"engine_id"}}`, encodeURIComponent(String(requestParameters.engineId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TextToImageRequestBodyToJSON(requestParameters.textToImageRequestBody),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Generate an image from text
     * text-to-image
     */
    async v1alphaGenerationTextToImage(requestParameters: V1alphaGenerationTextToImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v1alphaGenerationTextToImageRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const V1alphaGenerationImageToImageAcceptEnum = {
    ImagePng: 'image/png',
    ApplicationJson: 'application/json'
} as const;
export type V1alphaGenerationImageToImageAcceptEnum = typeof V1alphaGenerationImageToImageAcceptEnum[keyof typeof V1alphaGenerationImageToImageAcceptEnum];
/**
 * @export
 */
export const V1alphaGenerationMaskingAcceptEnum = {
    ImagePng: 'image/png',
    ApplicationJson: 'application/json'
} as const;
export type V1alphaGenerationMaskingAcceptEnum = typeof V1alphaGenerationMaskingAcceptEnum[keyof typeof V1alphaGenerationMaskingAcceptEnum];
/**
 * @export
 */
export const V1alphaGenerationTextToImageAcceptEnum = {
    ImagePng: 'image/png',
    ApplicationJson: 'application/json'
} as const;
export type V1alphaGenerationTextToImageAcceptEnum = typeof V1alphaGenerationTextToImageAcceptEnum[keyof typeof V1alphaGenerationTextToImageAcceptEnum];
