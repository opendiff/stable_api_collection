/* tslint:disable */
/* eslint-disable */
/**
 * Stability.ai REST API
 * Welcome to the Stability.ai REST API developer preview!  Please note, this is an alpha version of our new REST API, and is subject to change according to your feedback.  Feedback during this test is crucial for us to understand what the pain points are and how we can improve it going forward.  Changes will be communicated here, as well as on our online REST API documentation, which can be found at: https://api.stability.ai/docs  Your DreamStudio API key will be required for authentication. You can learn more about API keys here: https://platform.stability.ai/docs/getting-started/authentication  If you encounter any issues, please let us know in the #API discord channel: https://discord.gg/stablediffusion 
 *
 * The version of the OpenAPI document: 0.1
 * Contact: info@stability.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Engine
 */
export interface Engine {
    /**
     * 
     * @type {string}
     * @memberof Engine
     */
    description: string;
    /**
     * Unique identifier for the engine
     * @type {string}
     * @memberof Engine
     */
    id: string;
    /**
     * Name of the engine
     * @type {string}
     * @memberof Engine
     */
    name: string;
    /**
     * The type of content this engine produces
     * @type {string}
     * @memberof Engine
     */
    type: EngineTypeEnum;
}


/**
 * @export
 */
export const EngineTypeEnum = {
    Audio: 'AUDIO',
    Classification: 'CLASSIFICATION',
    Picture: 'PICTURE',
    Storage: 'STORAGE',
    Text: 'TEXT',
    Video: 'VIDEO'
} as const;
export type EngineTypeEnum = typeof EngineTypeEnum[keyof typeof EngineTypeEnum];


/**
 * Check if a given object implements the Engine interface.
 */
export function instanceOfEngine(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function EngineFromJSON(json: any): Engine {
    return EngineFromJSONTyped(json, false);
}

export function EngineFromJSONTyped(json: any, ignoreDiscriminator: boolean): Engine {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'description': json['description'],
        'id': json['id'],
        'name': json['name'],
        'type': json['type'],
    };
}

export function EngineToJSON(value?: Engine | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'description': value.description,
        'id': value.id,
        'name': value.name,
        'type': value.type,
    };
}

