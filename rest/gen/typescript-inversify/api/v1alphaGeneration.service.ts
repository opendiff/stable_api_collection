/**
 * Stability.ai REST API
 * Welcome to the Stability.ai REST API developer preview!  Please note, this is an alpha version of our new REST API, and is subject to change according to your feedback.  Feedback during this test is crucial for us to understand what the pain points are and how we can improve it going forward.  Changes will be communicated here, as well as on our online REST API documentation, which can be found at: https://api.stability.ai/docs  Your DreamStudio API key will be required for authentication. You can learn more about API keys here: https://platform.stability.ai/docs/getting-started/authentication  If you encounter any issues, please let us know in the #API discord channel: https://discord.gg/stablediffusion 
 *
 * The version of the OpenAPI document: 0.1
 * Contact: info@stability.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';

import { map } from 'rxjs/operators';
import IHttpClient from '../IHttpClient';
import { inject, injectable } from 'inversify';
import { IAPIConfiguration } from '../IAPIConfiguration';
import { Headers } from '../Headers';
import HttpResponse from '../HttpResponse';

import { ImageToImageOptions } from '../model/imageToImageOptions';
import { MaskingOptions } from '../model/maskingOptions';
import { TextToImageRequestBody } from '../model/textToImageRequestBody';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class V1alphaGenerationService {
    private basePath: string = 'https://api.stability.ai';

    constructor(@inject('IApiHttpClient') private httpClient: IHttpClient,
        @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * image-to-image
     * Generate big fancy pictures from small fancy pictures
     * @param engineId  
     * @param accept  
     * @param initImage Initial image to use for the image-to-image generation
     * @param options 
     * @param organization Optional: Allows for requests to be scoped to an organization other than the user\&#39;s default.  If not provided, the user\&#39;s default organization will be used.
     
     */
    public v1alphaGenerationImageToImage(engineId: string, accept: 'image/png' | 'application/json', initImage: Blob, options: ImageToImageOptions, organization?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public v1alphaGenerationImageToImage(engineId: string, accept: 'image/png' | 'application/json', initImage: Blob, options: ImageToImageOptions, organization?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public v1alphaGenerationImageToImage(engineId: string, accept: 'image/png' | 'application/json', initImage: Blob, options: ImageToImageOptions, organization?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (engineId === null || engineId === undefined){
            throw new Error('Required parameter engineId was null or undefined when calling v1alphaGenerationImageToImage.');
        }

        if (accept === null || accept === undefined){
            throw new Error('Required parameter accept was null or undefined when calling v1alphaGenerationImageToImage.');
        }

        if (initImage === null || initImage === undefined){
            throw new Error('Required parameter initImage was null or undefined when calling v1alphaGenerationImageToImage.');
        }

        if (options === null || options === undefined){
            throw new Error('Required parameter options was null or undefined when calling v1alphaGenerationImageToImage.');
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (organization) {
            headers['Organization'] = String(organization);
        }

        // authentication (api_key_header_Authorization) required
        if (this.APIConfiguration.apiKeys && this.APIConfiguration.apiKeys['Authorization']) {
            headers['Authorization'] = this.APIConfiguration.apiKeys['Authorization'];
        }
        headers['Accept'] = 'application/vnd.goa.error';

        let formData: FormData = new FormData();
        headers['Content-Type'] = 'multipart/form-data';
        if (initImage !== undefined) {
            formData.append('init_image', <any>initImage);
        }
        if (options !== undefined) {
            formData.append('options', <any>options);
        }

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/v1alpha/generation/${encodeURIComponent(String(engineId))}/image-to-image`, formData, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * image-to-image/masking
     * Paint fancy things into fancy pictures
     * @param engineId  
     * @param accept  
     * @param initImage Initial image to use for the image-to-image generation
     * @param options 
     * @param organization Optional: Allows for requests to be scoped to an organization other than the user\&#39;s default.  If not provided, the user\&#39;s default organization will be used.
     * @param maskImage Optional mask image to use for masking. Must be the same dimensions as the &#x60;init_image&#x60;. Use the &#x60;mask_source&#x60; option to specify whether the white or black pixels should be inpainted. (Note: if you set &#x60;mask_source&#x60; to &#x60;INIT_IMAGE_ALPHA&#x60; you can omit the &#x60;mask_image&#x60; parameter completely.)
     
     */
    public v1alphaGenerationMasking(engineId: string, accept: 'image/png' | 'application/json', initImage: Blob, options: MaskingOptions, organization?: string, maskImage?: Blob, observe?: 'body', headers?: Headers): Observable<any>;
    public v1alphaGenerationMasking(engineId: string, accept: 'image/png' | 'application/json', initImage: Blob, options: MaskingOptions, organization?: string, maskImage?: Blob, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public v1alphaGenerationMasking(engineId: string, accept: 'image/png' | 'application/json', initImage: Blob, options: MaskingOptions, organization?: string, maskImage?: Blob, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (engineId === null || engineId === undefined){
            throw new Error('Required parameter engineId was null or undefined when calling v1alphaGenerationMasking.');
        }

        if (accept === null || accept === undefined){
            throw new Error('Required parameter accept was null or undefined when calling v1alphaGenerationMasking.');
        }

        if (initImage === null || initImage === undefined){
            throw new Error('Required parameter initImage was null or undefined when calling v1alphaGenerationMasking.');
        }

        if (options === null || options === undefined){
            throw new Error('Required parameter options was null or undefined when calling v1alphaGenerationMasking.');
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (organization) {
            headers['Organization'] = String(organization);
        }

        // authentication (api_key_header_Authorization) required
        if (this.APIConfiguration.apiKeys && this.APIConfiguration.apiKeys['Authorization']) {
            headers['Authorization'] = this.APIConfiguration.apiKeys['Authorization'];
        }
        headers['Accept'] = 'application/vnd.goa.error';

        let formData: FormData = new FormData();
        headers['Content-Type'] = 'multipart/form-data';
        if (initImage !== undefined) {
            formData.append('init_image', <any>initImage);
        }
        if (maskImage !== undefined) {
            formData.append('mask_image', <any>maskImage);
        }
        if (options !== undefined) {
            formData.append('options', <any>options);
        }

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/v1alpha/generation/${encodeURIComponent(String(engineId))}/image-to-image/masking`, formData, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * text-to-image
     * Generate an image from text
     * @param engineId  
     * @param accept  
     * @param textToImageRequestBody 
     * @param organization Optional: Allows for requests to be scoped to an organization other than the user\&#39;s default.  If not provided, the user\&#39;s default organization will be used.
     
     */
    public v1alphaGenerationTextToImage(engineId: string, accept: 'image/png' | 'application/json', textToImageRequestBody: TextToImageRequestBody, organization?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public v1alphaGenerationTextToImage(engineId: string, accept: 'image/png' | 'application/json', textToImageRequestBody: TextToImageRequestBody, organization?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public v1alphaGenerationTextToImage(engineId: string, accept: 'image/png' | 'application/json', textToImageRequestBody: TextToImageRequestBody, organization?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (engineId === null || engineId === undefined){
            throw new Error('Required parameter engineId was null or undefined when calling v1alphaGenerationTextToImage.');
        }

        if (accept === null || accept === undefined){
            throw new Error('Required parameter accept was null or undefined when calling v1alphaGenerationTextToImage.');
        }

        if (textToImageRequestBody === null || textToImageRequestBody === undefined){
            throw new Error('Required parameter textToImageRequestBody was null or undefined when calling v1alphaGenerationTextToImage.');
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (organization) {
            headers['Organization'] = String(organization);
        }

        // authentication (api_key_header_Authorization) required
        if (this.APIConfiguration.apiKeys && this.APIConfiguration.apiKeys['Authorization']) {
            headers['Authorization'] = this.APIConfiguration.apiKeys['Authorization'];
        }
        headers['Accept'] = 'application/vnd.goa.error';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/v1alpha/generation/${encodeURIComponent(String(engineId))}/text-to-image`, textToImageRequestBody , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }

}
