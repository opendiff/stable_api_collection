/*
 * Stability.ai REST API
 *
 * Welcome to the Stability.ai REST API developer preview!  Please note, this is an alpha version of our new REST API, and is subject to change according to your feedback.  Feedback during this test is crucial for us to understand what the pain points are and how we can improve it going forward.  Changes will be communicated here, as well as on our online REST API documentation, which can be found at: https://api.stability.ai/docs  Your DreamStudio API key will be required for authentication. You can learn more about API keys here: https://platform.stability.ai/docs/getting-started/authentication  If you encounter any issues, please let us know in the #API discord channel: https://discord.gg/stablediffusion 
 *
 * The version of the OpenAPI document: 0.1
 * Contact: info@stability.ai
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// TextToImageRequestBody
    /// </summary>
    [DataContract(Name = "TextToImageRequestBody")]
    public partial class TextToImageRequestBody : IEquatable<TextToImageRequestBody>, IValidatableObject
    {
        /// <summary>
        /// Defines ClipGuidancePreset
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ClipGuidancePresetEnum
        {
            /// <summary>
            /// Enum FASTBLUE for value: FAST_BLUE
            /// </summary>
            [EnumMember(Value = "FAST_BLUE")]
            FASTBLUE = 1,

            /// <summary>
            /// Enum FASTGREEN for value: FAST_GREEN
            /// </summary>
            [EnumMember(Value = "FAST_GREEN")]
            FASTGREEN = 2,

            /// <summary>
            /// Enum NONE for value: NONE
            /// </summary>
            [EnumMember(Value = "NONE")]
            NONE = 3,

            /// <summary>
            /// Enum SIMPLE for value: SIMPLE
            /// </summary>
            [EnumMember(Value = "SIMPLE")]
            SIMPLE = 4,

            /// <summary>
            /// Enum SLOW for value: SLOW
            /// </summary>
            [EnumMember(Value = "SLOW")]
            SLOW = 5,

            /// <summary>
            /// Enum SLOWER for value: SLOWER
            /// </summary>
            [EnumMember(Value = "SLOWER")]
            SLOWER = 6,

            /// <summary>
            /// Enum SLOWEST for value: SLOWEST
            /// </summary>
            [EnumMember(Value = "SLOWEST")]
            SLOWEST = 7

        }


        /// <summary>
        /// Gets or Sets ClipGuidancePreset
        /// </summary>
        [DataMember(Name = "clip_guidance_preset", EmitDefaultValue = false)]
        public ClipGuidancePresetEnum? ClipGuidancePreset { get; set; }
        /// <summary>
        /// Which sampler to use for the diffusion process. If this value is omitted we&#39;ll automatically select an appropriate sampler for you.
        /// </summary>
        /// <value>Which sampler to use for the diffusion process. If this value is omitted we&#39;ll automatically select an appropriate sampler for you.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SamplerEnum
        {
            /// <summary>
            /// Enum DDIM for value: DDIM
            /// </summary>
            [EnumMember(Value = "DDIM")]
            DDIM = 1,

            /// <summary>
            /// Enum DDPM for value: DDPM
            /// </summary>
            [EnumMember(Value = "DDPM")]
            DDPM = 2,

            /// <summary>
            /// Enum KDPMPP2M for value: K_DPMPP_2M
            /// </summary>
            [EnumMember(Value = "K_DPMPP_2M")]
            KDPMPP2M = 3,

            /// <summary>
            /// Enum KDPMPP2SANCESTRAL for value: K_DPMPP_2S_ANCESTRAL
            /// </summary>
            [EnumMember(Value = "K_DPMPP_2S_ANCESTRAL")]
            KDPMPP2SANCESTRAL = 4,

            /// <summary>
            /// Enum KDPM2 for value: K_DPM_2
            /// </summary>
            [EnumMember(Value = "K_DPM_2")]
            KDPM2 = 5,

            /// <summary>
            /// Enum KDPM2ANCESTRAL for value: K_DPM_2_ANCESTRAL
            /// </summary>
            [EnumMember(Value = "K_DPM_2_ANCESTRAL")]
            KDPM2ANCESTRAL = 6,

            /// <summary>
            /// Enum KEULER for value: K_EULER
            /// </summary>
            [EnumMember(Value = "K_EULER")]
            KEULER = 7,

            /// <summary>
            /// Enum KEULERANCESTRAL for value: K_EULER_ANCESTRAL
            /// </summary>
            [EnumMember(Value = "K_EULER_ANCESTRAL")]
            KEULERANCESTRAL = 8,

            /// <summary>
            /// Enum KHEUN for value: K_HEUN
            /// </summary>
            [EnumMember(Value = "K_HEUN")]
            KHEUN = 9,

            /// <summary>
            /// Enum KLMS for value: K_LMS
            /// </summary>
            [EnumMember(Value = "K_LMS")]
            KLMS = 10

        }


        /// <summary>
        /// Which sampler to use for the diffusion process. If this value is omitted we&#39;ll automatically select an appropriate sampler for you.
        /// </summary>
        /// <value>Which sampler to use for the diffusion process. If this value is omitted we&#39;ll automatically select an appropriate sampler for you.</value>
        [DataMember(Name = "sampler", EmitDefaultValue = false)]
        public SamplerEnum? Sampler { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TextToImageRequestBody" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TextToImageRequestBody() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TextToImageRequestBody" /> class.
        /// </summary>
        /// <param name="cfgScale">How strictly the diffusion process adheres to the prompt text (higher values keep your image closer to your prompt) (default to 7M).</param>
        /// <param name="clipGuidancePreset">clipGuidancePreset (default to ClipGuidancePresetEnum.NONE).</param>
        /// <param name="height">Height of the image (note: &#x60;height * width&#x60; must be &lt;&#x3D; 1 Megapixel) (default to 512).</param>
        /// <param name="sampler">Which sampler to use for the diffusion process. If this value is omitted we&#39;ll automatically select an appropriate sampler for you..</param>
        /// <param name="samples">Number of images to generate (default to 1).</param>
        /// <param name="seed">Random noise seed (omit this option or use &#x60;0&#x60; for a random seed).</param>
        /// <param name="steps">Number of diffusion steps to run (default to 50).</param>
        /// <param name="textPrompts">textPrompts (required).</param>
        /// <param name="width">Width of the image (note: &#x60;height * width&#x60; must be &lt;&#x3D; 1 Megapixel) (default to 512).</param>
        public TextToImageRequestBody(decimal cfgScale = 7M, ClipGuidancePresetEnum? clipGuidancePreset = ClipGuidancePresetEnum.NONE, int height = 512, SamplerEnum? sampler = default(SamplerEnum?), int samples = 1, int seed = default(int), int steps = 50, List<TextPrompt> textPrompts = default(List<TextPrompt>), int width = 512)
        {
            // to ensure "textPrompts" is required (not null)
            if (textPrompts == null)
            {
                throw new ArgumentNullException("textPrompts is a required property for TextToImageRequestBody and cannot be null");
            }
            this.TextPrompts = textPrompts;
            this.CfgScale = cfgScale;
            this.ClipGuidancePreset = clipGuidancePreset;
            this.Height = height;
            this.Sampler = sampler;
            this.Samples = samples;
            this.Seed = seed;
            this.Steps = steps;
            this.Width = width;
        }

        /// <summary>
        /// How strictly the diffusion process adheres to the prompt text (higher values keep your image closer to your prompt)
        /// </summary>
        /// <value>How strictly the diffusion process adheres to the prompt text (higher values keep your image closer to your prompt)</value>
        [DataMember(Name = "cfg_scale", EmitDefaultValue = false)]
        public decimal CfgScale { get; set; }

        /// <summary>
        /// Height of the image (note: &#x60;height * width&#x60; must be &lt;&#x3D; 1 Megapixel)
        /// </summary>
        /// <value>Height of the image (note: &#x60;height * width&#x60; must be &lt;&#x3D; 1 Megapixel)</value>
        [DataMember(Name = "height", EmitDefaultValue = false)]
        public int Height { get; set; }

        /// <summary>
        /// Number of images to generate
        /// </summary>
        /// <value>Number of images to generate</value>
        [DataMember(Name = "samples", EmitDefaultValue = false)]
        public int Samples { get; set; }

        /// <summary>
        /// Random noise seed (omit this option or use &#x60;0&#x60; for a random seed)
        /// </summary>
        /// <value>Random noise seed (omit this option or use &#x60;0&#x60; for a random seed)</value>
        [DataMember(Name = "seed", EmitDefaultValue = false)]
        public int Seed { get; set; }

        /// <summary>
        /// Number of diffusion steps to run
        /// </summary>
        /// <value>Number of diffusion steps to run</value>
        [DataMember(Name = "steps", EmitDefaultValue = false)]
        public int Steps { get; set; }

        /// <summary>
        /// Gets or Sets TextPrompts
        /// </summary>
        [DataMember(Name = "text_prompts", IsRequired = true, EmitDefaultValue = false)]
        public List<TextPrompt> TextPrompts { get; set; }

        /// <summary>
        /// Width of the image (note: &#x60;height * width&#x60; must be &lt;&#x3D; 1 Megapixel)
        /// </summary>
        /// <value>Width of the image (note: &#x60;height * width&#x60; must be &lt;&#x3D; 1 Megapixel)</value>
        [DataMember(Name = "width", EmitDefaultValue = false)]
        public int Width { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TextToImageRequestBody {\n");
            sb.Append("  CfgScale: ").Append(CfgScale).Append("\n");
            sb.Append("  ClipGuidancePreset: ").Append(ClipGuidancePreset).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Sampler: ").Append(Sampler).Append("\n");
            sb.Append("  Samples: ").Append(Samples).Append("\n");
            sb.Append("  Seed: ").Append(Seed).Append("\n");
            sb.Append("  Steps: ").Append(Steps).Append("\n");
            sb.Append("  TextPrompts: ").Append(TextPrompts).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TextToImageRequestBody);
        }

        /// <summary>
        /// Returns true if TextToImageRequestBody instances are equal
        /// </summary>
        /// <param name="input">Instance of TextToImageRequestBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TextToImageRequestBody input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CfgScale == input.CfgScale ||
                    this.CfgScale.Equals(input.CfgScale)
                ) && 
                (
                    this.ClipGuidancePreset == input.ClipGuidancePreset ||
                    this.ClipGuidancePreset.Equals(input.ClipGuidancePreset)
                ) && 
                (
                    this.Height == input.Height ||
                    this.Height.Equals(input.Height)
                ) && 
                (
                    this.Sampler == input.Sampler ||
                    this.Sampler.Equals(input.Sampler)
                ) && 
                (
                    this.Samples == input.Samples ||
                    this.Samples.Equals(input.Samples)
                ) && 
                (
                    this.Seed == input.Seed ||
                    this.Seed.Equals(input.Seed)
                ) && 
                (
                    this.Steps == input.Steps ||
                    this.Steps.Equals(input.Steps)
                ) && 
                (
                    this.TextPrompts == input.TextPrompts ||
                    this.TextPrompts != null &&
                    input.TextPrompts != null &&
                    this.TextPrompts.SequenceEqual(input.TextPrompts)
                ) && 
                (
                    this.Width == input.Width ||
                    this.Width.Equals(input.Width)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.CfgScale.GetHashCode();
                hashCode = (hashCode * 59) + this.ClipGuidancePreset.GetHashCode();
                hashCode = (hashCode * 59) + this.Height.GetHashCode();
                hashCode = (hashCode * 59) + this.Sampler.GetHashCode();
                hashCode = (hashCode * 59) + this.Samples.GetHashCode();
                hashCode = (hashCode * 59) + this.Seed.GetHashCode();
                hashCode = (hashCode * 59) + this.Steps.GetHashCode();
                if (this.TextPrompts != null)
                {
                    hashCode = (hashCode * 59) + this.TextPrompts.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Width.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // CfgScale (decimal) maximum
            if (this.CfgScale > (decimal)35)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CfgScale, must be a value less than or equal to 35.", new [] { "CfgScale" });
            }

            // CfgScale (decimal) minimum
            if (this.CfgScale < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CfgScale, must be a value greater than or equal to 0.", new [] { "CfgScale" });
            }

            // Height (int) maximum
            if (this.Height > (int)2048)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Height, must be a value less than or equal to 2048.", new [] { "Height" });
            }

            // Height (int) minimum
            if (this.Height < (int)512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Height, must be a value greater than or equal to 512.", new [] { "Height" });
            }

            // Samples (int) maximum
            if (this.Samples > (int)10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Samples, must be a value less than or equal to 10.", new [] { "Samples" });
            }

            // Samples (int) minimum
            if (this.Samples < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Samples, must be a value greater than or equal to 1.", new [] { "Samples" });
            }

            // Seed (int) maximum
            if (this.Seed > (int)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Seed, must be a value less than or equal to 2147483647.", new [] { "Seed" });
            }

            // Seed (int) minimum
            if (this.Seed < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Seed, must be a value greater than or equal to 0.", new [] { "Seed" });
            }

            // Steps (int) maximum
            if (this.Steps > (int)150)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Steps, must be a value less than or equal to 150.", new [] { "Steps" });
            }

            // Steps (int) minimum
            if (this.Steps < (int)10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Steps, must be a value greater than or equal to 10.", new [] { "Steps" });
            }

            // Width (int) maximum
            if (this.Width > (int)2048)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Width, must be a value less than or equal to 2048.", new [] { "Width" });
            }

            // Width (int) minimum
            if (this.Width < (int)512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Width, must be a value greater than or equal to 512.", new [] { "Width" });
            }

            yield break;
        }
    }

}
