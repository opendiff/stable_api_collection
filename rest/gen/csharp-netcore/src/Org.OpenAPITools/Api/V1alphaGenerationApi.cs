/*
 * Stability.ai REST API
 *
 * Welcome to the Stability.ai REST API developer preview!  Please note, this is an alpha version of our new REST API, and is subject to change according to your feedback.  Feedback during this test is crucial for us to understand what the pain points are and how we can improve it going forward.  Changes will be communicated here, as well as on our online REST API documentation, which can be found at: https://api.stability.ai/docs  Your DreamStudio API key will be required for authentication. You can learn more about API keys here: https://platform.stability.ai/docs/getting-started/authentication  If you encounter any issues, please let us know in the #API discord channel: https://discord.gg/stablediffusion 
 *
 * The version of the OpenAPI document: 0.1
 * Contact: info@stability.ai
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IV1alphaGenerationApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// image-to-image
        /// </summary>
        /// <remarks>
        /// Generate big fancy pictures from small fancy pictures
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="engineId"> </param>
        /// <param name="accept"> </param>
        /// <param name="initImage">Initial image to use for the image-to-image generation</param>
        /// <param name="options"></param>
        /// <param name="organization">Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void V1alphaGenerationImageToImage(string engineId, string accept, System.IO.Stream initImage, ImageToImageOptions options, string organization = default(string), int operationIndex = 0);

        /// <summary>
        /// image-to-image
        /// </summary>
        /// <remarks>
        /// Generate big fancy pictures from small fancy pictures
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="engineId"> </param>
        /// <param name="accept"> </param>
        /// <param name="initImage">Initial image to use for the image-to-image generation</param>
        /// <param name="options"></param>
        /// <param name="organization">Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V1alphaGenerationImageToImageWithHttpInfo(string engineId, string accept, System.IO.Stream initImage, ImageToImageOptions options, string organization = default(string), int operationIndex = 0);
        /// <summary>
        /// image-to-image/masking
        /// </summary>
        /// <remarks>
        /// Paint fancy things into fancy pictures
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="engineId"> </param>
        /// <param name="accept"> </param>
        /// <param name="initImage">Initial image to use for the image-to-image generation</param>
        /// <param name="options"></param>
        /// <param name="organization">Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)</param>
        /// <param name="maskImage">Optional mask image to use for masking. Must be the same dimensions as the &#x60;init_image&#x60;. Use the &#x60;mask_source&#x60; option to specify whether the white or black pixels should be inpainted. (Note: if you set &#x60;mask_source&#x60; to &#x60;INIT_IMAGE_ALPHA&#x60; you can omit the &#x60;mask_image&#x60; parameter completely.) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void V1alphaGenerationMasking(string engineId, string accept, System.IO.Stream initImage, MaskingOptions options, string organization = default(string), System.IO.Stream maskImage = default(System.IO.Stream), int operationIndex = 0);

        /// <summary>
        /// image-to-image/masking
        /// </summary>
        /// <remarks>
        /// Paint fancy things into fancy pictures
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="engineId"> </param>
        /// <param name="accept"> </param>
        /// <param name="initImage">Initial image to use for the image-to-image generation</param>
        /// <param name="options"></param>
        /// <param name="organization">Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)</param>
        /// <param name="maskImage">Optional mask image to use for masking. Must be the same dimensions as the &#x60;init_image&#x60;. Use the &#x60;mask_source&#x60; option to specify whether the white or black pixels should be inpainted. (Note: if you set &#x60;mask_source&#x60; to &#x60;INIT_IMAGE_ALPHA&#x60; you can omit the &#x60;mask_image&#x60; parameter completely.) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V1alphaGenerationMaskingWithHttpInfo(string engineId, string accept, System.IO.Stream initImage, MaskingOptions options, string organization = default(string), System.IO.Stream maskImage = default(System.IO.Stream), int operationIndex = 0);
        /// <summary>
        /// text-to-image
        /// </summary>
        /// <remarks>
        /// Generate an image from text
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="engineId"> </param>
        /// <param name="accept"> </param>
        /// <param name="textToImageRequestBody"></param>
        /// <param name="organization">Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void V1alphaGenerationTextToImage(string engineId, string accept, TextToImageRequestBody textToImageRequestBody, string organization = default(string), int operationIndex = 0);

        /// <summary>
        /// text-to-image
        /// </summary>
        /// <remarks>
        /// Generate an image from text
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="engineId"> </param>
        /// <param name="accept"> </param>
        /// <param name="textToImageRequestBody"></param>
        /// <param name="organization">Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V1alphaGenerationTextToImageWithHttpInfo(string engineId, string accept, TextToImageRequestBody textToImageRequestBody, string organization = default(string), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IV1alphaGenerationApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// image-to-image
        /// </summary>
        /// <remarks>
        /// Generate big fancy pictures from small fancy pictures
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="engineId"> </param>
        /// <param name="accept"> </param>
        /// <param name="initImage">Initial image to use for the image-to-image generation</param>
        /// <param name="options"></param>
        /// <param name="organization">Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V1alphaGenerationImageToImageAsync(string engineId, string accept, System.IO.Stream initImage, ImageToImageOptions options, string organization = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// image-to-image
        /// </summary>
        /// <remarks>
        /// Generate big fancy pictures from small fancy pictures
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="engineId"> </param>
        /// <param name="accept"> </param>
        /// <param name="initImage">Initial image to use for the image-to-image generation</param>
        /// <param name="options"></param>
        /// <param name="organization">Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V1alphaGenerationImageToImageWithHttpInfoAsync(string engineId, string accept, System.IO.Stream initImage, ImageToImageOptions options, string organization = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// image-to-image/masking
        /// </summary>
        /// <remarks>
        /// Paint fancy things into fancy pictures
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="engineId"> </param>
        /// <param name="accept"> </param>
        /// <param name="initImage">Initial image to use for the image-to-image generation</param>
        /// <param name="options"></param>
        /// <param name="organization">Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)</param>
        /// <param name="maskImage">Optional mask image to use for masking. Must be the same dimensions as the &#x60;init_image&#x60;. Use the &#x60;mask_source&#x60; option to specify whether the white or black pixels should be inpainted. (Note: if you set &#x60;mask_source&#x60; to &#x60;INIT_IMAGE_ALPHA&#x60; you can omit the &#x60;mask_image&#x60; parameter completely.) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V1alphaGenerationMaskingAsync(string engineId, string accept, System.IO.Stream initImage, MaskingOptions options, string organization = default(string), System.IO.Stream maskImage = default(System.IO.Stream), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// image-to-image/masking
        /// </summary>
        /// <remarks>
        /// Paint fancy things into fancy pictures
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="engineId"> </param>
        /// <param name="accept"> </param>
        /// <param name="initImage">Initial image to use for the image-to-image generation</param>
        /// <param name="options"></param>
        /// <param name="organization">Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)</param>
        /// <param name="maskImage">Optional mask image to use for masking. Must be the same dimensions as the &#x60;init_image&#x60;. Use the &#x60;mask_source&#x60; option to specify whether the white or black pixels should be inpainted. (Note: if you set &#x60;mask_source&#x60; to &#x60;INIT_IMAGE_ALPHA&#x60; you can omit the &#x60;mask_image&#x60; parameter completely.) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V1alphaGenerationMaskingWithHttpInfoAsync(string engineId, string accept, System.IO.Stream initImage, MaskingOptions options, string organization = default(string), System.IO.Stream maskImage = default(System.IO.Stream), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// text-to-image
        /// </summary>
        /// <remarks>
        /// Generate an image from text
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="engineId"> </param>
        /// <param name="accept"> </param>
        /// <param name="textToImageRequestBody"></param>
        /// <param name="organization">Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V1alphaGenerationTextToImageAsync(string engineId, string accept, TextToImageRequestBody textToImageRequestBody, string organization = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// text-to-image
        /// </summary>
        /// <remarks>
        /// Generate an image from text
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="engineId"> </param>
        /// <param name="accept"> </param>
        /// <param name="textToImageRequestBody"></param>
        /// <param name="organization">Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V1alphaGenerationTextToImageWithHttpInfoAsync(string engineId, string accept, TextToImageRequestBody textToImageRequestBody, string organization = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IV1alphaGenerationApi : IV1alphaGenerationApiSync, IV1alphaGenerationApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class V1alphaGenerationApi : IV1alphaGenerationApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="V1alphaGenerationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public V1alphaGenerationApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="V1alphaGenerationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public V1alphaGenerationApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="V1alphaGenerationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public V1alphaGenerationApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="V1alphaGenerationApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public V1alphaGenerationApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// image-to-image Generate big fancy pictures from small fancy pictures
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="engineId"> </param>
        /// <param name="accept"> </param>
        /// <param name="initImage">Initial image to use for the image-to-image generation</param>
        /// <param name="options"></param>
        /// <param name="organization">Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void V1alphaGenerationImageToImage(string engineId, string accept, System.IO.Stream initImage, ImageToImageOptions options, string organization = default(string), int operationIndex = 0)
        {
            V1alphaGenerationImageToImageWithHttpInfo(engineId, accept, initImage, options, organization);
        }

        /// <summary>
        /// image-to-image Generate big fancy pictures from small fancy pictures
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="engineId"> </param>
        /// <param name="accept"> </param>
        /// <param name="initImage">Initial image to use for the image-to-image generation</param>
        /// <param name="options"></param>
        /// <param name="organization">Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> V1alphaGenerationImageToImageWithHttpInfo(string engineId, string accept, System.IO.Stream initImage, ImageToImageOptions options, string organization = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'engineId' is set
            if (engineId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'engineId' when calling V1alphaGenerationApi->V1alphaGenerationImageToImage");
            }

            // verify the required parameter 'accept' is set
            if (accept == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accept' when calling V1alphaGenerationApi->V1alphaGenerationImageToImage");
            }

            // verify the required parameter 'initImage' is set
            if (initImage == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'initImage' when calling V1alphaGenerationApi->V1alphaGenerationImageToImage");
            }

            // verify the required parameter 'options' is set
            if (options == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'options' when calling V1alphaGenerationApi->V1alphaGenerationImageToImage");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.goa.error"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("engine_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(engineId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accept)); // header parameter
            if (organization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // header parameter
            }
            localVarRequestOptions.FileParameters.Add("init_image", initImage);
            localVarRequestOptions.FormParameters.Add("options", Org.OpenAPITools.Client.ClientUtils.ParameterToString(options)); // form parameter

            localVarRequestOptions.Operation = "V1alphaGenerationApi.V1alphaGenerationImageToImage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key_header_Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v1alpha/generation/{engine_id}/image-to-image", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1alphaGenerationImageToImage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// image-to-image Generate big fancy pictures from small fancy pictures
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="engineId"> </param>
        /// <param name="accept"> </param>
        /// <param name="initImage">Initial image to use for the image-to-image generation</param>
        /// <param name="options"></param>
        /// <param name="organization">Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V1alphaGenerationImageToImageAsync(string engineId, string accept, System.IO.Stream initImage, ImageToImageOptions options, string organization = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await V1alphaGenerationImageToImageWithHttpInfoAsync(engineId, accept, initImage, options, organization, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// image-to-image Generate big fancy pictures from small fancy pictures
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="engineId"> </param>
        /// <param name="accept"> </param>
        /// <param name="initImage">Initial image to use for the image-to-image generation</param>
        /// <param name="options"></param>
        /// <param name="organization">Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> V1alphaGenerationImageToImageWithHttpInfoAsync(string engineId, string accept, System.IO.Stream initImage, ImageToImageOptions options, string organization = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'engineId' is set
            if (engineId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'engineId' when calling V1alphaGenerationApi->V1alphaGenerationImageToImage");
            }

            // verify the required parameter 'accept' is set
            if (accept == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accept' when calling V1alphaGenerationApi->V1alphaGenerationImageToImage");
            }

            // verify the required parameter 'initImage' is set
            if (initImage == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'initImage' when calling V1alphaGenerationApi->V1alphaGenerationImageToImage");
            }

            // verify the required parameter 'options' is set
            if (options == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'options' when calling V1alphaGenerationApi->V1alphaGenerationImageToImage");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.goa.error"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("engine_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(engineId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accept)); // header parameter
            if (organization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // header parameter
            }
            localVarRequestOptions.FileParameters.Add("init_image", initImage);
            localVarRequestOptions.FormParameters.Add("options", Org.OpenAPITools.Client.ClientUtils.ParameterToString(options)); // form parameter

            localVarRequestOptions.Operation = "V1alphaGenerationApi.V1alphaGenerationImageToImage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key_header_Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v1alpha/generation/{engine_id}/image-to-image", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1alphaGenerationImageToImage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// image-to-image/masking Paint fancy things into fancy pictures
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="engineId"> </param>
        /// <param name="accept"> </param>
        /// <param name="initImage">Initial image to use for the image-to-image generation</param>
        /// <param name="options"></param>
        /// <param name="organization">Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)</param>
        /// <param name="maskImage">Optional mask image to use for masking. Must be the same dimensions as the &#x60;init_image&#x60;. Use the &#x60;mask_source&#x60; option to specify whether the white or black pixels should be inpainted. (Note: if you set &#x60;mask_source&#x60; to &#x60;INIT_IMAGE_ALPHA&#x60; you can omit the &#x60;mask_image&#x60; parameter completely.) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void V1alphaGenerationMasking(string engineId, string accept, System.IO.Stream initImage, MaskingOptions options, string organization = default(string), System.IO.Stream maskImage = default(System.IO.Stream), int operationIndex = 0)
        {
            V1alphaGenerationMaskingWithHttpInfo(engineId, accept, initImage, options, organization, maskImage);
        }

        /// <summary>
        /// image-to-image/masking Paint fancy things into fancy pictures
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="engineId"> </param>
        /// <param name="accept"> </param>
        /// <param name="initImage">Initial image to use for the image-to-image generation</param>
        /// <param name="options"></param>
        /// <param name="organization">Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)</param>
        /// <param name="maskImage">Optional mask image to use for masking. Must be the same dimensions as the &#x60;init_image&#x60;. Use the &#x60;mask_source&#x60; option to specify whether the white or black pixels should be inpainted. (Note: if you set &#x60;mask_source&#x60; to &#x60;INIT_IMAGE_ALPHA&#x60; you can omit the &#x60;mask_image&#x60; parameter completely.) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> V1alphaGenerationMaskingWithHttpInfo(string engineId, string accept, System.IO.Stream initImage, MaskingOptions options, string organization = default(string), System.IO.Stream maskImage = default(System.IO.Stream), int operationIndex = 0)
        {
            // verify the required parameter 'engineId' is set
            if (engineId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'engineId' when calling V1alphaGenerationApi->V1alphaGenerationMasking");
            }

            // verify the required parameter 'accept' is set
            if (accept == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accept' when calling V1alphaGenerationApi->V1alphaGenerationMasking");
            }

            // verify the required parameter 'initImage' is set
            if (initImage == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'initImage' when calling V1alphaGenerationApi->V1alphaGenerationMasking");
            }

            // verify the required parameter 'options' is set
            if (options == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'options' when calling V1alphaGenerationApi->V1alphaGenerationMasking");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.goa.error"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("engine_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(engineId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accept)); // header parameter
            if (organization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // header parameter
            }
            localVarRequestOptions.FileParameters.Add("init_image", initImage);
            if (maskImage != null)
            {
                localVarRequestOptions.FileParameters.Add("mask_image", maskImage);
            }
            localVarRequestOptions.FormParameters.Add("options", Org.OpenAPITools.Client.ClientUtils.ParameterToString(options)); // form parameter

            localVarRequestOptions.Operation = "V1alphaGenerationApi.V1alphaGenerationMasking";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key_header_Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v1alpha/generation/{engine_id}/image-to-image/masking", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1alphaGenerationMasking", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// image-to-image/masking Paint fancy things into fancy pictures
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="engineId"> </param>
        /// <param name="accept"> </param>
        /// <param name="initImage">Initial image to use for the image-to-image generation</param>
        /// <param name="options"></param>
        /// <param name="organization">Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)</param>
        /// <param name="maskImage">Optional mask image to use for masking. Must be the same dimensions as the &#x60;init_image&#x60;. Use the &#x60;mask_source&#x60; option to specify whether the white or black pixels should be inpainted. (Note: if you set &#x60;mask_source&#x60; to &#x60;INIT_IMAGE_ALPHA&#x60; you can omit the &#x60;mask_image&#x60; parameter completely.) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V1alphaGenerationMaskingAsync(string engineId, string accept, System.IO.Stream initImage, MaskingOptions options, string organization = default(string), System.IO.Stream maskImage = default(System.IO.Stream), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await V1alphaGenerationMaskingWithHttpInfoAsync(engineId, accept, initImage, options, organization, maskImage, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// image-to-image/masking Paint fancy things into fancy pictures
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="engineId"> </param>
        /// <param name="accept"> </param>
        /// <param name="initImage">Initial image to use for the image-to-image generation</param>
        /// <param name="options"></param>
        /// <param name="organization">Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)</param>
        /// <param name="maskImage">Optional mask image to use for masking. Must be the same dimensions as the &#x60;init_image&#x60;. Use the &#x60;mask_source&#x60; option to specify whether the white or black pixels should be inpainted. (Note: if you set &#x60;mask_source&#x60; to &#x60;INIT_IMAGE_ALPHA&#x60; you can omit the &#x60;mask_image&#x60; parameter completely.) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> V1alphaGenerationMaskingWithHttpInfoAsync(string engineId, string accept, System.IO.Stream initImage, MaskingOptions options, string organization = default(string), System.IO.Stream maskImage = default(System.IO.Stream), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'engineId' is set
            if (engineId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'engineId' when calling V1alphaGenerationApi->V1alphaGenerationMasking");
            }

            // verify the required parameter 'accept' is set
            if (accept == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accept' when calling V1alphaGenerationApi->V1alphaGenerationMasking");
            }

            // verify the required parameter 'initImage' is set
            if (initImage == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'initImage' when calling V1alphaGenerationApi->V1alphaGenerationMasking");
            }

            // verify the required parameter 'options' is set
            if (options == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'options' when calling V1alphaGenerationApi->V1alphaGenerationMasking");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.goa.error"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("engine_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(engineId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accept)); // header parameter
            if (organization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // header parameter
            }
            localVarRequestOptions.FileParameters.Add("init_image", initImage);
            if (maskImage != null)
            {
                localVarRequestOptions.FileParameters.Add("mask_image", maskImage);
            }
            localVarRequestOptions.FormParameters.Add("options", Org.OpenAPITools.Client.ClientUtils.ParameterToString(options)); // form parameter

            localVarRequestOptions.Operation = "V1alphaGenerationApi.V1alphaGenerationMasking";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key_header_Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v1alpha/generation/{engine_id}/image-to-image/masking", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1alphaGenerationMasking", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// text-to-image Generate an image from text
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="engineId"> </param>
        /// <param name="accept"> </param>
        /// <param name="textToImageRequestBody"></param>
        /// <param name="organization">Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void V1alphaGenerationTextToImage(string engineId, string accept, TextToImageRequestBody textToImageRequestBody, string organization = default(string), int operationIndex = 0)
        {
            V1alphaGenerationTextToImageWithHttpInfo(engineId, accept, textToImageRequestBody, organization);
        }

        /// <summary>
        /// text-to-image Generate an image from text
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="engineId"> </param>
        /// <param name="accept"> </param>
        /// <param name="textToImageRequestBody"></param>
        /// <param name="organization">Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> V1alphaGenerationTextToImageWithHttpInfo(string engineId, string accept, TextToImageRequestBody textToImageRequestBody, string organization = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'engineId' is set
            if (engineId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'engineId' when calling V1alphaGenerationApi->V1alphaGenerationTextToImage");
            }

            // verify the required parameter 'accept' is set
            if (accept == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accept' when calling V1alphaGenerationApi->V1alphaGenerationTextToImage");
            }

            // verify the required parameter 'textToImageRequestBody' is set
            if (textToImageRequestBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'textToImageRequestBody' when calling V1alphaGenerationApi->V1alphaGenerationTextToImage");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.goa.error"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("engine_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(engineId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accept)); // header parameter
            if (organization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // header parameter
            }
            localVarRequestOptions.Data = textToImageRequestBody;

            localVarRequestOptions.Operation = "V1alphaGenerationApi.V1alphaGenerationTextToImage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key_header_Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v1alpha/generation/{engine_id}/text-to-image", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1alphaGenerationTextToImage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// text-to-image Generate an image from text
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="engineId"> </param>
        /// <param name="accept"> </param>
        /// <param name="textToImageRequestBody"></param>
        /// <param name="organization">Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V1alphaGenerationTextToImageAsync(string engineId, string accept, TextToImageRequestBody textToImageRequestBody, string organization = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await V1alphaGenerationTextToImageWithHttpInfoAsync(engineId, accept, textToImageRequestBody, organization, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// text-to-image Generate an image from text
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="engineId"> </param>
        /// <param name="accept"> </param>
        /// <param name="textToImageRequestBody"></param>
        /// <param name="organization">Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> V1alphaGenerationTextToImageWithHttpInfoAsync(string engineId, string accept, TextToImageRequestBody textToImageRequestBody, string organization = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'engineId' is set
            if (engineId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'engineId' when calling V1alphaGenerationApi->V1alphaGenerationTextToImage");
            }

            // verify the required parameter 'accept' is set
            if (accept == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'accept' when calling V1alphaGenerationApi->V1alphaGenerationTextToImage");
            }

            // verify the required parameter 'textToImageRequestBody' is set
            if (textToImageRequestBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'textToImageRequestBody' when calling V1alphaGenerationApi->V1alphaGenerationTextToImage");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.goa.error"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("engine_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(engineId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Accept", Org.OpenAPITools.Client.ClientUtils.ParameterToString(accept)); // header parameter
            if (organization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Organization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(organization)); // header parameter
            }
            localVarRequestOptions.Data = textToImageRequestBody;

            localVarRequestOptions.Operation = "V1alphaGenerationApi.V1alphaGenerationTextToImage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key_header_Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v1alpha/generation/{engine_id}/text-to-image", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1alphaGenerationTextToImage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
