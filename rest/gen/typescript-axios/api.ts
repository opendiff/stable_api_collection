/* tslint:disable */
/* eslint-disable */
/**
 * Stability.ai REST API
 * Welcome to the Stability.ai REST API developer preview!  Please note, this is an alpha version of our new REST API, and is subject to change according to your feedback.  Feedback during this test is crucial for us to understand what the pain points are and how we can improve it going forward.  Changes will be communicated here, as well as on our online REST API documentation, which can be found at: https://api.stability.ai/docs  Your DreamStudio API key will be required for authentication. You can learn more about API keys here: https://platform.stability.ai/docs/getting-started/authentication  If you encounter any issues, please let us know in the #API discord channel: https://discord.gg/stablediffusion 
 *
 * The version of the OpenAPI document: 0.1
 * Contact: info@stability.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AccountResponseBody
 */
export interface AccountResponseBody {
    /**
     * The user\'s email
     * @type {string}
     * @memberof AccountResponseBody
     */
    'email': string;
    /**
     * The user\'s ID
     * @type {string}
     * @memberof AccountResponseBody
     */
    'id': string;
    /**
     * The user\'s organizations
     * @type {Array<OrganizationMembership>}
     * @memberof AccountResponseBody
     */
    'organizations': Array<OrganizationMembership>;
    /**
     * The user\'s profile picture
     * @type {string}
     * @memberof AccountResponseBody
     */
    'profile_picture'?: string;
}
/**
 * 
 * @export
 * @interface BalanceResponseBody
 */
export interface BalanceResponseBody {
    /**
     * The balance of the account/organization associated with the API key
     * @type {number}
     * @memberof BalanceResponseBody
     */
    'credits': number;
}
/**
 * 
 * @export
 * @interface Engine
 */
export interface Engine {
    /**
     * 
     * @type {string}
     * @memberof Engine
     */
    'description': string;
    /**
     * Unique identifier for the engine
     * @type {string}
     * @memberof Engine
     */
    'id': string;
    /**
     * Name of the engine
     * @type {string}
     * @memberof Engine
     */
    'name': string;
    /**
     * The type of content this engine produces
     * @type {string}
     * @memberof Engine
     */
    'type': EngineTypeEnum;
}

export const EngineTypeEnum = {
    Audio: 'AUDIO',
    Classification: 'CLASSIFICATION',
    Picture: 'PICTURE',
    Storage: 'STORAGE',
    Text: 'TEXT',
    Video: 'VIDEO'
} as const;

export type EngineTypeEnum = typeof EngineTypeEnum[keyof typeof EngineTypeEnum];

/**
 * 
 * @export
 * @interface ListEnginesResponseBody
 */
export interface ListEnginesResponseBody {
    /**
     * The engines available to your user/organization
     * @type {Array<Engine>}
     * @memberof ListEnginesResponseBody
     */
    'engines': Array<Engine>;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * Is the error a server-side fault?
     * @type {boolean}
     * @memberof ModelError
     */
    'fault': boolean;
    /**
     * ID is a unique identifier for this particular occurrence of the problem.
     * @type {string}
     * @memberof ModelError
     */
    'id': string;
    /**
     * Message is a human-readable explanation specific to this occurrence of the problem.
     * @type {string}
     * @memberof ModelError
     */
    'message': string;
    /**
     * Name is the name of this class of errors.
     * @type {string}
     * @memberof ModelError
     */
    'name': string;
    /**
     * Is the error temporary?
     * @type {boolean}
     * @memberof ModelError
     */
    'temporary': boolean;
    /**
     * Is the error a timeout?
     * @type {boolean}
     * @memberof ModelError
     */
    'timeout': boolean;
}
/**
 * 
 * @export
 * @interface OrganizationMembership
 */
export interface OrganizationMembership {
    /**
     * 
     * @type {string}
     * @memberof OrganizationMembership
     */
    'id': string;
    /**
     * 
     * @type {boolean}
     * @memberof OrganizationMembership
     */
    'is_default': boolean;
    /**
     * 
     * @type {string}
     * @memberof OrganizationMembership
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationMembership
     */
    'role': string;
}
/**
 * Text prompt for image generation
 * @export
 * @interface TextPrompt
 */
export interface TextPrompt {
    /**
     * 
     * @type {string}
     * @memberof TextPrompt
     */
    'text': string;
    /**
     * Weight of the prompt (use negative numbers for negative prompts)
     * @type {number}
     * @memberof TextPrompt
     */
    'weight'?: number;
}
/**
 * 
 * @export
 * @interface TextToImageRequestBody
 */
export interface TextToImageRequestBody {
    /**
     * How strictly the diffusion process adheres to the prompt text (higher values keep your image closer to your prompt)
     * @type {number}
     * @memberof TextToImageRequestBody
     */
    'cfg_scale'?: number;
    /**
     * 
     * @type {string}
     * @memberof TextToImageRequestBody
     */
    'clip_guidance_preset'?: TextToImageRequestBodyClipGuidancePresetEnum;
    /**
     * Height of the image (note: `height * width` must be <= 1 Megapixel)
     * @type {number}
     * @memberof TextToImageRequestBody
     */
    'height'?: number;
    /**
     * Which sampler to use for the diffusion process. If this value is omitted we\'ll automatically select an appropriate sampler for you.
     * @type {string}
     * @memberof TextToImageRequestBody
     */
    'sampler'?: TextToImageRequestBodySamplerEnum;
    /**
     * Number of images to generate
     * @type {number}
     * @memberof TextToImageRequestBody
     */
    'samples'?: number;
    /**
     * Random noise seed (omit this option or use `0` for a random seed)
     * @type {number}
     * @memberof TextToImageRequestBody
     */
    'seed'?: number;
    /**
     * Number of diffusion steps to run
     * @type {number}
     * @memberof TextToImageRequestBody
     */
    'steps'?: number;
    /**
     * 
     * @type {Array<TextPrompt>}
     * @memberof TextToImageRequestBody
     */
    'text_prompts': Array<TextPrompt>;
    /**
     * Width of the image (note: `height * width` must be <= 1 Megapixel)
     * @type {number}
     * @memberof TextToImageRequestBody
     */
    'width'?: number;
}

export const TextToImageRequestBodyClipGuidancePresetEnum = {
    FastBlue: 'FAST_BLUE',
    FastGreen: 'FAST_GREEN',
    None: 'NONE',
    Simple: 'SIMPLE',
    Slow: 'SLOW',
    Slower: 'SLOWER',
    Slowest: 'SLOWEST'
} as const;

export type TextToImageRequestBodyClipGuidancePresetEnum = typeof TextToImageRequestBodyClipGuidancePresetEnum[keyof typeof TextToImageRequestBodyClipGuidancePresetEnum];
export const TextToImageRequestBodySamplerEnum = {
    Ddim: 'DDIM',
    Ddpm: 'DDPM',
    KDpmpp2M: 'K_DPMPP_2M',
    KDpmpp2SAncestral: 'K_DPMPP_2S_ANCESTRAL',
    KDpm2: 'K_DPM_2',
    KDpm2Ancestral: 'K_DPM_2_ANCESTRAL',
    KEuler: 'K_EULER',
    KEulerAncestral: 'K_EULER_ANCESTRAL',
    KHeun: 'K_HEUN',
    KLms: 'K_LMS'
} as const;

export type TextToImageRequestBodySamplerEnum = typeof TextToImageRequestBodySamplerEnum[keyof typeof TextToImageRequestBodySamplerEnum];


/**
 * V1alphaEnginesApi - axios parameter creator
 * @export
 */
export const V1alphaEnginesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * List all engines available to your organization/user
         * @summary list
         * @param {string} [organization] Optional: Allows for requests to be scoped to an organization other than the user\&#39;s default.  If not provided, the user\&#39;s default organization will be used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1alphaEnginesListEngines: async (organization?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1alpha/engines/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header_Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (organization !== undefined && organization !== null) {
                localVarHeaderParameter['Organization'] = String(organization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V1alphaEnginesApi - functional programming interface
 * @export
 */
export const V1alphaEnginesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V1alphaEnginesApiAxiosParamCreator(configuration)
    return {
        /**
         * List all engines available to your organization/user
         * @summary list
         * @param {string} [organization] Optional: Allows for requests to be scoped to an organization other than the user\&#39;s default.  If not provided, the user\&#39;s default organization will be used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1alphaEnginesListEngines(organization?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListEnginesResponseBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1alphaEnginesListEngines(organization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * V1alphaEnginesApi - factory interface
 * @export
 */
export const V1alphaEnginesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V1alphaEnginesApiFp(configuration)
    return {
        /**
         * List all engines available to your organization/user
         * @summary list
         * @param {string} [organization] Optional: Allows for requests to be scoped to an organization other than the user\&#39;s default.  If not provided, the user\&#39;s default organization will be used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1alphaEnginesListEngines(organization?: string, options?: any): AxiosPromise<ListEnginesResponseBody> {
            return localVarFp.v1alphaEnginesListEngines(organization, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V1alphaEnginesApi - object-oriented interface
 * @export
 * @class V1alphaEnginesApi
 * @extends {BaseAPI}
 */
export class V1alphaEnginesApi extends BaseAPI {
    /**
     * List all engines available to your organization/user
     * @summary list
     * @param {string} [organization] Optional: Allows for requests to be scoped to an organization other than the user\&#39;s default.  If not provided, the user\&#39;s default organization will be used.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1alphaEnginesApi
     */
    public v1alphaEnginesListEngines(organization?: string, options?: AxiosRequestConfig) {
        return V1alphaEnginesApiFp(this.configuration).v1alphaEnginesListEngines(organization, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * V1alphaGenerationApi - axios parameter creator
 * @export
 */
export const V1alphaGenerationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Generate big fancy pictures from small fancy pictures
         * @summary image-to-image
         * @param {string} engineId  
         * @param {V1alphaGenerationImageToImageAcceptEnum} accept  
         * @param {any} initImage Initial image to use for the image-to-image generation
         * @param {ImageToImageOptions} options 
         * @param {string} [organization] Optional: Allows for requests to be scoped to an organization other than the user\&#39;s default.  If not provided, the user\&#39;s default organization will be used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1alphaGenerationImageToImage: async (engineId: string, accept: V1alphaGenerationImageToImageAcceptEnum, initImage: any, options: ImageToImageOptions, organization?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'engineId' is not null or undefined
            assertParamExists('v1alphaGenerationImageToImage', 'engineId', engineId)
            // verify required parameter 'accept' is not null or undefined
            assertParamExists('v1alphaGenerationImageToImage', 'accept', accept)
            // verify required parameter 'initImage' is not null or undefined
            assertParamExists('v1alphaGenerationImageToImage', 'initImage', initImage)
            // verify required parameter 'options' is not null or undefined
            assertParamExists('v1alphaGenerationImageToImage', 'options', options)
            const localVarPath = `/v1alpha/generation/{engine_id}/image-to-image`
                .replace(`{${"engine_id"}}`, encodeURIComponent(String(engineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication api_key_header_Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (accept !== undefined && accept !== null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }

            if (organization !== undefined && organization !== null) {
                localVarHeaderParameter['Organization'] = String(organization);
            }


            if (initImage !== undefined) { 
                localVarFormParams.append('init_image', initImage as any);
            }
    
            if (options !== undefined) { 
                localVarFormParams.append('options', new Blob([JSON.stringify(options)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Paint fancy things into fancy pictures
         * @summary image-to-image/masking
         * @param {string} engineId  
         * @param {V1alphaGenerationMaskingAcceptEnum} accept  
         * @param {any} initImage Initial image to use for the image-to-image generation
         * @param {MaskingOptions} options 
         * @param {string} [organization] Optional: Allows for requests to be scoped to an organization other than the user\&#39;s default.  If not provided, the user\&#39;s default organization will be used.
         * @param {any} [maskImage] Optional mask image to use for masking. Must be the same dimensions as the &#x60;init_image&#x60;. Use the &#x60;mask_source&#x60; option to specify whether the white or black pixels should be inpainted. (Note: if you set &#x60;mask_source&#x60; to &#x60;INIT_IMAGE_ALPHA&#x60; you can omit the &#x60;mask_image&#x60; parameter completely.)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1alphaGenerationMasking: async (engineId: string, accept: V1alphaGenerationMaskingAcceptEnum, initImage: any, options: MaskingOptions, organization?: string, maskImage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'engineId' is not null or undefined
            assertParamExists('v1alphaGenerationMasking', 'engineId', engineId)
            // verify required parameter 'accept' is not null or undefined
            assertParamExists('v1alphaGenerationMasking', 'accept', accept)
            // verify required parameter 'initImage' is not null or undefined
            assertParamExists('v1alphaGenerationMasking', 'initImage', initImage)
            // verify required parameter 'options' is not null or undefined
            assertParamExists('v1alphaGenerationMasking', 'options', options)
            const localVarPath = `/v1alpha/generation/{engine_id}/image-to-image/masking`
                .replace(`{${"engine_id"}}`, encodeURIComponent(String(engineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication api_key_header_Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (accept !== undefined && accept !== null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }

            if (organization !== undefined && organization !== null) {
                localVarHeaderParameter['Organization'] = String(organization);
            }


            if (initImage !== undefined) { 
                localVarFormParams.append('init_image', initImage as any);
            }
    
            if (maskImage !== undefined) { 
                localVarFormParams.append('mask_image', maskImage as any);
            }
    
            if (options !== undefined) { 
                localVarFormParams.append('options', new Blob([JSON.stringify(options)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generate an image from text
         * @summary text-to-image
         * @param {string} engineId  
         * @param {V1alphaGenerationTextToImageAcceptEnum} accept  
         * @param {TextToImageRequestBody} textToImageRequestBody 
         * @param {string} [organization] Optional: Allows for requests to be scoped to an organization other than the user\&#39;s default.  If not provided, the user\&#39;s default organization will be used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1alphaGenerationTextToImage: async (engineId: string, accept: V1alphaGenerationTextToImageAcceptEnum, textToImageRequestBody: TextToImageRequestBody, organization?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'engineId' is not null or undefined
            assertParamExists('v1alphaGenerationTextToImage', 'engineId', engineId)
            // verify required parameter 'accept' is not null or undefined
            assertParamExists('v1alphaGenerationTextToImage', 'accept', accept)
            // verify required parameter 'textToImageRequestBody' is not null or undefined
            assertParamExists('v1alphaGenerationTextToImage', 'textToImageRequestBody', textToImageRequestBody)
            const localVarPath = `/v1alpha/generation/{engine_id}/text-to-image`
                .replace(`{${"engine_id"}}`, encodeURIComponent(String(engineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header_Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (accept !== undefined && accept !== null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }

            if (organization !== undefined && organization !== null) {
                localVarHeaderParameter['Organization'] = String(organization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(textToImageRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V1alphaGenerationApi - functional programming interface
 * @export
 */
export const V1alphaGenerationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V1alphaGenerationApiAxiosParamCreator(configuration)
    return {
        /**
         * Generate big fancy pictures from small fancy pictures
         * @summary image-to-image
         * @param {string} engineId  
         * @param {V1alphaGenerationImageToImageAcceptEnum} accept  
         * @param {any} initImage Initial image to use for the image-to-image generation
         * @param {ImageToImageOptions} options 
         * @param {string} [organization] Optional: Allows for requests to be scoped to an organization other than the user\&#39;s default.  If not provided, the user\&#39;s default organization will be used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1alphaGenerationImageToImage(engineId: string, accept: V1alphaGenerationImageToImageAcceptEnum, initImage: any, options: ImageToImageOptions, organization?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1alphaGenerationImageToImage(engineId, accept, initImage, options, organization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Paint fancy things into fancy pictures
         * @summary image-to-image/masking
         * @param {string} engineId  
         * @param {V1alphaGenerationMaskingAcceptEnum} accept  
         * @param {any} initImage Initial image to use for the image-to-image generation
         * @param {MaskingOptions} options 
         * @param {string} [organization] Optional: Allows for requests to be scoped to an organization other than the user\&#39;s default.  If not provided, the user\&#39;s default organization will be used.
         * @param {any} [maskImage] Optional mask image to use for masking. Must be the same dimensions as the &#x60;init_image&#x60;. Use the &#x60;mask_source&#x60; option to specify whether the white or black pixels should be inpainted. (Note: if you set &#x60;mask_source&#x60; to &#x60;INIT_IMAGE_ALPHA&#x60; you can omit the &#x60;mask_image&#x60; parameter completely.)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1alphaGenerationMasking(engineId: string, accept: V1alphaGenerationMaskingAcceptEnum, initImage: any, options: MaskingOptions, organization?: string, maskImage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1alphaGenerationMasking(engineId, accept, initImage, options, organization, maskImage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Generate an image from text
         * @summary text-to-image
         * @param {string} engineId  
         * @param {V1alphaGenerationTextToImageAcceptEnum} accept  
         * @param {TextToImageRequestBody} textToImageRequestBody 
         * @param {string} [organization] Optional: Allows for requests to be scoped to an organization other than the user\&#39;s default.  If not provided, the user\&#39;s default organization will be used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1alphaGenerationTextToImage(engineId: string, accept: V1alphaGenerationTextToImageAcceptEnum, textToImageRequestBody: TextToImageRequestBody, organization?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1alphaGenerationTextToImage(engineId, accept, textToImageRequestBody, organization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * V1alphaGenerationApi - factory interface
 * @export
 */
export const V1alphaGenerationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V1alphaGenerationApiFp(configuration)
    return {
        /**
         * Generate big fancy pictures from small fancy pictures
         * @summary image-to-image
         * @param {string} engineId  
         * @param {V1alphaGenerationImageToImageAcceptEnum} accept  
         * @param {any} initImage Initial image to use for the image-to-image generation
         * @param {ImageToImageOptions} options 
         * @param {string} [organization] Optional: Allows for requests to be scoped to an organization other than the user\&#39;s default.  If not provided, the user\&#39;s default organization will be used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1alphaGenerationImageToImage(engineId: string, accept: V1alphaGenerationImageToImageAcceptEnum, initImage: any, options: ImageToImageOptions, organization?: string, options?: any): AxiosPromise<void> {
            return localVarFp.v1alphaGenerationImageToImage(engineId, accept, initImage, options, organization, options).then((request) => request(axios, basePath));
        },
        /**
         * Paint fancy things into fancy pictures
         * @summary image-to-image/masking
         * @param {string} engineId  
         * @param {V1alphaGenerationMaskingAcceptEnum} accept  
         * @param {any} initImage Initial image to use for the image-to-image generation
         * @param {MaskingOptions} options 
         * @param {string} [organization] Optional: Allows for requests to be scoped to an organization other than the user\&#39;s default.  If not provided, the user\&#39;s default organization will be used.
         * @param {any} [maskImage] Optional mask image to use for masking. Must be the same dimensions as the &#x60;init_image&#x60;. Use the &#x60;mask_source&#x60; option to specify whether the white or black pixels should be inpainted. (Note: if you set &#x60;mask_source&#x60; to &#x60;INIT_IMAGE_ALPHA&#x60; you can omit the &#x60;mask_image&#x60; parameter completely.)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1alphaGenerationMasking(engineId: string, accept: V1alphaGenerationMaskingAcceptEnum, initImage: any, options: MaskingOptions, organization?: string, maskImage?: any, options?: any): AxiosPromise<void> {
            return localVarFp.v1alphaGenerationMasking(engineId, accept, initImage, options, organization, maskImage, options).then((request) => request(axios, basePath));
        },
        /**
         * Generate an image from text
         * @summary text-to-image
         * @param {string} engineId  
         * @param {V1alphaGenerationTextToImageAcceptEnum} accept  
         * @param {TextToImageRequestBody} textToImageRequestBody 
         * @param {string} [organization] Optional: Allows for requests to be scoped to an organization other than the user\&#39;s default.  If not provided, the user\&#39;s default organization will be used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1alphaGenerationTextToImage(engineId: string, accept: V1alphaGenerationTextToImageAcceptEnum, textToImageRequestBody: TextToImageRequestBody, organization?: string, options?: any): AxiosPromise<void> {
            return localVarFp.v1alphaGenerationTextToImage(engineId, accept, textToImageRequestBody, organization, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V1alphaGenerationApi - object-oriented interface
 * @export
 * @class V1alphaGenerationApi
 * @extends {BaseAPI}
 */
export class V1alphaGenerationApi extends BaseAPI {
    /**
     * Generate big fancy pictures from small fancy pictures
     * @summary image-to-image
     * @param {string} engineId  
     * @param {V1alphaGenerationImageToImageAcceptEnum} accept  
     * @param {any} initImage Initial image to use for the image-to-image generation
     * @param {ImageToImageOptions} options 
     * @param {string} [organization] Optional: Allows for requests to be scoped to an organization other than the user\&#39;s default.  If not provided, the user\&#39;s default organization will be used.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1alphaGenerationApi
     */
    public v1alphaGenerationImageToImage(engineId: string, accept: V1alphaGenerationImageToImageAcceptEnum, initImage: any, options: ImageToImageOptions, organization?: string, options?: AxiosRequestConfig) {
        return V1alphaGenerationApiFp(this.configuration).v1alphaGenerationImageToImage(engineId, accept, initImage, options, organization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Paint fancy things into fancy pictures
     * @summary image-to-image/masking
     * @param {string} engineId  
     * @param {V1alphaGenerationMaskingAcceptEnum} accept  
     * @param {any} initImage Initial image to use for the image-to-image generation
     * @param {MaskingOptions} options 
     * @param {string} [organization] Optional: Allows for requests to be scoped to an organization other than the user\&#39;s default.  If not provided, the user\&#39;s default organization will be used.
     * @param {any} [maskImage] Optional mask image to use for masking. Must be the same dimensions as the &#x60;init_image&#x60;. Use the &#x60;mask_source&#x60; option to specify whether the white or black pixels should be inpainted. (Note: if you set &#x60;mask_source&#x60; to &#x60;INIT_IMAGE_ALPHA&#x60; you can omit the &#x60;mask_image&#x60; parameter completely.)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1alphaGenerationApi
     */
    public v1alphaGenerationMasking(engineId: string, accept: V1alphaGenerationMaskingAcceptEnum, initImage: any, options: MaskingOptions, organization?: string, maskImage?: any, options?: AxiosRequestConfig) {
        return V1alphaGenerationApiFp(this.configuration).v1alphaGenerationMasking(engineId, accept, initImage, options, organization, maskImage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generate an image from text
     * @summary text-to-image
     * @param {string} engineId  
     * @param {V1alphaGenerationTextToImageAcceptEnum} accept  
     * @param {TextToImageRequestBody} textToImageRequestBody 
     * @param {string} [organization] Optional: Allows for requests to be scoped to an organization other than the user\&#39;s default.  If not provided, the user\&#39;s default organization will be used.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1alphaGenerationApi
     */
    public v1alphaGenerationTextToImage(engineId: string, accept: V1alphaGenerationTextToImageAcceptEnum, textToImageRequestBody: TextToImageRequestBody, organization?: string, options?: AxiosRequestConfig) {
        return V1alphaGenerationApiFp(this.configuration).v1alphaGenerationTextToImage(engineId, accept, textToImageRequestBody, organization, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const V1alphaGenerationImageToImageAcceptEnum = {
    ImagePng: 'image/png',
    ApplicationJson: 'application/json'
} as const;
export type V1alphaGenerationImageToImageAcceptEnum = typeof V1alphaGenerationImageToImageAcceptEnum[keyof typeof V1alphaGenerationImageToImageAcceptEnum];
/**
 * @export
 */
export const V1alphaGenerationMaskingAcceptEnum = {
    ImagePng: 'image/png',
    ApplicationJson: 'application/json'
} as const;
export type V1alphaGenerationMaskingAcceptEnum = typeof V1alphaGenerationMaskingAcceptEnum[keyof typeof V1alphaGenerationMaskingAcceptEnum];
/**
 * @export
 */
export const V1alphaGenerationTextToImageAcceptEnum = {
    ImagePng: 'image/png',
    ApplicationJson: 'application/json'
} as const;
export type V1alphaGenerationTextToImageAcceptEnum = typeof V1alphaGenerationTextToImageAcceptEnum[keyof typeof V1alphaGenerationTextToImageAcceptEnum];


/**
 * V1alphaUserApi - axios parameter creator
 * @export
 */
export const V1alphaUserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get information about the account associated with the provided API key
         * @summary account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1alphaUserAccount: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1alpha/user/account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header_Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the credit balance of the account/organization associated with the API key
         * @summary balance
         * @param {string} [organization] Optional: Allows for requests to be scoped to an organization other than the user\&#39;s default.  If not provided, the user\&#39;s default organization will be used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1alphaUserBalance: async (organization?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1alpha/user/balance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key_header_Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (organization !== undefined && organization !== null) {
                localVarHeaderParameter['Organization'] = String(organization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V1alphaUserApi - functional programming interface
 * @export
 */
export const V1alphaUserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V1alphaUserApiAxiosParamCreator(configuration)
    return {
        /**
         * Get information about the account associated with the provided API key
         * @summary account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1alphaUserAccount(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountResponseBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1alphaUserAccount(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the credit balance of the account/organization associated with the API key
         * @summary balance
         * @param {string} [organization] Optional: Allows for requests to be scoped to an organization other than the user\&#39;s default.  If not provided, the user\&#39;s default organization will be used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1alphaUserBalance(organization?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BalanceResponseBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1alphaUserBalance(organization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * V1alphaUserApi - factory interface
 * @export
 */
export const V1alphaUserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V1alphaUserApiFp(configuration)
    return {
        /**
         * Get information about the account associated with the provided API key
         * @summary account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1alphaUserAccount(options?: any): AxiosPromise<AccountResponseBody> {
            return localVarFp.v1alphaUserAccount(options).then((request) => request(axios, basePath));
        },
        /**
         * Get the credit balance of the account/organization associated with the API key
         * @summary balance
         * @param {string} [organization] Optional: Allows for requests to be scoped to an organization other than the user\&#39;s default.  If not provided, the user\&#39;s default organization will be used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1alphaUserBalance(organization?: string, options?: any): AxiosPromise<BalanceResponseBody> {
            return localVarFp.v1alphaUserBalance(organization, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V1alphaUserApi - object-oriented interface
 * @export
 * @class V1alphaUserApi
 * @extends {BaseAPI}
 */
export class V1alphaUserApi extends BaseAPI {
    /**
     * Get information about the account associated with the provided API key
     * @summary account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1alphaUserApi
     */
    public v1alphaUserAccount(options?: AxiosRequestConfig) {
        return V1alphaUserApiFp(this.configuration).v1alphaUserAccount(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the credit balance of the account/organization associated with the API key
     * @summary balance
     * @param {string} [organization] Optional: Allows for requests to be scoped to an organization other than the user\&#39;s default.  If not provided, the user\&#39;s default organization will be used.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1alphaUserApi
     */
    public v1alphaUserBalance(organization?: string, options?: AxiosRequestConfig) {
        return V1alphaUserApiFp(this.configuration).v1alphaUserBalance(organization, options).then((request) => request(this.axios, this.basePath));
    }
}



