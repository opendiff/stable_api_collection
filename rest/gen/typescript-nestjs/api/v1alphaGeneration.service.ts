/**
 * Stability.ai REST API
 * Welcome to the Stability.ai REST API developer preview!  Please note, this is an alpha version of our new REST API, and is subject to change according to your feedback.  Feedback during this test is crucial for us to understand what the pain points are and how we can improve it going forward.  Changes will be communicated here, as well as on our online REST API documentation, which can be found at: https://api.stability.ai/docs  Your DreamStudio API key will be required for authentication. You can learn more about API keys here: https://platform.stability.ai/docs/getting-started/authentication  If you encounter any issues, please let us know in the #API discord channel: https://discord.gg/stablediffusion 
 *
 * The version of the OpenAPI document: 0.1
 * Contact: info@stability.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { HttpService, Inject, Injectable, Optional } from '@nestjs/common';
import { AxiosResponse } from 'axios';
import { Observable } from 'rxjs';
import { ImageToImageOptions } from '../model/imageToImageOptions';
import { MaskingOptions } from '../model/maskingOptions';
import { TextToImageRequestBody } from '../model/textToImageRequestBody';
import { Configuration } from '../configuration';


@Injectable()
export class V1alphaGenerationService {

    protected basePath = 'https://api.stability.ai';
    public defaultHeaders: Record<string,string> = {};
    public configuration = new Configuration();

    constructor(protected httpClient: HttpService, @Optional() configuration: Configuration) {
        this.configuration = configuration || this.configuration;
        this.basePath = configuration?.basePath || this.basePath;
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        return consumes.includes(form);
    }

    /**
     * image-to-image
     * Generate big fancy pictures from small fancy pictures
     * @param engineId  
     * @param accept  
     * @param initImage Initial image to use for the image-to-image generation
     * @param options 
     * @param organization Optional: Allows for requests to be scoped to an organization other than the user\&#39;s default.  If not provided, the user\&#39;s default organization will be used.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v1alphaGenerationImageToImage(engineId: string, accept: 'image/png' | 'application/json', initImage: Blob, options: ImageToImageOptions, organization?: string, ): Observable<AxiosResponse<any>>;
    public v1alphaGenerationImageToImage(engineId: string, accept: 'image/png' | 'application/json', initImage: Blob, options: ImageToImageOptions, organization?: string, ): Observable<any> {

        if (engineId === null || engineId === undefined) {
            throw new Error('Required parameter engineId was null or undefined when calling v1alphaGenerationImageToImage.');
        }

        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling v1alphaGenerationImageToImage.');
        }

        if (initImage === null || initImage === undefined) {
            throw new Error('Required parameter initImage was null or undefined when calling v1alphaGenerationImageToImage.');
        }

        if (options === null || options === undefined) {
            throw new Error('Required parameter options was null or undefined when calling v1alphaGenerationImageToImage.');
        }


        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers['Accept'] = String(accept);
        }
        if (organization !== undefined && organization !== null) {
            headers['Organization'] = String(organization);
        }

        // authentication (api_key_header_Authorization) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/vnd.goa.error'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;

        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            // formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (initImage !== undefined) {
            formParams.append('init_image', <any>initImage);
        }

        if (options !== undefined) {
            formParams.append('options', <any>options);
        }

        return this.httpClient.post<any>(`${this.basePath}/v1alpha/generation/${encodeURIComponent(String(engine_id))}/image-to-image`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * image-to-image/masking
     * Paint fancy things into fancy pictures
     * @param engineId  
     * @param accept  
     * @param initImage Initial image to use for the image-to-image generation
     * @param options 
     * @param organization Optional: Allows for requests to be scoped to an organization other than the user\&#39;s default.  If not provided, the user\&#39;s default organization will be used.
     * @param maskImage Optional mask image to use for masking. Must be the same dimensions as the &#x60;init_image&#x60;. Use the &#x60;mask_source&#x60; option to specify whether the white or black pixels should be inpainted. (Note: if you set &#x60;mask_source&#x60; to &#x60;INIT_IMAGE_ALPHA&#x60; you can omit the &#x60;mask_image&#x60; parameter completely.)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v1alphaGenerationMasking(engineId: string, accept: 'image/png' | 'application/json', initImage: Blob, options: MaskingOptions, organization?: string, maskImage?: Blob, ): Observable<AxiosResponse<any>>;
    public v1alphaGenerationMasking(engineId: string, accept: 'image/png' | 'application/json', initImage: Blob, options: MaskingOptions, organization?: string, maskImage?: Blob, ): Observable<any> {

        if (engineId === null || engineId === undefined) {
            throw new Error('Required parameter engineId was null or undefined when calling v1alphaGenerationMasking.');
        }

        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling v1alphaGenerationMasking.');
        }

        if (initImage === null || initImage === undefined) {
            throw new Error('Required parameter initImage was null or undefined when calling v1alphaGenerationMasking.');
        }

        if (options === null || options === undefined) {
            throw new Error('Required parameter options was null or undefined when calling v1alphaGenerationMasking.');
        }



        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers['Accept'] = String(accept);
        }
        if (organization !== undefined && organization !== null) {
            headers['Organization'] = String(organization);
        }

        // authentication (api_key_header_Authorization) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/vnd.goa.error'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;

        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;

        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            // formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (initImage !== undefined) {
            formParams.append('init_image', <any>initImage);
        }

        if (maskImage !== undefined) {
            formParams.append('mask_image', <any>maskImage);
        }

        if (options !== undefined) {
            formParams.append('options', <any>options);
        }

        return this.httpClient.post<any>(`${this.basePath}/v1alpha/generation/${encodeURIComponent(String(engine_id))}/image-to-image/masking`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * text-to-image
     * Generate an image from text
     * @param engineId  
     * @param accept  
     * @param textToImageRequestBody 
     * @param organization Optional: Allows for requests to be scoped to an organization other than the user\&#39;s default.  If not provided, the user\&#39;s default organization will be used.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v1alphaGenerationTextToImage(engineId: string, accept: 'image/png' | 'application/json', textToImageRequestBody: TextToImageRequestBody, organization?: string, ): Observable<AxiosResponse<any>>;
    public v1alphaGenerationTextToImage(engineId: string, accept: 'image/png' | 'application/json', textToImageRequestBody: TextToImageRequestBody, organization?: string, ): Observable<any> {

        if (engineId === null || engineId === undefined) {
            throw new Error('Required parameter engineId was null or undefined when calling v1alphaGenerationTextToImage.');
        }

        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling v1alphaGenerationTextToImage.');
        }

        if (textToImageRequestBody === null || textToImageRequestBody === undefined) {
            throw new Error('Required parameter textToImageRequestBody was null or undefined when calling v1alphaGenerationTextToImage.');
        }


        let headers = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            headers['Accept'] = String(accept);
        }
        if (organization !== undefined && organization !== null) {
            headers['Organization'] = String(organization);
        }

        // authentication (api_key_header_Authorization) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers['Authorization'] = this.configuration.apiKeys["Authorization"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/vnd.goa.error'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<any>(`${this.basePath}/v1alpha/generation/${encodeURIComponent(String(engine_id))}/text-to-image`,
            textToImageRequestBody,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
}
