/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.V1alphaEnginesApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * Welcome to the Stability.ai REST API developer preview!  Please note, this is an alpha version of our new REST API, and is subject to change according to your feedback.  Feedback during this test is crucial for us to understand what the pain points are and how we can improve it going forward.  Changes will be communicated here, as well as on our online REST API documentation, which can be found at: https://api.stability.ai/docs  Your DreamStudio API key will be required for authentication. You can learn more about API keys here: https://platform.stability.ai/docs/getting-started/authentication  If you encounter any issues, please let us know in the #API discord channel: https://discord.gg/stablediffusion 
 * Version: 0.1
 * Generated by: org.openapitools.codegen.languages.JavascriptClosureAngularClientCodegen
 */
/**
 * @license closed source
 * https://stability.ai/terms-of-use
 */

goog.provide('API.Client.V1alphaEnginesApi');

goog.require('API.Client.ListEnginesResponseBody');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.V1alphaEnginesApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('V1alphaEnginesApiBasePath') ?
                   /** @type {!string} */ ($injector.get('V1alphaEnginesApiBasePath')) :
                   'https://api.stability.ai';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('V1alphaEnginesApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('V1alphaEnginesApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.V1alphaEnginesApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * list
 * List all engines available to your organization/user
 * @param {!string=} opt_organization Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ListEnginesResponseBody>}
 */
API.Client.V1alphaEnginesApi.prototype.v1alphaEnginesListEngines = function(opt_organization, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/v1alpha/engines/list';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  headerParams['Organization'] = opt_organization;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
