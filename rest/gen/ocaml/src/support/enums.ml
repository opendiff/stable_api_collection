(*
 * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
 *
 * Generated by: https://openapi-generator.tech
 *
 *)

type clip_guidance_preset = [
| `FAST_BLUE [@printer fun fmt _ -> Format.pp_print_string fmt "FAST_BLUE"] [@name "FAST_BLUE"]
| `FAST_GREEN [@printer fun fmt _ -> Format.pp_print_string fmt "FAST_GREEN"] [@name "FAST_GREEN"]
| `NONE [@printer fun fmt _ -> Format.pp_print_string fmt "NONE"] [@name "NONE"]
| `SIMPLE [@printer fun fmt _ -> Format.pp_print_string fmt "SIMPLE"] [@name "SIMPLE"]
| `SLOW [@printer fun fmt _ -> Format.pp_print_string fmt "SLOW"] [@name "SLOW"]
| `SLOWER [@printer fun fmt _ -> Format.pp_print_string fmt "SLOWER"] [@name "SLOWER"]
| `SLOWEST [@printer fun fmt _ -> Format.pp_print_string fmt "SLOWEST"] [@name "SLOWEST"]
] [@@deriving yojson, show { with_path = false }];;

let clip_guidance_preset_of_yojson json = clip_guidance_preset_of_yojson (`List [json])
let clip_guidance_preset_to_yojson e =
    match clip_guidance_preset_to_yojson e with
    | `List [json] -> json
    | json -> json

type sampler = [
| `DDIM [@printer fun fmt _ -> Format.pp_print_string fmt "DDIM"] [@name "DDIM"]
| `DDPM [@printer fun fmt _ -> Format.pp_print_string fmt "DDPM"] [@name "DDPM"]
| `K_DPMPP_2M [@printer fun fmt _ -> Format.pp_print_string fmt "K_DPMPP_2M"] [@name "K_DPMPP_2M"]
| `K_DPMPP_2S_ANCESTRAL [@printer fun fmt _ -> Format.pp_print_string fmt "K_DPMPP_2S_ANCESTRAL"] [@name "K_DPMPP_2S_ANCESTRAL"]
| `K_DPM_2 [@printer fun fmt _ -> Format.pp_print_string fmt "K_DPM_2"] [@name "K_DPM_2"]
| `K_DPM_2_ANCESTRAL [@printer fun fmt _ -> Format.pp_print_string fmt "K_DPM_2_ANCESTRAL"] [@name "K_DPM_2_ANCESTRAL"]
| `K_EULER [@printer fun fmt _ -> Format.pp_print_string fmt "K_EULER"] [@name "K_EULER"]
| `K_EULER_ANCESTRAL [@printer fun fmt _ -> Format.pp_print_string fmt "K_EULER_ANCESTRAL"] [@name "K_EULER_ANCESTRAL"]
| `K_HEUN [@printer fun fmt _ -> Format.pp_print_string fmt "K_HEUN"] [@name "K_HEUN"]
| `K_LMS [@printer fun fmt _ -> Format.pp_print_string fmt "K_LMS"] [@name "K_LMS"]
] [@@deriving yojson, show { with_path = false }];;

let sampler_of_yojson json = sampler_of_yojson (`List [json])
let sampler_to_yojson e =
    match sampler_to_yojson e with
    | `List [json] -> json
    | json -> json

type engine_type = [
| `AUDIO [@printer fun fmt _ -> Format.pp_print_string fmt "AUDIO"] [@name "AUDIO"]
| `CLASSIFICATION [@printer fun fmt _ -> Format.pp_print_string fmt "CLASSIFICATION"] [@name "CLASSIFICATION"]
| `PICTURE [@printer fun fmt _ -> Format.pp_print_string fmt "PICTURE"] [@name "PICTURE"]
| `STORAGE [@printer fun fmt _ -> Format.pp_print_string fmt "STORAGE"] [@name "STORAGE"]
| `TEXT [@printer fun fmt _ -> Format.pp_print_string fmt "TEXT"] [@name "TEXT"]
| `VIDEO [@printer fun fmt _ -> Format.pp_print_string fmt "VIDEO"] [@name "VIDEO"]
] [@@deriving yojson, show { with_path = false }];;

let engine_type_of_yojson json = engine_type_of_yojson (`List [json])
let engine_type_to_yojson e =
    match engine_type_to_yojson e with
    | `List [json] -> json
    | json -> json

type mask_source = [
| `INIT_IMAGE_ALPHA [@printer fun fmt _ -> Format.pp_print_string fmt "INIT_IMAGE_ALPHA"] [@name "INIT_IMAGE_ALPHA"]
| `MASK_IMAGE_WHITE [@printer fun fmt _ -> Format.pp_print_string fmt "MASK_IMAGE_WHITE"] [@name "MASK_IMAGE_WHITE"]
| `MASK_IMAGE_BLACK [@printer fun fmt _ -> Format.pp_print_string fmt "MASK_IMAGE_BLACK"] [@name "MASK_IMAGE_BLACK"]
] [@@deriving yojson, show { with_path = false }];;

let mask_source_of_yojson json = mask_source_of_yojson (`List [json])
let mask_source_to_yojson e =
    match mask_source_to_yojson e with
    | `List [json] -> json
    | json -> json

type finish_reason = [
| `SUCCESS [@printer fun fmt _ -> Format.pp_print_string fmt "SUCCESS"] [@name "SUCCESS"]
| `ERROR [@printer fun fmt _ -> Format.pp_print_string fmt "ERROR"] [@name "ERROR"]
| `CONTENT_FILTERED [@printer fun fmt _ -> Format.pp_print_string fmt "CONTENT_FILTERED"] [@name "CONTENT_FILTERED"]
] [@@deriving yojson, show { with_path = false }];;

let finish_reason_of_yojson json = finish_reason_of_yojson (`List [json])
let finish_reason_to_yojson e =
    match finish_reason_to_yojson e with
    | `List [json] -> json
    | json -> json

type accept = [
| `ImageSlashpng [@printer fun fmt _ -> Format.pp_print_string fmt "image/png"] [@name "image/png"]
| `ApplicationSlashjson [@printer fun fmt _ -> Format.pp_print_string fmt "application/json"] [@name "application/json"]
] [@@deriving yojson, show { with_path = false }];;

let accept_of_yojson json = accept_of_yojson (`List [json])
let accept_to_yojson e =
    match accept_to_yojson e with
    | `List [json] -> json
    | json -> json
