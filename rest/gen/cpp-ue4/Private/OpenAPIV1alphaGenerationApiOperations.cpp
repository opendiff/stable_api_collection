/**
 * Stability.ai REST API
 * Welcome to the Stability.ai REST API developer preview!  Please note, this is an alpha version of our new REST API, and is subject to change according to your feedback.  Feedback during this test is crucial for us to understand what the pain points are and how we can improve it going forward.  Changes will be communicated here, as well as on our online REST API documentation, which can be found at: https://api.stability.ai/docs  Your DreamStudio API key will be required for authentication. You can learn more about API keys here: https://platform.stability.ai/docs/getting-started/authentication  If you encounter any issues, please let us know in the #API discord channel: https://discord.gg/stablediffusion 
 *
 * OpenAPI spec version: 0.1
 * Contact: info@stability.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIV1alphaGenerationApiOperations.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Dom/JsonObject.h"
#include "Templates/SharedPointer.h"
#include "HttpModule.h"
#include "PlatformHttp.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPIV1alphaGenerationApi::V1alphaGenerationImageToImageRequest::AcceptEnum& Value)
{
	switch (Value)
	{
	case OpenAPIV1alphaGenerationApi::V1alphaGenerationImageToImageRequest::AcceptEnum::ImagePng:
		return TEXT("image/png");
	case OpenAPIV1alphaGenerationApi::V1alphaGenerationImageToImageRequest::AcceptEnum::ApplicationJson:
		return TEXT("application/json");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIV1alphaGenerationApi::V1alphaGenerationImageToImageRequest::AcceptEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIV1alphaGenerationApi::V1alphaGenerationImageToImageRequest::EnumToString(const OpenAPIV1alphaGenerationApi::V1alphaGenerationImageToImageRequest::AcceptEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIV1alphaGenerationApi::V1alphaGenerationImageToImageRequest::AcceptEnum& Value)
{
	static TMap<FString, OpenAPIV1alphaGenerationApi::V1alphaGenerationImageToImageRequest::AcceptEnum> StringToEnum = { 
		{ TEXT("image/png"), OpenAPIV1alphaGenerationApi::V1alphaGenerationImageToImageRequest::AcceptEnum::ImagePng },
		{ TEXT("application/json"), OpenAPIV1alphaGenerationApi::V1alphaGenerationImageToImageRequest::AcceptEnum::ApplicationJson }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIV1alphaGenerationApi::V1alphaGenerationImageToImageRequest::EnumFromString(const FString& EnumAsString, OpenAPIV1alphaGenerationApi::V1alphaGenerationImageToImageRequest::AcceptEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline FStringFormatArg ToStringFormatArg(const OpenAPIV1alphaGenerationApi::V1alphaGenerationImageToImageRequest::AcceptEnum& Value)
{
	return FStringFormatArg(ToString(Value));
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIV1alphaGenerationApi::V1alphaGenerationImageToImageRequest::AcceptEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIV1alphaGenerationApi::V1alphaGenerationImageToImageRequest::AcceptEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

FString OpenAPIV1alphaGenerationApi::V1alphaGenerationImageToImageRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("engine_id"), ToStringFormatArg(EngineId) } };

	FString Path = FString::Format(TEXT("/v1alpha/generation/{engine_id}/image-to-image"), PathParams);

	return Path;
}

void OpenAPIV1alphaGenerationApi::V1alphaGenerationImageToImageRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("multipart/form-data") };
	//static const TArray<FString> Produces = { TEXT("application/vnd.goa.error") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Header parameters
	HttpRequest->SetHeader(TEXT("Accept"), Accept);
	if (Organization.IsSet())
	{
		HttpRequest->SetHeader(TEXT("Organization"), Organization.GetValue());
	}

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Form parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);
		Writer->WriteObjectStart();
		Writer->WriteIdentifierPrefix(TEXT("init_image"));
		WriteJsonValue(Writer, InitImage);
		Writer->WriteIdentifierPrefix(TEXT("options"));
		WriteJsonValue(Writer, Options);
		Writer->WriteObjectEnd();
		Writer->Close();
		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		HttpMultipartFormData FormData;
		FormData.AddFilePart(TEXT("init_image"), InitImage);
		FormData.AddStringPart(TEXT("options"), *ToUrlString(Options));

		FormData.SetupHttpRequest(HttpRequest);
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		TArray<FString> FormParams;
		UE_LOG(LogOpenAPI, Error, TEXT("Form parameter (init_image) was ignored, Files are not supported in urlencoded requests"));
		FormParams.Add(FString(TEXT("options=")) + ToUrlString(Options));

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/x-www-form-urlencoded; charset=utf-8"));
		HttpRequest->SetContentAsString(FString::Join(FormParams, TEXT("&")));
	}
	else
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIV1alphaGenerationApi::V1alphaGenerationImageToImageResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("OK response."));
		break;
	case 400:
		SetResponseString(TEXT("bad_request:  - invalid_samples: Sample count may only be greater than 1 when accept header is set to &#x60;application/json&#x60; - invalid_height_or_width: Height and width must specified in increments of 64 - invalid_file_size: The file size of one or more of the provided files is invalid - invalid_mime_type: The mime type of one or more of the provided files is invalid - invalid_prompts: One or more of the prompts contains filtered words "));
		break;
	case 401:
		SetResponseString(TEXT("unauthorized: API key missing or invalid"));
		break;
	case 403:
		SetResponseString(TEXT("permission_denied: You lack the necessary permissions to perform this action"));
		break;
	case 404:
		SetResponseString(TEXT("not_found: The requested resource was not found (e.g. specifing a model that does not exist)"));
		break;
	}
}

bool OpenAPIV1alphaGenerationApi::V1alphaGenerationImageToImageResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return true;
}

inline FString ToString(const OpenAPIV1alphaGenerationApi::V1alphaGenerationMaskingRequest::AcceptEnum& Value)
{
	switch (Value)
	{
	case OpenAPIV1alphaGenerationApi::V1alphaGenerationMaskingRequest::AcceptEnum::ImagePng:
		return TEXT("image/png");
	case OpenAPIV1alphaGenerationApi::V1alphaGenerationMaskingRequest::AcceptEnum::ApplicationJson:
		return TEXT("application/json");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIV1alphaGenerationApi::V1alphaGenerationMaskingRequest::AcceptEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIV1alphaGenerationApi::V1alphaGenerationMaskingRequest::EnumToString(const OpenAPIV1alphaGenerationApi::V1alphaGenerationMaskingRequest::AcceptEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIV1alphaGenerationApi::V1alphaGenerationMaskingRequest::AcceptEnum& Value)
{
	static TMap<FString, OpenAPIV1alphaGenerationApi::V1alphaGenerationMaskingRequest::AcceptEnum> StringToEnum = { 
		{ TEXT("image/png"), OpenAPIV1alphaGenerationApi::V1alphaGenerationMaskingRequest::AcceptEnum::ImagePng },
		{ TEXT("application/json"), OpenAPIV1alphaGenerationApi::V1alphaGenerationMaskingRequest::AcceptEnum::ApplicationJson }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIV1alphaGenerationApi::V1alphaGenerationMaskingRequest::EnumFromString(const FString& EnumAsString, OpenAPIV1alphaGenerationApi::V1alphaGenerationMaskingRequest::AcceptEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline FStringFormatArg ToStringFormatArg(const OpenAPIV1alphaGenerationApi::V1alphaGenerationMaskingRequest::AcceptEnum& Value)
{
	return FStringFormatArg(ToString(Value));
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIV1alphaGenerationApi::V1alphaGenerationMaskingRequest::AcceptEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIV1alphaGenerationApi::V1alphaGenerationMaskingRequest::AcceptEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

FString OpenAPIV1alphaGenerationApi::V1alphaGenerationMaskingRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("engine_id"), ToStringFormatArg(EngineId) } };

	FString Path = FString::Format(TEXT("/v1alpha/generation/{engine_id}/image-to-image/masking"), PathParams);

	return Path;
}

void OpenAPIV1alphaGenerationApi::V1alphaGenerationMaskingRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("multipart/form-data") };
	//static const TArray<FString> Produces = { TEXT("application/vnd.goa.error") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Header parameters
	HttpRequest->SetHeader(TEXT("Accept"), Accept);
	if (Organization.IsSet())
	{
		HttpRequest->SetHeader(TEXT("Organization"), Organization.GetValue());
	}

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Form parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);
		Writer->WriteObjectStart();
		Writer->WriteIdentifierPrefix(TEXT("init_image"));
		WriteJsonValue(Writer, InitImage);
		if (MaskImage.IsSet()){
			Writer->WriteIdentifierPrefix(TEXT("mask_image"));
			WriteJsonValue(Writer, MaskImage.GetValue());
		}
		Writer->WriteIdentifierPrefix(TEXT("options"));
		WriteJsonValue(Writer, Options);
		Writer->WriteObjectEnd();
		Writer->Close();
		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		HttpMultipartFormData FormData;
		FormData.AddFilePart(TEXT("init_image"), InitImage);
		if(MaskImage.IsSet())
		{
			FormData.AddFilePart(TEXT("mask_image"), MaskImage.GetValue());
		}
		FormData.AddStringPart(TEXT("options"), *ToUrlString(Options));

		FormData.SetupHttpRequest(HttpRequest);
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		TArray<FString> FormParams;
		UE_LOG(LogOpenAPI, Error, TEXT("Form parameter (init_image) was ignored, Files are not supported in urlencoded requests"));
		UE_LOG(LogOpenAPI, Error, TEXT("Form parameter (mask_image) was ignored, Files are not supported in urlencoded requests"));
		FormParams.Add(FString(TEXT("options=")) + ToUrlString(Options));

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/x-www-form-urlencoded; charset=utf-8"));
		HttpRequest->SetContentAsString(FString::Join(FormParams, TEXT("&")));
	}
	else
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIV1alphaGenerationApi::V1alphaGenerationMaskingResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("OK response."));
		break;
	case 400:
		SetResponseString(TEXT("bad_request:  - invalid_samples: Sample count may only be greater than 1 when accept header is set to &#x60;application/json&#x60; - invalid_height_or_width: Height and width must specified in increments of 64 - invalid_file_size: The file size of one or more of the provided files is invalid - invalid_mime_type: The mime type of one or more of the provided files is invalid - invalid_image_dimensions: The dimensions of the provided &#x60;init_image&#x60; and &#x60;mask_image&#x60; do not match - invalid_mask_image: The parameter &#x60;mask_source&#x60; was set to &#x60;MASK_IMAGE_WHITE&#x60; or &#x60;MASK_IMAGE_BLACK&#x60; but no &#x60;mask_image&#x60; was provided - invalid_prompts: One or more of the prompts contains filtered words "));
		break;
	case 401:
		SetResponseString(TEXT("unauthorized: API key missing or invalid"));
		break;
	case 403:
		SetResponseString(TEXT("permission_denied: You lack the necessary permissions to perform this action"));
		break;
	case 404:
		SetResponseString(TEXT("not_found: The requested resource was not found (e.g. specifing a model that does not exist)"));
		break;
	}
}

bool OpenAPIV1alphaGenerationApi::V1alphaGenerationMaskingResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return true;
}

inline FString ToString(const OpenAPIV1alphaGenerationApi::V1alphaGenerationTextToImageRequest::AcceptEnum& Value)
{
	switch (Value)
	{
	case OpenAPIV1alphaGenerationApi::V1alphaGenerationTextToImageRequest::AcceptEnum::ImagePng:
		return TEXT("image/png");
	case OpenAPIV1alphaGenerationApi::V1alphaGenerationTextToImageRequest::AcceptEnum::ApplicationJson:
		return TEXT("application/json");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIV1alphaGenerationApi::V1alphaGenerationTextToImageRequest::AcceptEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIV1alphaGenerationApi::V1alphaGenerationTextToImageRequest::EnumToString(const OpenAPIV1alphaGenerationApi::V1alphaGenerationTextToImageRequest::AcceptEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIV1alphaGenerationApi::V1alphaGenerationTextToImageRequest::AcceptEnum& Value)
{
	static TMap<FString, OpenAPIV1alphaGenerationApi::V1alphaGenerationTextToImageRequest::AcceptEnum> StringToEnum = { 
		{ TEXT("image/png"), OpenAPIV1alphaGenerationApi::V1alphaGenerationTextToImageRequest::AcceptEnum::ImagePng },
		{ TEXT("application/json"), OpenAPIV1alphaGenerationApi::V1alphaGenerationTextToImageRequest::AcceptEnum::ApplicationJson }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIV1alphaGenerationApi::V1alphaGenerationTextToImageRequest::EnumFromString(const FString& EnumAsString, OpenAPIV1alphaGenerationApi::V1alphaGenerationTextToImageRequest::AcceptEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline FStringFormatArg ToStringFormatArg(const OpenAPIV1alphaGenerationApi::V1alphaGenerationTextToImageRequest::AcceptEnum& Value)
{
	return FStringFormatArg(ToString(Value));
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIV1alphaGenerationApi::V1alphaGenerationTextToImageRequest::AcceptEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIV1alphaGenerationApi::V1alphaGenerationTextToImageRequest::AcceptEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

FString OpenAPIV1alphaGenerationApi::V1alphaGenerationTextToImageRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("engine_id"), ToStringFormatArg(EngineId) } };

	FString Path = FString::Format(TEXT("/v1alpha/generation/{engine_id}/text-to-image"), PathParams);

	return Path;
}

void OpenAPIV1alphaGenerationApi::V1alphaGenerationTextToImageRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("application/vnd.goa.error") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Header parameters
	HttpRequest->SetHeader(TEXT("Accept"), Accept);
	if (Organization.IsSet())
	{
		HttpRequest->SetHeader(TEXT("Organization"), Organization.GetValue());
	}

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Body parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);

		WriteJsonValue(Writer, OpenAPITextToImageRequestBody);
		Writer->Close();

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Body parameter (OpenAPITextToImageRequestBody) was ignored, not supported in multipart form"));
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Body parameter (OpenAPITextToImageRequestBody) was ignored, not supported in urlencoded requests"));
	}
	else
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIV1alphaGenerationApi::V1alphaGenerationTextToImageResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("OK response."));
		break;
	case 400:
		SetResponseString(TEXT("bad_request:  - invalid_samples: Sample count may only be greater than 1 when accept header is set to &#x60;application/json&#x60; - invalid_height_or_width: Height and width must specified in increments of 64 - invalid_prompts: One or more of the prompts contains filtered words "));
		break;
	case 401:
		SetResponseString(TEXT("unauthorized: API key missing or invalid"));
		break;
	case 403:
		SetResponseString(TEXT("permission_denied: You lack the necessary permissions to perform this action"));
		break;
	case 404:
		SetResponseString(TEXT("not_found: The requested resource was not found (e.g. specifing a model that does not exist)"));
		break;
	}
}

bool OpenAPIV1alphaGenerationApi::V1alphaGenerationTextToImageResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return true;
}

}
