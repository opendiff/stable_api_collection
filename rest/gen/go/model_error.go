/*
Stability.ai REST API

Welcome to the Stability.ai REST API developer preview!  Please note, this is an alpha version of our new REST API, and is subject to change according to your feedback.  Feedback during this test is crucial for us to understand what the pain points are and how we can improve it going forward.  Changes will be communicated here, as well as on our online REST API documentation, which can be found at: https://api.stability.ai/docs  Your DreamStudio API key will be required for authentication. You can learn more about API keys here: https://platform.stability.ai/docs/getting-started/authentication  If you encounter any issues, please let us know in the #API discord channel: https://discord.gg/stablediffusion 

API version: 0.1
Contact: info@stability.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Error struct for Error
type Error struct {
	// Is the error a server-side fault?
	Fault bool `json:"fault"`
	// ID is a unique identifier for this particular occurrence of the problem.
	Id string `json:"id"`
	// Message is a human-readable explanation specific to this occurrence of the problem.
	Message string `json:"message"`
	// Name is the name of this class of errors.
	Name string `json:"name"`
	// Is the error temporary?
	Temporary bool `json:"temporary"`
	// Is the error a timeout?
	Timeout bool `json:"timeout"`
}

// NewError instantiates a new Error object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewError(fault bool, id string, message string, name string, temporary bool, timeout bool) *Error {
	this := Error{}
	this.Fault = fault
	this.Id = id
	this.Message = message
	this.Name = name
	this.Temporary = temporary
	this.Timeout = timeout
	return &this
}

// NewErrorWithDefaults instantiates a new Error object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorWithDefaults() *Error {
	this := Error{}
	return &this
}

// GetFault returns the Fault field value
func (o *Error) GetFault() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Fault
}

// GetFaultOk returns a tuple with the Fault field value
// and a boolean to check if the value has been set.
func (o *Error) GetFaultOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fault, true
}

// SetFault sets field value
func (o *Error) SetFault(v bool) {
	o.Fault = v
}

// GetId returns the Id field value
func (o *Error) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Error) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Error) SetId(v string) {
	o.Id = v
}

// GetMessage returns the Message field value
func (o *Error) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *Error) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *Error) SetMessage(v string) {
	o.Message = v
}

// GetName returns the Name field value
func (o *Error) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Error) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Error) SetName(v string) {
	o.Name = v
}

// GetTemporary returns the Temporary field value
func (o *Error) GetTemporary() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Temporary
}

// GetTemporaryOk returns a tuple with the Temporary field value
// and a boolean to check if the value has been set.
func (o *Error) GetTemporaryOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Temporary, true
}

// SetTemporary sets field value
func (o *Error) SetTemporary(v bool) {
	o.Temporary = v
}

// GetTimeout returns the Timeout field value
func (o *Error) GetTimeout() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value
// and a boolean to check if the value has been set.
func (o *Error) GetTimeoutOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timeout, true
}

// SetTimeout sets field value
func (o *Error) SetTimeout(v bool) {
	o.Timeout = v
}

func (o Error) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["fault"] = o.Fault
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["message"] = o.Message
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["temporary"] = o.Temporary
	}
	if true {
		toSerialize["timeout"] = o.Timeout
	}
	return json.Marshal(toSerialize)
}

type NullableError struct {
	value *Error
	isSet bool
}

func (v NullableError) Get() *Error {
	return v.value
}

func (v *NullableError) Set(val *Error) {
	v.value = val
	v.isSet = true
}

func (v NullableError) IsSet() bool {
	return v.isSet
}

func (v *NullableError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableError(val *Error) *NullableError {
	return &NullableError{value: val, isSet: true}
}

func (v NullableError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


