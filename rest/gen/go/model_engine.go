/*
Stability.ai REST API

Welcome to the Stability.ai REST API developer preview!  Please note, this is an alpha version of our new REST API, and is subject to change according to your feedback.  Feedback during this test is crucial for us to understand what the pain points are and how we can improve it going forward.  Changes will be communicated here, as well as on our online REST API documentation, which can be found at: https://api.stability.ai/docs  Your DreamStudio API key will be required for authentication. You can learn more about API keys here: https://platform.stability.ai/docs/getting-started/authentication  If you encounter any issues, please let us know in the #API discord channel: https://discord.gg/stablediffusion 

API version: 0.1
Contact: info@stability.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Engine struct for Engine
type Engine struct {
	Description string `json:"description"`
	// Unique identifier for the engine
	Id string `json:"id"`
	// Name of the engine
	Name string `json:"name"`
	// The type of content this engine produces
	Type string `json:"type"`
}

// NewEngine instantiates a new Engine object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEngine(description string, id string, name string, type_ string) *Engine {
	this := Engine{}
	this.Description = description
	this.Id = id
	this.Name = name
	this.Type = type_
	return &this
}

// NewEngineWithDefaults instantiates a new Engine object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEngineWithDefaults() *Engine {
	this := Engine{}
	return &this
}

// GetDescription returns the Description field value
func (o *Engine) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *Engine) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *Engine) SetDescription(v string) {
	o.Description = v
}

// GetId returns the Id field value
func (o *Engine) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Engine) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Engine) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *Engine) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Engine) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Engine) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *Engine) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Engine) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Engine) SetType(v string) {
	o.Type = v
}

func (o Engine) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableEngine struct {
	value *Engine
	isSet bool
}

func (v NullableEngine) Get() *Engine {
	return v.value
}

func (v *NullableEngine) Set(val *Engine) {
	v.value = val
	v.isSet = true
}

func (v NullableEngine) IsSet() bool {
	return v.isSet
}

func (v *NullableEngine) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEngine(val *Engine) *NullableEngine {
	return &NullableEngine{value: val, isSet: true}
}

func (v NullableEngine) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEngine) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


