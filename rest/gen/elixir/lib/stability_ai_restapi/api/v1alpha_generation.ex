# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule StabilityAiRESTAPI.Api.V1alphaGeneration do
  @moduledoc """
  API calls for all endpoints tagged `V1alphaGeneration`.
  """

  alias StabilityAiRESTAPI.Connection
  import StabilityAiRESTAPI.RequestBuilder


  @doc """
  image-to-image
  Generate big fancy pictures from small fancy pictures

  ## Parameters

  - connection (StabilityAiRESTAPI.Connection): Connection to server
  - engine_id (String.t):  
  - accept (String.t):  
  - init_image (String.t): Initial image to use for the image-to-image generation
  - options (StabilityAiRESTAPI.Model.ImageToImageOptions.t): 
  - opts (KeywordList): [optional] Optional parameters
    - :organization (String.t): Optional: Allows for requests to be scoped to an organization other than the user's default.  If not provided, the user's default organization will be used.
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec v1alpha_generation_image_to_image(Tesla.Env.client, String.t, String.t, String.t, StabilityAiRESTAPI.Model.StabilityAiRESTAPI.Model.ImageToImageOptions.t.t, keyword()) :: {:ok, nil} | {:ok, StabilityAiRESTAPI.Model.Error.t} | {:error, Tesla.Env.t}
  def v1alpha_generation_image_to_image(connection, engine_id, accept, init_image, options, opts \\ []) do
    optional_params = %{
      :Organization => :headers
    }
    %{}
    |> method(:post)
    |> url("/v1alpha/generation/#{engine_id}/image-to-image")
    |> add_param(:headers, :Accept, accept)
    |> add_param(:file, :init_image, init_image)
    |> add_param(:form, :options, options)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 400, %StabilityAiRESTAPI.Model.Error{}},
      { 401, %StabilityAiRESTAPI.Model.Error{}},
      { 403, %StabilityAiRESTAPI.Model.Error{}},
      { 404, %StabilityAiRESTAPI.Model.Error{}}
    ])
  end

  @doc """
  image-to-image/masking
  Paint fancy things into fancy pictures

  ## Parameters

  - connection (StabilityAiRESTAPI.Connection): Connection to server
  - engine_id (String.t):  
  - accept (String.t):  
  - init_image (String.t): Initial image to use for the image-to-image generation
  - options (StabilityAiRESTAPI.Model.MaskingOptions.t): 
  - opts (KeywordList): [optional] Optional parameters
    - :organization (String.t): Optional: Allows for requests to be scoped to an organization other than the user's default.  If not provided, the user's default organization will be used.
    - :mask_image (String.t): Optional mask image to use for masking. Must be the same dimensions as the `init_image`. Use the `mask_source` option to specify whether the white or black pixels should be inpainted. (Note: if you set `mask_source` to `INIT_IMAGE_ALPHA` you can omit the `mask_image` parameter completely.)
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec v1alpha_generation_masking(Tesla.Env.client, String.t, String.t, String.t, StabilityAiRESTAPI.Model.StabilityAiRESTAPI.Model.MaskingOptions.t.t, keyword()) :: {:ok, nil} | {:ok, StabilityAiRESTAPI.Model.Error.t} | {:error, Tesla.Env.t}
  def v1alpha_generation_masking(connection, engine_id, accept, init_image, options, opts \\ []) do
    optional_params = %{
      :Organization => :headers,
      :mask_image => :form
    }
    %{}
    |> method(:post)
    |> url("/v1alpha/generation/#{engine_id}/image-to-image/masking")
    |> add_param(:headers, :Accept, accept)
    |> add_param(:file, :init_image, init_image)
    |> add_param(:form, :options, options)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 400, %StabilityAiRESTAPI.Model.Error{}},
      { 401, %StabilityAiRESTAPI.Model.Error{}},
      { 403, %StabilityAiRESTAPI.Model.Error{}},
      { 404, %StabilityAiRESTAPI.Model.Error{}}
    ])
  end

  @doc """
  text-to-image
  Generate an image from text

  ## Parameters

  - connection (StabilityAiRESTAPI.Connection): Connection to server
  - engine_id (String.t):  
  - accept (String.t):  
  - text_to_image_request_body (TextToImageRequestBody): 
  - opts (KeywordList): [optional] Optional parameters
    - :organization (String.t): Optional: Allows for requests to be scoped to an organization other than the user's default.  If not provided, the user's default organization will be used.
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec v1alpha_generation_text_to_image(Tesla.Env.client, String.t, String.t, StabilityAiRESTAPI.Model.TextToImageRequestBody.t, keyword()) :: {:ok, nil} | {:ok, StabilityAiRESTAPI.Model.Error.t} | {:error, Tesla.Env.t}
  def v1alpha_generation_text_to_image(connection, engine_id, accept, text_to_image_request_body, opts \\ []) do
    optional_params = %{
      :Organization => :headers
    }
    %{}
    |> method(:post)
    |> url("/v1alpha/generation/#{engine_id}/text-to-image")
    |> add_param(:headers, :Accept, accept)
    |> add_param(:body, :body, text_to_image_request_body)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 400, %StabilityAiRESTAPI.Model.Error{}},
      { 401, %StabilityAiRESTAPI.Model.Error{}},
      { 403, %StabilityAiRESTAPI.Model.Error{}},
      { 404, %StabilityAiRESTAPI.Model.Error{}}
    ])
  end
end
