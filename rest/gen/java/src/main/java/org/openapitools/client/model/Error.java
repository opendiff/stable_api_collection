/*
 * Stability.ai REST API
 * Welcome to the Stability.ai REST API developer preview!  Please note, this is an alpha version of our new REST API, and is subject to change according to your feedback.  Feedback during this test is crucial for us to understand what the pain points are and how we can improve it going forward.  Changes will be communicated here, as well as on our online REST API documentation, which can be found at: https://api.stability.ai/docs  Your DreamStudio API key will be required for authentication. You can learn more about API keys here: https://platform.stability.ai/docs/getting-started/authentication  If you encounter any issues, please let us know in the #API discord channel: https://discord.gg/stablediffusion 
 *
 * The version of the OpenAPI document: 0.1
 * Contact: info@stability.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Error
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-12-31T22:15:05.748293-05:00[America/New_York]")
public class Error {
  public static final String SERIALIZED_NAME_FAULT = "fault";
  @SerializedName(SERIALIZED_NAME_FAULT)
  private Boolean fault;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TEMPORARY = "temporary";
  @SerializedName(SERIALIZED_NAME_TEMPORARY)
  private Boolean temporary;

  public static final String SERIALIZED_NAME_TIMEOUT = "timeout";
  @SerializedName(SERIALIZED_NAME_TIMEOUT)
  private Boolean timeout;

  public Error() { 
  }

  public Error fault(Boolean fault) {
    
    this.fault = fault;
    return this;
  }

   /**
   * Is the error a server-side fault?
   * @return fault
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Is the error a server-side fault?")

  public Boolean getFault() {
    return fault;
  }


  public void setFault(Boolean fault) {
    this.fault = fault;
  }


  public Error id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * ID is a unique identifier for this particular occurrence of the problem.
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "123abc", required = true, value = "ID is a unique identifier for this particular occurrence of the problem.")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public Error message(String message) {
    
    this.message = message;
    return this;
  }

   /**
   * Message is a human-readable explanation specific to this occurrence of the problem.
   * @return message
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "parameter 'p' must be an integer", required = true, value = "Message is a human-readable explanation specific to this occurrence of the problem.")

  public String getMessage() {
    return message;
  }


  public void setMessage(String message) {
    this.message = message;
  }


  public Error name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Name is the name of this class of errors.
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "bad_request", required = true, value = "Name is the name of this class of errors.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public Error temporary(Boolean temporary) {
    
    this.temporary = temporary;
    return this;
  }

   /**
   * Is the error temporary?
   * @return temporary
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Is the error temporary?")

  public Boolean getTemporary() {
    return temporary;
  }


  public void setTemporary(Boolean temporary) {
    this.temporary = temporary;
  }


  public Error timeout(Boolean timeout) {
    
    this.timeout = timeout;
    return this;
  }

   /**
   * Is the error a timeout?
   * @return timeout
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "false", required = true, value = "Is the error a timeout?")

  public Boolean getTimeout() {
    return timeout;
  }


  public void setTimeout(Boolean timeout) {
    this.timeout = timeout;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Error error = (Error) o;
    return Objects.equals(this.fault, error.fault) &&
        Objects.equals(this.id, error.id) &&
        Objects.equals(this.message, error.message) &&
        Objects.equals(this.name, error.name) &&
        Objects.equals(this.temporary, error.temporary) &&
        Objects.equals(this.timeout, error.timeout);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fault, id, message, name, temporary, timeout);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Error {\n");
    sb.append("    fault: ").append(toIndentedString(fault)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    temporary: ").append(toIndentedString(temporary)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fault");
    openapiFields.add("id");
    openapiFields.add("message");
    openapiFields.add("name");
    openapiFields.add("temporary");
    openapiFields.add("timeout");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("fault");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("message");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("temporary");
    openapiRequiredFields.add("timeout");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Error
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Error.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Error is not found in the empty JSON string", Error.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Error.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Error` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Error.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("id") != null && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("message") != null && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Error.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Error' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Error> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Error.class));

       return (TypeAdapter<T>) new TypeAdapter<Error>() {
           @Override
           public void write(JsonWriter out, Error value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Error read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Error given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Error
  * @throws IOException if the JSON string is invalid with respect to Error
  */
  public static Error fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Error.class);
  }

 /**
  * Convert an instance of Error to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

