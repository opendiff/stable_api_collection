/*
 * Stability.ai REST API
 * Welcome to the Stability.ai REST API developer preview!  Please note, this is an alpha version of our new REST API, and is subject to change according to your feedback.  Feedback during this test is crucial for us to understand what the pain points are and how we can improve it going forward.  Changes will be communicated here, as well as on our online REST API documentation, which can be found at: https://api.stability.ai/docs  Your DreamStudio API key will be required for authentication. You can learn more about API keys here: https://platform.stability.ai/docs/getting-started/authentication  If you encounter any issues, please let us know in the #API discord channel: https://discord.gg/stablediffusion 
 *
 * The version of the OpenAPI document: 0.1
 * Contact: info@stability.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error;
import java.io.File;
import org.openapitools.client.model.ImageToImageOptions;
import org.openapitools.client.model.MaskingOptions;
import org.openapitools.client.model.TextToImageRequestBody;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class V1alphaGenerationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public V1alphaGenerationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public V1alphaGenerationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v1alphaGenerationImageToImage
     * @param engineId   (required)
     * @param accept   (required)
     * @param initImage Initial image to use for the image-to-image generation (required)
     * @param options  (required)
     * @param organization Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response. </td><td>  * Content-Length -  <br>  * Content-Type -  <br>  * Finish-Reason - The result of the generation process. - &#x60;SUCCESS&#x60; indicates success - &#x60;ERROR&#x60; indicates an error - &#x60;CONTENT_FILTERED&#x60; indicates the result affected by the content filter and may be blurred. <br>  * Seed -  <br>  </td></tr>
        <tr><td> 400 </td><td> bad_request:  - invalid_samples: Sample count may only be greater than 1 when accept header is set to &#x60;application/json&#x60; - invalid_height_or_width: Height and width must specified in increments of 64 - invalid_file_size: The file size of one or more of the provided files is invalid - invalid_mime_type: The mime type of one or more of the provided files is invalid - invalid_prompts: One or more of the prompts contains filtered words  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized: API key missing or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission_denied: You lack the necessary permissions to perform this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not_found: The requested resource was not found (e.g. specifing a model that does not exist) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1alphaGenerationImageToImageCall(String engineId, String accept, File initImage, ImageToImageOptions options, String organization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1alpha/generation/{engine_id}/image-to-image"
            .replaceAll("\\{" + "engine_id" + "\\}", localVarApiClient.escapeString(engineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (initImage != null) {
            localVarFormParams.put("init_image", initImage);
        }

        if (options != null) {
            localVarFormParams.put("options", options);
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (organization != null) {
            localVarHeaderParams.put("Organization", localVarApiClient.parameterToString(organization));
        }

        final String[] localVarAccepts = {
            "application/vnd.goa.error"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header_Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1alphaGenerationImageToImageValidateBeforeCall(String engineId, String accept, File initImage, ImageToImageOptions options, String organization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'engineId' is set
        if (engineId == null) {
            throw new ApiException("Missing the required parameter 'engineId' when calling v1alphaGenerationImageToImage(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling v1alphaGenerationImageToImage(Async)");
        }
        
        // verify the required parameter 'initImage' is set
        if (initImage == null) {
            throw new ApiException("Missing the required parameter 'initImage' when calling v1alphaGenerationImageToImage(Async)");
        }
        
        // verify the required parameter 'options' is set
        if (options == null) {
            throw new ApiException("Missing the required parameter 'options' when calling v1alphaGenerationImageToImage(Async)");
        }
        

        okhttp3.Call localVarCall = v1alphaGenerationImageToImageCall(engineId, accept, initImage, options, organization, _callback);
        return localVarCall;

    }

    /**
     * image-to-image
     * Generate big fancy pictures from small fancy pictures
     * @param engineId   (required)
     * @param accept   (required)
     * @param initImage Initial image to use for the image-to-image generation (required)
     * @param options  (required)
     * @param organization Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response. </td><td>  * Content-Length -  <br>  * Content-Type -  <br>  * Finish-Reason - The result of the generation process. - &#x60;SUCCESS&#x60; indicates success - &#x60;ERROR&#x60; indicates an error - &#x60;CONTENT_FILTERED&#x60; indicates the result affected by the content filter and may be blurred. <br>  * Seed -  <br>  </td></tr>
        <tr><td> 400 </td><td> bad_request:  - invalid_samples: Sample count may only be greater than 1 when accept header is set to &#x60;application/json&#x60; - invalid_height_or_width: Height and width must specified in increments of 64 - invalid_file_size: The file size of one or more of the provided files is invalid - invalid_mime_type: The mime type of one or more of the provided files is invalid - invalid_prompts: One or more of the prompts contains filtered words  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized: API key missing or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission_denied: You lack the necessary permissions to perform this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not_found: The requested resource was not found (e.g. specifing a model that does not exist) </td><td>  -  </td></tr>
     </table>
     */
    public void v1alphaGenerationImageToImage(String engineId, String accept, File initImage, ImageToImageOptions options, String organization) throws ApiException {
        v1alphaGenerationImageToImageWithHttpInfo(engineId, accept, initImage, options, organization);
    }

    /**
     * image-to-image
     * Generate big fancy pictures from small fancy pictures
     * @param engineId   (required)
     * @param accept   (required)
     * @param initImage Initial image to use for the image-to-image generation (required)
     * @param options  (required)
     * @param organization Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response. </td><td>  * Content-Length -  <br>  * Content-Type -  <br>  * Finish-Reason - The result of the generation process. - &#x60;SUCCESS&#x60; indicates success - &#x60;ERROR&#x60; indicates an error - &#x60;CONTENT_FILTERED&#x60; indicates the result affected by the content filter and may be blurred. <br>  * Seed -  <br>  </td></tr>
        <tr><td> 400 </td><td> bad_request:  - invalid_samples: Sample count may only be greater than 1 when accept header is set to &#x60;application/json&#x60; - invalid_height_or_width: Height and width must specified in increments of 64 - invalid_file_size: The file size of one or more of the provided files is invalid - invalid_mime_type: The mime type of one or more of the provided files is invalid - invalid_prompts: One or more of the prompts contains filtered words  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized: API key missing or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission_denied: You lack the necessary permissions to perform this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not_found: The requested resource was not found (e.g. specifing a model that does not exist) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v1alphaGenerationImageToImageWithHttpInfo(String engineId, String accept, File initImage, ImageToImageOptions options, String organization) throws ApiException {
        okhttp3.Call localVarCall = v1alphaGenerationImageToImageValidateBeforeCall(engineId, accept, initImage, options, organization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * image-to-image (asynchronously)
     * Generate big fancy pictures from small fancy pictures
     * @param engineId   (required)
     * @param accept   (required)
     * @param initImage Initial image to use for the image-to-image generation (required)
     * @param options  (required)
     * @param organization Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response. </td><td>  * Content-Length -  <br>  * Content-Type -  <br>  * Finish-Reason - The result of the generation process. - &#x60;SUCCESS&#x60; indicates success - &#x60;ERROR&#x60; indicates an error - &#x60;CONTENT_FILTERED&#x60; indicates the result affected by the content filter and may be blurred. <br>  * Seed -  <br>  </td></tr>
        <tr><td> 400 </td><td> bad_request:  - invalid_samples: Sample count may only be greater than 1 when accept header is set to &#x60;application/json&#x60; - invalid_height_or_width: Height and width must specified in increments of 64 - invalid_file_size: The file size of one or more of the provided files is invalid - invalid_mime_type: The mime type of one or more of the provided files is invalid - invalid_prompts: One or more of the prompts contains filtered words  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized: API key missing or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission_denied: You lack the necessary permissions to perform this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not_found: The requested resource was not found (e.g. specifing a model that does not exist) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1alphaGenerationImageToImageAsync(String engineId, String accept, File initImage, ImageToImageOptions options, String organization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1alphaGenerationImageToImageValidateBeforeCall(engineId, accept, initImage, options, organization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1alphaGenerationMasking
     * @param engineId   (required)
     * @param accept   (required)
     * @param initImage Initial image to use for the image-to-image generation (required)
     * @param options  (required)
     * @param organization Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)
     * @param maskImage Optional mask image to use for masking. Must be the same dimensions as the &#x60;init_image&#x60;. Use the &#x60;mask_source&#x60; option to specify whether the white or black pixels should be inpainted. (Note: if you set &#x60;mask_source&#x60; to &#x60;INIT_IMAGE_ALPHA&#x60; you can omit the &#x60;mask_image&#x60; parameter completely.) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response. </td><td>  * Content-Length -  <br>  * Content-Type -  <br>  * Finish-Reason - The result of the generation process. - &#x60;SUCCESS&#x60; indicates success - &#x60;ERROR&#x60; indicates an error - &#x60;CONTENT_FILTERED&#x60; indicates the result affected by the content filter and may be blurred. <br>  * Seed -  <br>  </td></tr>
        <tr><td> 400 </td><td> bad_request:  - invalid_samples: Sample count may only be greater than 1 when accept header is set to &#x60;application/json&#x60; - invalid_height_or_width: Height and width must specified in increments of 64 - invalid_file_size: The file size of one or more of the provided files is invalid - invalid_mime_type: The mime type of one or more of the provided files is invalid - invalid_image_dimensions: The dimensions of the provided &#x60;init_image&#x60; and &#x60;mask_image&#x60; do not match - invalid_mask_image: The parameter &#x60;mask_source&#x60; was set to &#x60;MASK_IMAGE_WHITE&#x60; or &#x60;MASK_IMAGE_BLACK&#x60; but no &#x60;mask_image&#x60; was provided - invalid_prompts: One or more of the prompts contains filtered words  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized: API key missing or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission_denied: You lack the necessary permissions to perform this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not_found: The requested resource was not found (e.g. specifing a model that does not exist) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1alphaGenerationMaskingCall(String engineId, String accept, File initImage, MaskingOptions options, String organization, File maskImage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1alpha/generation/{engine_id}/image-to-image/masking"
            .replaceAll("\\{" + "engine_id" + "\\}", localVarApiClient.escapeString(engineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (initImage != null) {
            localVarFormParams.put("init_image", initImage);
        }

        if (maskImage != null) {
            localVarFormParams.put("mask_image", maskImage);
        }

        if (options != null) {
            localVarFormParams.put("options", options);
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (organization != null) {
            localVarHeaderParams.put("Organization", localVarApiClient.parameterToString(organization));
        }

        final String[] localVarAccepts = {
            "application/vnd.goa.error"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header_Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1alphaGenerationMaskingValidateBeforeCall(String engineId, String accept, File initImage, MaskingOptions options, String organization, File maskImage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'engineId' is set
        if (engineId == null) {
            throw new ApiException("Missing the required parameter 'engineId' when calling v1alphaGenerationMasking(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling v1alphaGenerationMasking(Async)");
        }
        
        // verify the required parameter 'initImage' is set
        if (initImage == null) {
            throw new ApiException("Missing the required parameter 'initImage' when calling v1alphaGenerationMasking(Async)");
        }
        
        // verify the required parameter 'options' is set
        if (options == null) {
            throw new ApiException("Missing the required parameter 'options' when calling v1alphaGenerationMasking(Async)");
        }
        

        okhttp3.Call localVarCall = v1alphaGenerationMaskingCall(engineId, accept, initImage, options, organization, maskImage, _callback);
        return localVarCall;

    }

    /**
     * image-to-image/masking
     * Paint fancy things into fancy pictures
     * @param engineId   (required)
     * @param accept   (required)
     * @param initImage Initial image to use for the image-to-image generation (required)
     * @param options  (required)
     * @param organization Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)
     * @param maskImage Optional mask image to use for masking. Must be the same dimensions as the &#x60;init_image&#x60;. Use the &#x60;mask_source&#x60; option to specify whether the white or black pixels should be inpainted. (Note: if you set &#x60;mask_source&#x60; to &#x60;INIT_IMAGE_ALPHA&#x60; you can omit the &#x60;mask_image&#x60; parameter completely.) (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response. </td><td>  * Content-Length -  <br>  * Content-Type -  <br>  * Finish-Reason - The result of the generation process. - &#x60;SUCCESS&#x60; indicates success - &#x60;ERROR&#x60; indicates an error - &#x60;CONTENT_FILTERED&#x60; indicates the result affected by the content filter and may be blurred. <br>  * Seed -  <br>  </td></tr>
        <tr><td> 400 </td><td> bad_request:  - invalid_samples: Sample count may only be greater than 1 when accept header is set to &#x60;application/json&#x60; - invalid_height_or_width: Height and width must specified in increments of 64 - invalid_file_size: The file size of one or more of the provided files is invalid - invalid_mime_type: The mime type of one or more of the provided files is invalid - invalid_image_dimensions: The dimensions of the provided &#x60;init_image&#x60; and &#x60;mask_image&#x60; do not match - invalid_mask_image: The parameter &#x60;mask_source&#x60; was set to &#x60;MASK_IMAGE_WHITE&#x60; or &#x60;MASK_IMAGE_BLACK&#x60; but no &#x60;mask_image&#x60; was provided - invalid_prompts: One or more of the prompts contains filtered words  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized: API key missing or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission_denied: You lack the necessary permissions to perform this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not_found: The requested resource was not found (e.g. specifing a model that does not exist) </td><td>  -  </td></tr>
     </table>
     */
    public void v1alphaGenerationMasking(String engineId, String accept, File initImage, MaskingOptions options, String organization, File maskImage) throws ApiException {
        v1alphaGenerationMaskingWithHttpInfo(engineId, accept, initImage, options, organization, maskImage);
    }

    /**
     * image-to-image/masking
     * Paint fancy things into fancy pictures
     * @param engineId   (required)
     * @param accept   (required)
     * @param initImage Initial image to use for the image-to-image generation (required)
     * @param options  (required)
     * @param organization Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)
     * @param maskImage Optional mask image to use for masking. Must be the same dimensions as the &#x60;init_image&#x60;. Use the &#x60;mask_source&#x60; option to specify whether the white or black pixels should be inpainted. (Note: if you set &#x60;mask_source&#x60; to &#x60;INIT_IMAGE_ALPHA&#x60; you can omit the &#x60;mask_image&#x60; parameter completely.) (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response. </td><td>  * Content-Length -  <br>  * Content-Type -  <br>  * Finish-Reason - The result of the generation process. - &#x60;SUCCESS&#x60; indicates success - &#x60;ERROR&#x60; indicates an error - &#x60;CONTENT_FILTERED&#x60; indicates the result affected by the content filter and may be blurred. <br>  * Seed -  <br>  </td></tr>
        <tr><td> 400 </td><td> bad_request:  - invalid_samples: Sample count may only be greater than 1 when accept header is set to &#x60;application/json&#x60; - invalid_height_or_width: Height and width must specified in increments of 64 - invalid_file_size: The file size of one or more of the provided files is invalid - invalid_mime_type: The mime type of one or more of the provided files is invalid - invalid_image_dimensions: The dimensions of the provided &#x60;init_image&#x60; and &#x60;mask_image&#x60; do not match - invalid_mask_image: The parameter &#x60;mask_source&#x60; was set to &#x60;MASK_IMAGE_WHITE&#x60; or &#x60;MASK_IMAGE_BLACK&#x60; but no &#x60;mask_image&#x60; was provided - invalid_prompts: One or more of the prompts contains filtered words  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized: API key missing or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission_denied: You lack the necessary permissions to perform this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not_found: The requested resource was not found (e.g. specifing a model that does not exist) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v1alphaGenerationMaskingWithHttpInfo(String engineId, String accept, File initImage, MaskingOptions options, String organization, File maskImage) throws ApiException {
        okhttp3.Call localVarCall = v1alphaGenerationMaskingValidateBeforeCall(engineId, accept, initImage, options, organization, maskImage, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * image-to-image/masking (asynchronously)
     * Paint fancy things into fancy pictures
     * @param engineId   (required)
     * @param accept   (required)
     * @param initImage Initial image to use for the image-to-image generation (required)
     * @param options  (required)
     * @param organization Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)
     * @param maskImage Optional mask image to use for masking. Must be the same dimensions as the &#x60;init_image&#x60;. Use the &#x60;mask_source&#x60; option to specify whether the white or black pixels should be inpainted. (Note: if you set &#x60;mask_source&#x60; to &#x60;INIT_IMAGE_ALPHA&#x60; you can omit the &#x60;mask_image&#x60; parameter completely.) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response. </td><td>  * Content-Length -  <br>  * Content-Type -  <br>  * Finish-Reason - The result of the generation process. - &#x60;SUCCESS&#x60; indicates success - &#x60;ERROR&#x60; indicates an error - &#x60;CONTENT_FILTERED&#x60; indicates the result affected by the content filter and may be blurred. <br>  * Seed -  <br>  </td></tr>
        <tr><td> 400 </td><td> bad_request:  - invalid_samples: Sample count may only be greater than 1 when accept header is set to &#x60;application/json&#x60; - invalid_height_or_width: Height and width must specified in increments of 64 - invalid_file_size: The file size of one or more of the provided files is invalid - invalid_mime_type: The mime type of one or more of the provided files is invalid - invalid_image_dimensions: The dimensions of the provided &#x60;init_image&#x60; and &#x60;mask_image&#x60; do not match - invalid_mask_image: The parameter &#x60;mask_source&#x60; was set to &#x60;MASK_IMAGE_WHITE&#x60; or &#x60;MASK_IMAGE_BLACK&#x60; but no &#x60;mask_image&#x60; was provided - invalid_prompts: One or more of the prompts contains filtered words  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized: API key missing or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission_denied: You lack the necessary permissions to perform this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not_found: The requested resource was not found (e.g. specifing a model that does not exist) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1alphaGenerationMaskingAsync(String engineId, String accept, File initImage, MaskingOptions options, String organization, File maskImage, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1alphaGenerationMaskingValidateBeforeCall(engineId, accept, initImage, options, organization, maskImage, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1alphaGenerationTextToImage
     * @param engineId   (required)
     * @param accept   (required)
     * @param textToImageRequestBody  (required)
     * @param organization Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response. </td><td>  * Content-Length -  <br>  * Content-Type -  <br>  * Finish-Reason - The result of the generation process. - &#x60;SUCCESS&#x60; indicates success - &#x60;ERROR&#x60; indicates an error - &#x60;CONTENT_FILTERED&#x60; indicates the result affected by the content filter and may be blurred. <br>  * Seed -  <br>  </td></tr>
        <tr><td> 400 </td><td> bad_request:  - invalid_samples: Sample count may only be greater than 1 when accept header is set to &#x60;application/json&#x60; - invalid_height_or_width: Height and width must specified in increments of 64 - invalid_prompts: One or more of the prompts contains filtered words  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized: API key missing or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission_denied: You lack the necessary permissions to perform this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not_found: The requested resource was not found (e.g. specifing a model that does not exist) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1alphaGenerationTextToImageCall(String engineId, String accept, TextToImageRequestBody textToImageRequestBody, String organization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = textToImageRequestBody;

        // create path and map variables
        String localVarPath = "/v1alpha/generation/{engine_id}/text-to-image"
            .replaceAll("\\{" + "engine_id" + "\\}", localVarApiClient.escapeString(engineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (organization != null) {
            localVarHeaderParams.put("Organization", localVarApiClient.parameterToString(organization));
        }

        final String[] localVarAccepts = {
            "application/vnd.goa.error"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_header_Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1alphaGenerationTextToImageValidateBeforeCall(String engineId, String accept, TextToImageRequestBody textToImageRequestBody, String organization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'engineId' is set
        if (engineId == null) {
            throw new ApiException("Missing the required parameter 'engineId' when calling v1alphaGenerationTextToImage(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling v1alphaGenerationTextToImage(Async)");
        }
        
        // verify the required parameter 'textToImageRequestBody' is set
        if (textToImageRequestBody == null) {
            throw new ApiException("Missing the required parameter 'textToImageRequestBody' when calling v1alphaGenerationTextToImage(Async)");
        }
        

        okhttp3.Call localVarCall = v1alphaGenerationTextToImageCall(engineId, accept, textToImageRequestBody, organization, _callback);
        return localVarCall;

    }

    /**
     * text-to-image
     * Generate an image from text
     * @param engineId   (required)
     * @param accept   (required)
     * @param textToImageRequestBody  (required)
     * @param organization Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response. </td><td>  * Content-Length -  <br>  * Content-Type -  <br>  * Finish-Reason - The result of the generation process. - &#x60;SUCCESS&#x60; indicates success - &#x60;ERROR&#x60; indicates an error - &#x60;CONTENT_FILTERED&#x60; indicates the result affected by the content filter and may be blurred. <br>  * Seed -  <br>  </td></tr>
        <tr><td> 400 </td><td> bad_request:  - invalid_samples: Sample count may only be greater than 1 when accept header is set to &#x60;application/json&#x60; - invalid_height_or_width: Height and width must specified in increments of 64 - invalid_prompts: One or more of the prompts contains filtered words  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized: API key missing or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission_denied: You lack the necessary permissions to perform this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not_found: The requested resource was not found (e.g. specifing a model that does not exist) </td><td>  -  </td></tr>
     </table>
     */
    public void v1alphaGenerationTextToImage(String engineId, String accept, TextToImageRequestBody textToImageRequestBody, String organization) throws ApiException {
        v1alphaGenerationTextToImageWithHttpInfo(engineId, accept, textToImageRequestBody, organization);
    }

    /**
     * text-to-image
     * Generate an image from text
     * @param engineId   (required)
     * @param accept   (required)
     * @param textToImageRequestBody  (required)
     * @param organization Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response. </td><td>  * Content-Length -  <br>  * Content-Type -  <br>  * Finish-Reason - The result of the generation process. - &#x60;SUCCESS&#x60; indicates success - &#x60;ERROR&#x60; indicates an error - &#x60;CONTENT_FILTERED&#x60; indicates the result affected by the content filter and may be blurred. <br>  * Seed -  <br>  </td></tr>
        <tr><td> 400 </td><td> bad_request:  - invalid_samples: Sample count may only be greater than 1 when accept header is set to &#x60;application/json&#x60; - invalid_height_or_width: Height and width must specified in increments of 64 - invalid_prompts: One or more of the prompts contains filtered words  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized: API key missing or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission_denied: You lack the necessary permissions to perform this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not_found: The requested resource was not found (e.g. specifing a model that does not exist) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v1alphaGenerationTextToImageWithHttpInfo(String engineId, String accept, TextToImageRequestBody textToImageRequestBody, String organization) throws ApiException {
        okhttp3.Call localVarCall = v1alphaGenerationTextToImageValidateBeforeCall(engineId, accept, textToImageRequestBody, organization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * text-to-image (asynchronously)
     * Generate an image from text
     * @param engineId   (required)
     * @param accept   (required)
     * @param textToImageRequestBody  (required)
     * @param organization Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response. </td><td>  * Content-Length -  <br>  * Content-Type -  <br>  * Finish-Reason - The result of the generation process. - &#x60;SUCCESS&#x60; indicates success - &#x60;ERROR&#x60; indicates an error - &#x60;CONTENT_FILTERED&#x60; indicates the result affected by the content filter and may be blurred. <br>  * Seed -  <br>  </td></tr>
        <tr><td> 400 </td><td> bad_request:  - invalid_samples: Sample count may only be greater than 1 when accept header is set to &#x60;application/json&#x60; - invalid_height_or_width: Height and width must specified in increments of 64 - invalid_prompts: One or more of the prompts contains filtered words  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized: API key missing or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission_denied: You lack the necessary permissions to perform this action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not_found: The requested resource was not found (e.g. specifing a model that does not exist) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1alphaGenerationTextToImageAsync(String engineId, String accept, TextToImageRequestBody textToImageRequestBody, String organization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1alphaGenerationTextToImageValidateBeforeCall(engineId, accept, textToImageRequestBody, organization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
