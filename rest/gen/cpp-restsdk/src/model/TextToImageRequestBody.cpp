/**
 * Stability.ai REST API
 * Welcome to the Stability.ai REST API developer preview!  Please note, this is an alpha version of our new REST API, and is subject to change according to your feedback.  Feedback during this test is crucial for us to understand what the pain points are and how we can improve it going forward.  Changes will be communicated here, as well as on our online REST API documentation, which can be found at: https://api.stability.ai/docs  Your DreamStudio API key will be required for authentication. You can learn more about API keys here: https://platform.stability.ai/docs/getting-started/authentication  If you encounter any issues, please let us know in the #API discord channel: https://discord.gg/stablediffusion 
 *
 * The version of the OpenAPI document: 0.1
 * Contact: info@stability.ai
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/TextToImageRequestBody.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



TextToImageRequestBody::TextToImageRequestBody()
{
    m_Cfg_scale = 0.0;
    m_Cfg_scaleIsSet = false;
    m_Clip_guidance_preset = utility::conversions::to_string_t("");
    m_Clip_guidance_presetIsSet = false;
    m_Height = 0;
    m_HeightIsSet = false;
    m_Sampler = utility::conversions::to_string_t("");
    m_SamplerIsSet = false;
    m_Samples = 0;
    m_SamplesIsSet = false;
    m_Seed = 0;
    m_SeedIsSet = false;
    m_Steps = 0;
    m_StepsIsSet = false;
    m_Text_promptsIsSet = false;
    m_Width = 0;
    m_WidthIsSet = false;
}

TextToImageRequestBody::~TextToImageRequestBody()
{
}

void TextToImageRequestBody::validate()
{
    // TODO: implement validation
}

web::json::value TextToImageRequestBody::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Cfg_scaleIsSet)
    {
        val[utility::conversions::to_string_t(U("cfg_scale"))] = ModelBase::toJson(m_Cfg_scale);
    }
    if(m_Clip_guidance_presetIsSet)
    {
        val[utility::conversions::to_string_t(U("clip_guidance_preset"))] = ModelBase::toJson(m_Clip_guidance_preset);
    }
    if(m_HeightIsSet)
    {
        val[utility::conversions::to_string_t(U("height"))] = ModelBase::toJson(m_Height);
    }
    if(m_SamplerIsSet)
    {
        val[utility::conversions::to_string_t(U("sampler"))] = ModelBase::toJson(m_Sampler);
    }
    if(m_SamplesIsSet)
    {
        val[utility::conversions::to_string_t(U("samples"))] = ModelBase::toJson(m_Samples);
    }
    if(m_SeedIsSet)
    {
        val[utility::conversions::to_string_t(U("seed"))] = ModelBase::toJson(m_Seed);
    }
    if(m_StepsIsSet)
    {
        val[utility::conversions::to_string_t(U("steps"))] = ModelBase::toJson(m_Steps);
    }
    if(m_Text_promptsIsSet)
    {
        val[utility::conversions::to_string_t(U("text_prompts"))] = ModelBase::toJson(m_Text_prompts);
    }
    if(m_WidthIsSet)
    {
        val[utility::conversions::to_string_t(U("width"))] = ModelBase::toJson(m_Width);
    }

    return val;
}

bool TextToImageRequestBody::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("cfg_scale"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cfg_scale")));
        if(!fieldValue.is_null())
        {
            double refVal_setCfgScale;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCfgScale);
            setCfgScale(refVal_setCfgScale);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("clip_guidance_preset"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("clip_guidance_preset")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setClipGuidancePreset;
            ok &= ModelBase::fromJson(fieldValue, refVal_setClipGuidancePreset);
            setClipGuidancePreset(refVal_setClipGuidancePreset);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("height"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("height")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setHeight;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHeight);
            setHeight(refVal_setHeight);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("sampler"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sampler")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSampler;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSampler);
            setSampler(refVal_setSampler);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("samples"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("samples")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSamples;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSamples);
            setSamples(refVal_setSamples);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("seed"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("seed")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSeed;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSeed);
            setSeed(refVal_setSeed);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("steps"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("steps")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSteps;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSteps);
            setSteps(refVal_setSteps);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("text_prompts"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("text_prompts")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<TextPrompt>> refVal_setTextPrompts;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTextPrompts);
            setTextPrompts(refVal_setTextPrompts);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("width"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("width")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setWidth;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWidth);
            setWidth(refVal_setWidth);
        }
    }
    return ok;
}

void TextToImageRequestBody::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Cfg_scaleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cfg_scale")), m_Cfg_scale));
    }
    if(m_Clip_guidance_presetIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("clip_guidance_preset")), m_Clip_guidance_preset));
    }
    if(m_HeightIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("height")), m_Height));
    }
    if(m_SamplerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sampler")), m_Sampler));
    }
    if(m_SamplesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("samples")), m_Samples));
    }
    if(m_SeedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("seed")), m_Seed));
    }
    if(m_StepsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("steps")), m_Steps));
    }
    if(m_Text_promptsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("text_prompts")), m_Text_prompts));
    }
    if(m_WidthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("width")), m_Width));
    }
}

bool TextToImageRequestBody::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("cfg_scale"))))
    {
        double refVal_setCfgScale;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cfg_scale"))), refVal_setCfgScale );
        setCfgScale(refVal_setCfgScale);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("clip_guidance_preset"))))
    {
        utility::string_t refVal_setClipGuidancePreset;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("clip_guidance_preset"))), refVal_setClipGuidancePreset );
        setClipGuidancePreset(refVal_setClipGuidancePreset);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("height"))))
    {
        int32_t refVal_setHeight;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("height"))), refVal_setHeight );
        setHeight(refVal_setHeight);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("sampler"))))
    {
        utility::string_t refVal_setSampler;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sampler"))), refVal_setSampler );
        setSampler(refVal_setSampler);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("samples"))))
    {
        int32_t refVal_setSamples;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("samples"))), refVal_setSamples );
        setSamples(refVal_setSamples);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("seed"))))
    {
        int32_t refVal_setSeed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("seed"))), refVal_setSeed );
        setSeed(refVal_setSeed);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("steps"))))
    {
        int32_t refVal_setSteps;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("steps"))), refVal_setSteps );
        setSteps(refVal_setSteps);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("text_prompts"))))
    {
        std::vector<std::shared_ptr<TextPrompt>> refVal_setTextPrompts;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("text_prompts"))), refVal_setTextPrompts );
        setTextPrompts(refVal_setTextPrompts);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("width"))))
    {
        int32_t refVal_setWidth;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("width"))), refVal_setWidth );
        setWidth(refVal_setWidth);
    }
    return ok;
}

double TextToImageRequestBody::getCfgScale() const
{
    return m_Cfg_scale;
}

void TextToImageRequestBody::setCfgScale(double value)
{
    m_Cfg_scale = value;
    m_Cfg_scaleIsSet = true;
}

bool TextToImageRequestBody::cfgScaleIsSet() const
{
    return m_Cfg_scaleIsSet;
}

void TextToImageRequestBody::unsetCfg_scale()
{
    m_Cfg_scaleIsSet = false;
}
utility::string_t TextToImageRequestBody::getClipGuidancePreset() const
{
    return m_Clip_guidance_preset;
}

void TextToImageRequestBody::setClipGuidancePreset(const utility::string_t& value)
{
    m_Clip_guidance_preset = value;
    m_Clip_guidance_presetIsSet = true;
}

bool TextToImageRequestBody::clipGuidancePresetIsSet() const
{
    return m_Clip_guidance_presetIsSet;
}

void TextToImageRequestBody::unsetClip_guidance_preset()
{
    m_Clip_guidance_presetIsSet = false;
}
int32_t TextToImageRequestBody::getHeight() const
{
    return m_Height;
}

void TextToImageRequestBody::setHeight(int32_t value)
{
    m_Height = value;
    m_HeightIsSet = true;
}

bool TextToImageRequestBody::heightIsSet() const
{
    return m_HeightIsSet;
}

void TextToImageRequestBody::unsetHeight()
{
    m_HeightIsSet = false;
}
utility::string_t TextToImageRequestBody::getSampler() const
{
    return m_Sampler;
}

void TextToImageRequestBody::setSampler(const utility::string_t& value)
{
    m_Sampler = value;
    m_SamplerIsSet = true;
}

bool TextToImageRequestBody::samplerIsSet() const
{
    return m_SamplerIsSet;
}

void TextToImageRequestBody::unsetSampler()
{
    m_SamplerIsSet = false;
}
int32_t TextToImageRequestBody::getSamples() const
{
    return m_Samples;
}

void TextToImageRequestBody::setSamples(int32_t value)
{
    m_Samples = value;
    m_SamplesIsSet = true;
}

bool TextToImageRequestBody::samplesIsSet() const
{
    return m_SamplesIsSet;
}

void TextToImageRequestBody::unsetSamples()
{
    m_SamplesIsSet = false;
}
int32_t TextToImageRequestBody::getSeed() const
{
    return m_Seed;
}

void TextToImageRequestBody::setSeed(int32_t value)
{
    m_Seed = value;
    m_SeedIsSet = true;
}

bool TextToImageRequestBody::seedIsSet() const
{
    return m_SeedIsSet;
}

void TextToImageRequestBody::unsetSeed()
{
    m_SeedIsSet = false;
}
int32_t TextToImageRequestBody::getSteps() const
{
    return m_Steps;
}

void TextToImageRequestBody::setSteps(int32_t value)
{
    m_Steps = value;
    m_StepsIsSet = true;
}

bool TextToImageRequestBody::stepsIsSet() const
{
    return m_StepsIsSet;
}

void TextToImageRequestBody::unsetSteps()
{
    m_StepsIsSet = false;
}
std::vector<std::shared_ptr<TextPrompt>>& TextToImageRequestBody::getTextPrompts()
{
    return m_Text_prompts;
}

void TextToImageRequestBody::setTextPrompts(const std::vector<std::shared_ptr<TextPrompt>>& value)
{
    m_Text_prompts = value;
    m_Text_promptsIsSet = true;
}

bool TextToImageRequestBody::textPromptsIsSet() const
{
    return m_Text_promptsIsSet;
}

void TextToImageRequestBody::unsetText_prompts()
{
    m_Text_promptsIsSet = false;
}
int32_t TextToImageRequestBody::getWidth() const
{
    return m_Width;
}

void TextToImageRequestBody::setWidth(int32_t value)
{
    m_Width = value;
    m_WidthIsSet = true;
}

bool TextToImageRequestBody::widthIsSet() const
{
    return m_WidthIsSet;
}

void TextToImageRequestBody::unsetWidth()
{
    m_WidthIsSet = false;
}
}
}
}
}


