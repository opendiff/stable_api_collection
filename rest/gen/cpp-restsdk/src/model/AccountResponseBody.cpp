/**
 * Stability.ai REST API
 * Welcome to the Stability.ai REST API developer preview!  Please note, this is an alpha version of our new REST API, and is subject to change according to your feedback.  Feedback during this test is crucial for us to understand what the pain points are and how we can improve it going forward.  Changes will be communicated here, as well as on our online REST API documentation, which can be found at: https://api.stability.ai/docs  Your DreamStudio API key will be required for authentication. You can learn more about API keys here: https://platform.stability.ai/docs/getting-started/authentication  If you encounter any issues, please let us know in the #API discord channel: https://discord.gg/stablediffusion 
 *
 * The version of the OpenAPI document: 0.1
 * Contact: info@stability.ai
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/AccountResponseBody.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



AccountResponseBody::AccountResponseBody()
{
    m_Email = utility::conversions::to_string_t("");
    m_EmailIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_OrganizationsIsSet = false;
    m_Profile_picture = utility::conversions::to_string_t("");
    m_Profile_pictureIsSet = false;
}

AccountResponseBody::~AccountResponseBody()
{
}

void AccountResponseBody::validate()
{
    // TODO: implement validation
}

web::json::value AccountResponseBody::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_EmailIsSet)
    {
        val[utility::conversions::to_string_t(U("email"))] = ModelBase::toJson(m_Email);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_OrganizationsIsSet)
    {
        val[utility::conversions::to_string_t(U("organizations"))] = ModelBase::toJson(m_Organizations);
    }
    if(m_Profile_pictureIsSet)
    {
        val[utility::conversions::to_string_t(U("profile_picture"))] = ModelBase::toJson(m_Profile_picture);
    }

    return val;
}

bool AccountResponseBody::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("email"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("email")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEmail;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEmail);
            setEmail(refVal_setEmail);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("organizations"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("organizations")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<OrganizationMembership>> refVal_setOrganizations;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOrganizations);
            setOrganizations(refVal_setOrganizations);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("profile_picture"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("profile_picture")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setProfilePicture;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProfilePicture);
            setProfilePicture(refVal_setProfilePicture);
        }
    }
    return ok;
}

void AccountResponseBody::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_EmailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("email")), m_Email));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_OrganizationsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("organizations")), m_Organizations));
    }
    if(m_Profile_pictureIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("profile_picture")), m_Profile_picture));
    }
}

bool AccountResponseBody::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("email"))))
    {
        utility::string_t refVal_setEmail;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("email"))), refVal_setEmail );
        setEmail(refVal_setEmail);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("organizations"))))
    {
        std::vector<std::shared_ptr<OrganizationMembership>> refVal_setOrganizations;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("organizations"))), refVal_setOrganizations );
        setOrganizations(refVal_setOrganizations);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("profile_picture"))))
    {
        utility::string_t refVal_setProfilePicture;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("profile_picture"))), refVal_setProfilePicture );
        setProfilePicture(refVal_setProfilePicture);
    }
    return ok;
}

utility::string_t AccountResponseBody::getEmail() const
{
    return m_Email;
}

void AccountResponseBody::setEmail(const utility::string_t& value)
{
    m_Email = value;
    m_EmailIsSet = true;
}

bool AccountResponseBody::emailIsSet() const
{
    return m_EmailIsSet;
}

void AccountResponseBody::unsetEmail()
{
    m_EmailIsSet = false;
}
utility::string_t AccountResponseBody::getId() const
{
    return m_Id;
}

void AccountResponseBody::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool AccountResponseBody::idIsSet() const
{
    return m_IdIsSet;
}

void AccountResponseBody::unsetId()
{
    m_IdIsSet = false;
}
std::vector<std::shared_ptr<OrganizationMembership>>& AccountResponseBody::getOrganizations()
{
    return m_Organizations;
}

void AccountResponseBody::setOrganizations(const std::vector<std::shared_ptr<OrganizationMembership>>& value)
{
    m_Organizations = value;
    m_OrganizationsIsSet = true;
}

bool AccountResponseBody::organizationsIsSet() const
{
    return m_OrganizationsIsSet;
}

void AccountResponseBody::unsetOrganizations()
{
    m_OrganizationsIsSet = false;
}
utility::string_t AccountResponseBody::getProfilePicture() const
{
    return m_Profile_picture;
}

void AccountResponseBody::setProfilePicture(const utility::string_t& value)
{
    m_Profile_picture = value;
    m_Profile_pictureIsSet = true;
}

bool AccountResponseBody::profilePictureIsSet() const
{
    return m_Profile_pictureIsSet;
}

void AccountResponseBody::unsetProfile_picture()
{
    m_Profile_pictureIsSet = false;
}
}
}
}
}


