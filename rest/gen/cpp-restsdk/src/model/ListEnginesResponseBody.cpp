/**
 * Stability.ai REST API
 * Welcome to the Stability.ai REST API developer preview!  Please note, this is an alpha version of our new REST API, and is subject to change according to your feedback.  Feedback during this test is crucial for us to understand what the pain points are and how we can improve it going forward.  Changes will be communicated here, as well as on our online REST API documentation, which can be found at: https://api.stability.ai/docs  Your DreamStudio API key will be required for authentication. You can learn more about API keys here: https://platform.stability.ai/docs/getting-started/authentication  If you encounter any issues, please let us know in the #API discord channel: https://discord.gg/stablediffusion 
 *
 * The version of the OpenAPI document: 0.1
 * Contact: info@stability.ai
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ListEnginesResponseBody.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



ListEnginesResponseBody::ListEnginesResponseBody()
{
    m_EnginesIsSet = false;
}

ListEnginesResponseBody::~ListEnginesResponseBody()
{
}

void ListEnginesResponseBody::validate()
{
    // TODO: implement validation
}

web::json::value ListEnginesResponseBody::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_EnginesIsSet)
    {
        val[utility::conversions::to_string_t(U("engines"))] = ModelBase::toJson(m_Engines);
    }

    return val;
}

bool ListEnginesResponseBody::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("engines"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("engines")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Engine>> refVal_setEngines;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEngines);
            setEngines(refVal_setEngines);
        }
    }
    return ok;
}

void ListEnginesResponseBody::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_EnginesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("engines")), m_Engines));
    }
}

bool ListEnginesResponseBody::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("engines"))))
    {
        std::vector<std::shared_ptr<Engine>> refVal_setEngines;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("engines"))), refVal_setEngines );
        setEngines(refVal_setEngines);
    }
    return ok;
}

std::vector<std::shared_ptr<Engine>>& ListEnginesResponseBody::getEngines()
{
    return m_Engines;
}

void ListEnginesResponseBody::setEngines(const std::vector<std::shared_ptr<Engine>>& value)
{
    m_Engines = value;
    m_EnginesIsSet = true;
}

bool ListEnginesResponseBody::enginesIsSet() const
{
    return m_EnginesIsSet;
}

void ListEnginesResponseBody::unsetEngines()
{
    m_EnginesIsSet = false;
}
}
}
}
}


