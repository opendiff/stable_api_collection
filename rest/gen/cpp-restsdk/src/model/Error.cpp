/**
 * Stability.ai REST API
 * Welcome to the Stability.ai REST API developer preview!  Please note, this is an alpha version of our new REST API, and is subject to change according to your feedback.  Feedback during this test is crucial for us to understand what the pain points are and how we can improve it going forward.  Changes will be communicated here, as well as on our online REST API documentation, which can be found at: https://api.stability.ai/docs  Your DreamStudio API key will be required for authentication. You can learn more about API keys here: https://platform.stability.ai/docs/getting-started/authentication  If you encounter any issues, please let us know in the #API discord channel: https://discord.gg/stablediffusion 
 *
 * The version of the OpenAPI document: 0.1
 * Contact: info@stability.ai
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Error.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



Error::Error()
{
    m_Fault = false;
    m_FaultIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Message = utility::conversions::to_string_t("");
    m_MessageIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Temporary = false;
    m_TemporaryIsSet = false;
    m_Timeout = false;
    m_TimeoutIsSet = false;
}

Error::~Error()
{
}

void Error::validate()
{
    // TODO: implement validation
}

web::json::value Error::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_FaultIsSet)
    {
        val[utility::conversions::to_string_t(U("fault"))] = ModelBase::toJson(m_Fault);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_MessageIsSet)
    {
        val[utility::conversions::to_string_t(U("message"))] = ModelBase::toJson(m_Message);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_TemporaryIsSet)
    {
        val[utility::conversions::to_string_t(U("temporary"))] = ModelBase::toJson(m_Temporary);
    }
    if(m_TimeoutIsSet)
    {
        val[utility::conversions::to_string_t(U("timeout"))] = ModelBase::toJson(m_Timeout);
    }

    return val;
}

bool Error::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("fault"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fault")));
        if(!fieldValue.is_null())
        {
            bool refVal_setFault;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFault);
            setFault(refVal_setFault);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("message"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("message")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMessage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMessage);
            setMessage(refVal_setMessage);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("temporary"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("temporary")));
        if(!fieldValue.is_null())
        {
            bool refVal_setTemporary;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTemporary);
            setTemporary(refVal_setTemporary);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("timeout"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("timeout")));
        if(!fieldValue.is_null())
        {
            bool refVal_setTimeout;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimeout);
            setTimeout(refVal_setTimeout);
        }
    }
    return ok;
}

void Error::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_FaultIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fault")), m_Fault));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_MessageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("message")), m_Message));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_TemporaryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("temporary")), m_Temporary));
    }
    if(m_TimeoutIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("timeout")), m_Timeout));
    }
}

bool Error::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("fault"))))
    {
        bool refVal_setFault;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fault"))), refVal_setFault );
        setFault(refVal_setFault);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("message"))))
    {
        utility::string_t refVal_setMessage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("message"))), refVal_setMessage );
        setMessage(refVal_setMessage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("temporary"))))
    {
        bool refVal_setTemporary;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("temporary"))), refVal_setTemporary );
        setTemporary(refVal_setTemporary);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("timeout"))))
    {
        bool refVal_setTimeout;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("timeout"))), refVal_setTimeout );
        setTimeout(refVal_setTimeout);
    }
    return ok;
}

bool Error::isFault() const
{
    return m_Fault;
}

void Error::setFault(bool value)
{
    m_Fault = value;
    m_FaultIsSet = true;
}

bool Error::faultIsSet() const
{
    return m_FaultIsSet;
}

void Error::unsetFault()
{
    m_FaultIsSet = false;
}
utility::string_t Error::getId() const
{
    return m_Id;
}

void Error::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool Error::idIsSet() const
{
    return m_IdIsSet;
}

void Error::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t Error::getMessage() const
{
    return m_Message;
}

void Error::setMessage(const utility::string_t& value)
{
    m_Message = value;
    m_MessageIsSet = true;
}

bool Error::messageIsSet() const
{
    return m_MessageIsSet;
}

void Error::unsetMessage()
{
    m_MessageIsSet = false;
}
utility::string_t Error::getName() const
{
    return m_Name;
}

void Error::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool Error::nameIsSet() const
{
    return m_NameIsSet;
}

void Error::unsetName()
{
    m_NameIsSet = false;
}
bool Error::isTemporary() const
{
    return m_Temporary;
}

void Error::setTemporary(bool value)
{
    m_Temporary = value;
    m_TemporaryIsSet = true;
}

bool Error::temporaryIsSet() const
{
    return m_TemporaryIsSet;
}

void Error::unsetTemporary()
{
    m_TemporaryIsSet = false;
}
bool Error::isTimeout() const
{
    return m_Timeout;
}

void Error::setTimeout(bool value)
{
    m_Timeout = value;
    m_TimeoutIsSet = true;
}

bool Error::timeoutIsSet() const
{
    return m_TimeoutIsSet;
}

void Error::unsetTimeout()
{
    m_TimeoutIsSet = false;
}
}
}
}
}


