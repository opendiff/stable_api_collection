#import <Foundation/Foundation.h>
#import "OAIError.h"
#import "OAIImageToImageOptions.h"
#import "OAIMaskingOptions.h"
#import "OAITextToImageRequestBody.h"
#import "OAIApi.h"

/**
* Stability.ai REST API
* Welcome to the Stability.ai REST API developer preview!  Please note, this is an alpha version of our new REST API, and is subject to change according to your feedback.  Feedback during this test is crucial for us to understand what the pain points are and how we can improve it going forward.  Changes will be communicated here, as well as on our online REST API documentation, which can be found at: https://api.stability.ai/docs  Your DreamStudio API key will be required for authentication. You can learn more about API keys here: https://platform.stability.ai/docs/getting-started/authentication  If you encounter any issues, please let us know in the #API discord channel: https://discord.gg/stablediffusion 
*
* The version of the OpenAPI document: 0.1
* Contact: info@stability.ai
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/



@interface OAIV1alphaGenerationApi: NSObject <OAIApi>

extern NSString* kOAIV1alphaGenerationApiErrorDomain;
extern NSInteger kOAIV1alphaGenerationApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(OAIApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// image-to-image
/// Generate big fancy pictures from small fancy pictures
///
/// @param engineId  
/// @param accept  
/// @param initImage Initial image to use for the image-to-image generation
/// @param options 
/// @param organization Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)
/// 
///  code:200 message:"OK response.",
///  code:400 message:"bad_request:  - invalid_samples: Sample count may only be greater than 1 when accept header is set to `application/json` - invalid_height_or_width: Height and width must specified in increments of 64 - invalid_file_size: The file size of one or more of the provided files is invalid - invalid_mime_type: The mime type of one or more of the provided files is invalid - invalid_prompts: One or more of the prompts contains filtered words ",
///  code:401 message:"unauthorized: API key missing or invalid",
///  code:403 message:"permission_denied: You lack the necessary permissions to perform this action",
///  code:404 message:"not_found: The requested resource was not found (e.g. specifing a model that does not exist)"
///
/// @return void
-(NSURLSessionTask*) v1alphaGenerationImageToImageWithEngineId: (NSString*) engineId
    accept: (NSString*) accept
    initImage: (NSURL*) initImage
    options: (OAIImageToImageOptions*) options
    organization: (NSString*) organization
    completionHandler: (void (^)(NSError* error)) handler;


/// image-to-image/masking
/// Paint fancy things into fancy pictures
///
/// @param engineId  
/// @param accept  
/// @param initImage Initial image to use for the image-to-image generation
/// @param options 
/// @param organization Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)
/// @param maskImage Optional mask image to use for masking. Must be the same dimensions as the &#x60;init_image&#x60;. Use the &#x60;mask_source&#x60; option to specify whether the white or black pixels should be inpainted. (Note: if you set &#x60;mask_source&#x60; to &#x60;INIT_IMAGE_ALPHA&#x60; you can omit the &#x60;mask_image&#x60; parameter completely.) (optional)
/// 
///  code:200 message:"OK response.",
///  code:400 message:"bad_request:  - invalid_samples: Sample count may only be greater than 1 when accept header is set to `application/json` - invalid_height_or_width: Height and width must specified in increments of 64 - invalid_file_size: The file size of one or more of the provided files is invalid - invalid_mime_type: The mime type of one or more of the provided files is invalid - invalid_image_dimensions: The dimensions of the provided `init_image` and `mask_image` do not match - invalid_mask_image: The parameter `mask_source` was set to `MASK_IMAGE_WHITE` or `MASK_IMAGE_BLACK` but no `mask_image` was provided - invalid_prompts: One or more of the prompts contains filtered words ",
///  code:401 message:"unauthorized: API key missing or invalid",
///  code:403 message:"permission_denied: You lack the necessary permissions to perform this action",
///  code:404 message:"not_found: The requested resource was not found (e.g. specifing a model that does not exist)"
///
/// @return void
-(NSURLSessionTask*) v1alphaGenerationMaskingWithEngineId: (NSString*) engineId
    accept: (NSString*) accept
    initImage: (NSURL*) initImage
    options: (OAIMaskingOptions*) options
    organization: (NSString*) organization
    maskImage: (NSURL*) maskImage
    completionHandler: (void (^)(NSError* error)) handler;


/// text-to-image
/// Generate an image from text
///
/// @param engineId  
/// @param accept  
/// @param textToImageRequestBody 
/// @param organization Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)
/// 
///  code:200 message:"OK response.",
///  code:400 message:"bad_request:  - invalid_samples: Sample count may only be greater than 1 when accept header is set to `application/json` - invalid_height_or_width: Height and width must specified in increments of 64 - invalid_prompts: One or more of the prompts contains filtered words ",
///  code:401 message:"unauthorized: API key missing or invalid",
///  code:403 message:"permission_denied: You lack the necessary permissions to perform this action",
///  code:404 message:"not_found: The requested resource was not found (e.g. specifing a model that does not exist)"
///
/// @return void
-(NSURLSessionTask*) v1alphaGenerationTextToImageWithEngineId: (NSString*) engineId
    accept: (NSString*) accept
    textToImageRequestBody: (OAITextToImageRequestBody*) textToImageRequestBody
    organization: (NSString*) organization
    completionHandler: (void (^)(NSError* error)) handler;



@end
