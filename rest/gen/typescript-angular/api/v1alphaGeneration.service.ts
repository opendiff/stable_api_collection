/**
 * Stability.ai REST API
 * Welcome to the Stability.ai REST API developer preview!  Please note, this is an alpha version of our new REST API, and is subject to change according to your feedback.  Feedback during this test is crucial for us to understand what the pain points are and how we can improve it going forward.  Changes will be communicated here, as well as on our online REST API documentation, which can be found at: https://api.stability.ai/docs  Your DreamStudio API key will be required for authentication. You can learn more about API keys here: https://platform.stability.ai/docs/getting-started/authentication  If you encounter any issues, please let us know in the #API discord channel: https://discord.gg/stablediffusion 
 *
 * The version of the OpenAPI document: 0.1
 * Contact: info@stability.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { ImageToImageOptions } from '../model/imageToImageOptions';
// @ts-ignore
import { MaskingOptions } from '../model/maskingOptions';
// @ts-ignore
import { TextToImageRequestBody } from '../model/textToImageRequestBody';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';



@Injectable({
  providedIn: 'root'
})
export class V1alphaGenerationService {

    protected basePath = 'https://api.stability.ai';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }

    // @ts-ignore
    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, (value as Date).toISOString().substr(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * image-to-image
     * Generate big fancy pictures from small fancy pictures
     * @param engineId  
     * @param accept  
     * @param initImage Initial image to use for the image-to-image generation
     * @param options 
     * @param organization Optional: Allows for requests to be scoped to an organization other than the user\&#39;s default.  If not provided, the user\&#39;s default organization will be used.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v1alphaGenerationImageToImage(engineId: string, accept: 'image/png' | 'application/json', initImage: Blob, options: ImageToImageOptions, organization?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.goa.error', context?: HttpContext}): Observable<any>;
    public v1alphaGenerationImageToImage(engineId: string, accept: 'image/png' | 'application/json', initImage: Blob, options: ImageToImageOptions, organization?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.goa.error', context?: HttpContext}): Observable<HttpResponse<any>>;
    public v1alphaGenerationImageToImage(engineId: string, accept: 'image/png' | 'application/json', initImage: Blob, options: ImageToImageOptions, organization?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.goa.error', context?: HttpContext}): Observable<HttpEvent<any>>;
    public v1alphaGenerationImageToImage(engineId: string, accept: 'image/png' | 'application/json', initImage: Blob, options: ImageToImageOptions, organization?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/vnd.goa.error', context?: HttpContext}): Observable<any> {
        if (engineId === null || engineId === undefined) {
            throw new Error('Required parameter engineId was null or undefined when calling v1alphaGenerationImageToImage.');
        }
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling v1alphaGenerationImageToImage.');
        }
        if (initImage === null || initImage === undefined) {
            throw new Error('Required parameter initImage was null or undefined when calling v1alphaGenerationImageToImage.');
        }
        if (options === null || options === undefined) {
            throw new Error('Required parameter options was null or undefined when calling v1alphaGenerationImageToImage.');
        }

        let localVarHeaders = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            localVarHeaders = localVarHeaders.set('Accept', String(accept));
        }
        if (organization !== undefined && organization !== null) {
            localVarHeaders = localVarHeaders.set('Organization', String(organization));
        }

        let localVarCredential: string | undefined;
        // authentication (api_key_header_Authorization) required
        localVarCredential = this.configuration.lookupCredential('api_key_header_Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/vnd.goa.error'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let localVarFormParams: { append(param: string, value: any): any; };
        let localVarUseForm = false;
        let localVarConvertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        localVarUseForm = canConsumeForm;
        if (localVarUseForm) {
            localVarFormParams = new FormData();
        } else {
            localVarFormParams = new HttpParams({encoder: this.encoder});
        }

        if (initImage !== undefined) {
            localVarFormParams = localVarFormParams.append('init_image', <any>initImage) as any || localVarFormParams;
        }
        if (options !== undefined) {
            localVarFormParams = localVarFormParams.append('options', localVarUseForm ? new Blob([JSON.stringify(options)], {type: 'application/json'}) : <any>options) as any || localVarFormParams;
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        return this.httpClient.post<any>(`${this.configuration.basePath}/v1alpha/generation/${encodeURIComponent(String(engineId))}/image-to-image`,
            localVarConvertFormParamsToString ? localVarFormParams.toString() : localVarFormParams,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * image-to-image/masking
     * Paint fancy things into fancy pictures
     * @param engineId  
     * @param accept  
     * @param initImage Initial image to use for the image-to-image generation
     * @param options 
     * @param organization Optional: Allows for requests to be scoped to an organization other than the user\&#39;s default.  If not provided, the user\&#39;s default organization will be used.
     * @param maskImage Optional mask image to use for masking. Must be the same dimensions as the &#x60;init_image&#x60;. Use the &#x60;mask_source&#x60; option to specify whether the white or black pixels should be inpainted. (Note: if you set &#x60;mask_source&#x60; to &#x60;INIT_IMAGE_ALPHA&#x60; you can omit the &#x60;mask_image&#x60; parameter completely.)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v1alphaGenerationMasking(engineId: string, accept: 'image/png' | 'application/json', initImage: Blob, options: MaskingOptions, organization?: string, maskImage?: Blob, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.goa.error', context?: HttpContext}): Observable<any>;
    public v1alphaGenerationMasking(engineId: string, accept: 'image/png' | 'application/json', initImage: Blob, options: MaskingOptions, organization?: string, maskImage?: Blob, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.goa.error', context?: HttpContext}): Observable<HttpResponse<any>>;
    public v1alphaGenerationMasking(engineId: string, accept: 'image/png' | 'application/json', initImage: Blob, options: MaskingOptions, organization?: string, maskImage?: Blob, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.goa.error', context?: HttpContext}): Observable<HttpEvent<any>>;
    public v1alphaGenerationMasking(engineId: string, accept: 'image/png' | 'application/json', initImage: Blob, options: MaskingOptions, organization?: string, maskImage?: Blob, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/vnd.goa.error', context?: HttpContext}): Observable<any> {
        if (engineId === null || engineId === undefined) {
            throw new Error('Required parameter engineId was null or undefined when calling v1alphaGenerationMasking.');
        }
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling v1alphaGenerationMasking.');
        }
        if (initImage === null || initImage === undefined) {
            throw new Error('Required parameter initImage was null or undefined when calling v1alphaGenerationMasking.');
        }
        if (options === null || options === undefined) {
            throw new Error('Required parameter options was null or undefined when calling v1alphaGenerationMasking.');
        }

        let localVarHeaders = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            localVarHeaders = localVarHeaders.set('Accept', String(accept));
        }
        if (organization !== undefined && organization !== null) {
            localVarHeaders = localVarHeaders.set('Organization', String(organization));
        }

        let localVarCredential: string | undefined;
        // authentication (api_key_header_Authorization) required
        localVarCredential = this.configuration.lookupCredential('api_key_header_Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/vnd.goa.error'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let localVarFormParams: { append(param: string, value: any): any; };
        let localVarUseForm = false;
        let localVarConvertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        localVarUseForm = canConsumeForm;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        localVarUseForm = canConsumeForm;
        if (localVarUseForm) {
            localVarFormParams = new FormData();
        } else {
            localVarFormParams = new HttpParams({encoder: this.encoder});
        }

        if (initImage !== undefined) {
            localVarFormParams = localVarFormParams.append('init_image', <any>initImage) as any || localVarFormParams;
        }
        if (maskImage !== undefined) {
            localVarFormParams = localVarFormParams.append('mask_image', <any>maskImage) as any || localVarFormParams;
        }
        if (options !== undefined) {
            localVarFormParams = localVarFormParams.append('options', localVarUseForm ? new Blob([JSON.stringify(options)], {type: 'application/json'}) : <any>options) as any || localVarFormParams;
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        return this.httpClient.post<any>(`${this.configuration.basePath}/v1alpha/generation/${encodeURIComponent(String(engineId))}/image-to-image/masking`,
            localVarConvertFormParamsToString ? localVarFormParams.toString() : localVarFormParams,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * text-to-image
     * Generate an image from text
     * @param engineId  
     * @param accept  
     * @param textToImageRequestBody 
     * @param organization Optional: Allows for requests to be scoped to an organization other than the user\&#39;s default.  If not provided, the user\&#39;s default organization will be used.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v1alphaGenerationTextToImage(engineId: string, accept: 'image/png' | 'application/json', textToImageRequestBody: TextToImageRequestBody, organization?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.goa.error', context?: HttpContext}): Observable<any>;
    public v1alphaGenerationTextToImage(engineId: string, accept: 'image/png' | 'application/json', textToImageRequestBody: TextToImageRequestBody, organization?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.goa.error', context?: HttpContext}): Observable<HttpResponse<any>>;
    public v1alphaGenerationTextToImage(engineId: string, accept: 'image/png' | 'application/json', textToImageRequestBody: TextToImageRequestBody, organization?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.goa.error', context?: HttpContext}): Observable<HttpEvent<any>>;
    public v1alphaGenerationTextToImage(engineId: string, accept: 'image/png' | 'application/json', textToImageRequestBody: TextToImageRequestBody, organization?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/vnd.goa.error', context?: HttpContext}): Observable<any> {
        if (engineId === null || engineId === undefined) {
            throw new Error('Required parameter engineId was null or undefined when calling v1alphaGenerationTextToImage.');
        }
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling v1alphaGenerationTextToImage.');
        }
        if (textToImageRequestBody === null || textToImageRequestBody === undefined) {
            throw new Error('Required parameter textToImageRequestBody was null or undefined when calling v1alphaGenerationTextToImage.');
        }

        let localVarHeaders = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            localVarHeaders = localVarHeaders.set('Accept', String(accept));
        }
        if (organization !== undefined && organization !== null) {
            localVarHeaders = localVarHeaders.set('Organization', String(organization));
        }

        let localVarCredential: string | undefined;
        // authentication (api_key_header_Authorization) required
        localVarCredential = this.configuration.lookupCredential('api_key_header_Authorization');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/vnd.goa.error'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        return this.httpClient.post<any>(`${this.configuration.basePath}/v1alpha/generation/${encodeURIComponent(String(engineId))}/text-to-image`,
            textToImageRequestBody,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
