{-
   Stability.ai REST API
   Welcome to the Stability.ai REST API developer preview!  Please note, this is an alpha version of our new REST API, and is subject to change according to your feedback.  Feedback during this test is crucial for us to understand what the pain points are and how we can improve it going forward.  Changes will be communicated here, as well as on our online REST API documentation, which can be found at: https://api.stability.ai/docs  Your DreamStudio API key will be required for authentication. You can learn more about API keys here: https://platform.stability.ai/docs/getting-started/authentication  If you encounter any issues, please let us know in the #API discord channel: https://discord.gg/stablediffusion 

   The version of the OpenAPI document: 0.1
   Contact: info@stability.ai

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git

   DO NOT EDIT THIS FILE MANUALLY.

   For more info on generating Elm code, see https://eriktim.github.io/openapi-elm/
-}


module Api.Request.V1alphaGeneration exposing
    ( v1alphaGenerationImageToImage, Accept(..), acceptVariants
    , v1alphaGenerationMasking, Accept(..), acceptVariants
    , v1alphaGenerationTextToImage, Accept(..), acceptVariants
    )

import Api
import Api.Data
import Dict
import Http
import Json.Decode
import Json.Encode


type Accept
    = AcceptImagePng
    | AcceptApplicationJson


acceptVariants : List Accept
acceptVariants =
    [ AcceptImagePng
    , AcceptApplicationJson
    ]


stringFromAccept : Accept -> String
stringFromAccept model =
    case model of
        AcceptImagePng ->
            "image/png"

        AcceptApplicationJson ->
            "application/json"




type Accept
    = AcceptImagePng
    | AcceptApplicationJson


acceptVariants : List Accept
acceptVariants =
    [ AcceptImagePng
    , AcceptApplicationJson
    ]


stringFromAccept : Accept -> String
stringFromAccept model =
    case model of
        AcceptImagePng ->
            "image/png"

        AcceptApplicationJson ->
            "application/json"




type Accept
    = AcceptImagePng
    | AcceptApplicationJson


acceptVariants : List Accept
acceptVariants =
    [ AcceptImagePng
    , AcceptApplicationJson
    ]


stringFromAccept : Accept -> String
stringFromAccept model =
    case model of
        AcceptImagePng ->
            "image/png"

        AcceptApplicationJson ->
            "application/json"





{-| Generate big fancy pictures from small fancy pictures
-}
v1alphaGenerationImageToImage : String -> Accept -> Maybe String -> String -> Api.Data.ImageToImageOptions -> Api.Request ()
v1alphaGenerationImageToImage engineId_path accept_header organization_header initImage options =
    Api.request
        "POST"
        "/v1alpha/generation/{engine_id}/image-to-image"
        [ ( "engineId", identity engineId_path ) ]
        []
        [ ( "Accept", Just <| stringFromAccept accept_header ), ( "Organization", Maybe.map identity organization_header ) ]
        Nothing
        (Json.Decode.succeed ())



{-| Paint fancy things into fancy pictures
-}
v1alphaGenerationMasking : String -> Accept -> Maybe String -> String -> Api.Data.MaskingOptions -> Maybe String -> Api.Request ()
v1alphaGenerationMasking engineId_path accept_header organization_header initImage options maskImage =
    Api.request
        "POST"
        "/v1alpha/generation/{engine_id}/image-to-image/masking"
        [ ( "engineId", identity engineId_path ) ]
        []
        [ ( "Accept", Just <| stringFromAccept accept_header ), ( "Organization", Maybe.map identity organization_header ) ]
        Nothing
        (Json.Decode.succeed ())



{-| Generate an image from text
-}
v1alphaGenerationTextToImage : String -> Accept -> Maybe String -> Api.Data.TextToImageRequestBody -> Api.Request ()
v1alphaGenerationTextToImage engineId_path accept_header organization_header textToImageRequestBody_body =
    Api.request
        "POST"
        "/v1alpha/generation/{engine_id}/text-to-image"
        [ ( "engineId", identity engineId_path ) ]
        []
        [ ( "Accept", Just <| stringFromAccept accept_header ), ( "Organization", Maybe.map identity organization_header ) ]
        (Just (Api.Data.encodeTextToImageRequestBody textToImageRequestBody_body))
        (Json.Decode.succeed ())
