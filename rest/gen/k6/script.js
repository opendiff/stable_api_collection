/*
 * Stability.ai REST API
 * Welcome to the Stability.ai REST API developer preview!  Please note, this is an alpha version of our new REST API, and is subject to change according to your feedback.  Feedback during this test is crucial for us to understand what the pain points are and how we can improve it going forward.  Changes will be communicated here, as well as on our online REST API documentation, which can be found at: https://api.stability.ai/docs  Your DreamStudio API key will be required for authentication. You can learn more about API keys here: https://platform.stability.ai/docs/getting-started/authentication  If you encounter any issues, please let us know in the #API discord channel: https://discord.gg/stablediffusion 
 *
 * OpenAPI spec version: 0.1
 * Contact: info@stability.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://github.com/OpenAPITools/openapi-generator
 *
 * OpenAPI generator version: 7.0.0-SNAPSHOT
 */


import http from "k6/http";
import { group, check, sleep } from "k6";

const BASE_URL = "https://api.stability.ai";
// Sleep duration between successive requests.
// You might want to edit the value of this variable or remove calls to the sleep function on the script.
const SLEEP_DURATION = 0.1;
// Global variables should be initialized.
let organization = "TODO_EDIT_THE_ORGANIZATION";
let accept = "TODO_EDIT_THE_ACCEPT";

export default function() {
    group("/v1alpha/generation/{engine_id}/text-to-image", () => {
        let engineId = 'stable-diffusion-512-v2-0'; // extracted from 'example' field defined at the parameter level of OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/v1alpha/generation/${engine_id}/text-to-image`;
            // TODO: edit the parameters of the request body.
            let body = {"cfgScale": "bigdecimal", "clipGuidancePreset": "string", "height": "integer", "sampler": "string", "samples": "integer", "seed": "integer", "steps": "integer", "textPrompts": "list", "width": "integer"};
            let params = {headers: {"Content-Type": "application/json", "Accept": `${accept}`, "Organization": `${organization}`, "Accept": "application/vnd.goa.error"}};
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "OK response.": (r) => r.status === 200
            });
        }
    });

    group("/v1alpha/user/account", () => {

        // Request No. 1
        {
            let url = BASE_URL + `/v1alpha/user/account`;
            let request = http.get(url);

            check(request, {
                "OK response.": (r) => r.status === 200
            });
        }
    });

    group("/v1alpha/user/balance", () => {

        // Request No. 1
        {
            let url = BASE_URL + `/v1alpha/user/balance`;
            let params = {headers: {"Organization": `${organization}`, "Accept": "application/json"}};
            let request = http.get(url, params);

            check(request, {
                "OK response.": (r) => r.status === 200
            });
        }
    });

    group("/v1alpha/engines/list", () => {

        // Request No. 1
        {
            let url = BASE_URL + `/v1alpha/engines/list`;
            let params = {headers: {"Organization": `${organization}`, "Accept": "application/json"}};
            let request = http.get(url, params);

            check(request, {
                "OK response.": (r) => r.status === 200
            });
        }
    });

    group("/v1alpha/generation/{engine_id}/image-to-image/masking", () => {
        let engineId = 'stable-diffusion-512-v2-0'; // extracted from 'example' field defined at the parameter level of OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/v1alpha/generation/${engine_id}/image-to-image/masking`;
            // TODO: edit the parameters of the request body.
            let body = {"initImage": http.file(open("/path/to/file.bin", "b"), "test.bin"), "maskImage": http.file(open("/path/to/file.bin", "b"), "test.bin"), "options": {"cfgScale": "bigdecimal", "clipGuidancePreset": "string", "height": "integer", "maskSource": "string", "sampler": "string", "samples": "integer", "seed": "integer", "steps": "integer", "textPrompts": "list", "width": "integer"}};
            let params = {headers: {"Content-Type": "multipart/form-data", "Accept": `${accept}`, "Organization": `${organization}`, "Accept": "application/vnd.goa.error"}};
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "OK response.": (r) => r.status === 200
            });
        }
    });

    group("/v1alpha/generation/{engine_id}/image-to-image", () => {
        let engineId = 'stable-diffusion-512-v2-0'; // extracted from 'example' field defined at the parameter level of OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/v1alpha/generation/${engine_id}/image-to-image`;
            // TODO: edit the parameters of the request body.
            let body = {"initImage": http.file(open("/path/to/file.bin", "b"), "test.bin"), "options": {"cfgScale": "bigdecimal", "clipGuidancePreset": "string", "height": "integer", "sampler": "string", "samples": "integer", "seed": "integer", "stepScheduleEnd": "bigdecimal", "stepScheduleStart": "bigdecimal", "steps": "integer", "textPrompts": "list", "width": "integer"}};
            let params = {headers: {"Content-Type": "multipart/form-data", "Accept": `${accept}`, "Organization": `${organization}`, "Accept": "application/vnd.goa.error"}};
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "OK response.": (r) => r.status === 200
            });
        }
    });

}
