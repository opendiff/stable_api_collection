/**
 * Stability.ai REST API
 * Welcome to the Stability.ai REST API developer preview!  Please note, this is an alpha version of our new REST API, and is subject to change according to your feedback.  Feedback during this test is crucial for us to understand what the pain points are and how we can improve it going forward.  Changes will be communicated here, as well as on our online REST API documentation, which can be found at: https://api.stability.ai/docs  Your DreamStudio API key will be required for authentication. You can learn more about API keys here: https://platform.stability.ai/docs/getting-started/authentication  If you encounter any issues, please let us know in the #API discord channel: https://discord.gg/stablediffusion 
 *
 * The version of the OpenAPI document: 0.1
 * Contact: info@stability.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import ImageToImageOptions from '../model/ImageToImageOptions';
import MaskingOptions from '../model/MaskingOptions';
import TextToImageRequestBody from '../model/TextToImageRequestBody';

/**
* V1alphaGeneration service.
* @module api/V1alphaGenerationApi
* @version 0.1
*/
export default class V1alphaGenerationApi {

    /**
    * Constructs a new V1alphaGenerationApi. 
    * @alias module:api/V1alphaGenerationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v1alphaGenerationImageToImage operation.
     * @callback module:api/V1alphaGenerationApi~v1alphaGenerationImageToImageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * image-to-image
     * Generate big fancy pictures from small fancy pictures
     * @param {String} engineId  
     * @param {module:model/String} accept  
     * @param {File} initImage Initial image to use for the image-to-image generation
     * @param {module:model/ImageToImageOptions} options 
     * @param {Object} opts Optional parameters
     * @param {String} opts.organization Optional: Allows for requests to be scoped to an organization other than the user's default.  If not provided, the user's default organization will be used.
     * @param {module:api/V1alphaGenerationApi~v1alphaGenerationImageToImageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v1alphaGenerationImageToImage(engineId, accept, initImage, options, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'engineId' is set
      if (engineId === undefined || engineId === null) {
        throw new Error("Missing the required parameter 'engineId' when calling v1alphaGenerationImageToImage");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling v1alphaGenerationImageToImage");
      }
      // verify the required parameter 'initImage' is set
      if (initImage === undefined || initImage === null) {
        throw new Error("Missing the required parameter 'initImage' when calling v1alphaGenerationImageToImage");
      }
      // verify the required parameter 'options' is set
      if (options === undefined || options === null) {
        throw new Error("Missing the required parameter 'options' when calling v1alphaGenerationImageToImage");
      }

      let pathParams = {
        'engine_id': engineId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Organization': opts['organization']
      };
      let formParams = {
        'init_image': initImage,
        'options': options
      };

      let authNames = ['api_key_header_Authorization'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/vnd.goa.error'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1alpha/generation/{engine_id}/image-to-image', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1alphaGenerationMasking operation.
     * @callback module:api/V1alphaGenerationApi~v1alphaGenerationMaskingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * image-to-image/masking
     * Paint fancy things into fancy pictures
     * @param {String} engineId  
     * @param {module:model/String} accept  
     * @param {File} initImage Initial image to use for the image-to-image generation
     * @param {module:model/MaskingOptions} options 
     * @param {Object} opts Optional parameters
     * @param {String} opts.organization Optional: Allows for requests to be scoped to an organization other than the user's default.  If not provided, the user's default organization will be used.
     * @param {File} opts.maskImage Optional mask image to use for masking. Must be the same dimensions as the `init_image`. Use the `mask_source` option to specify whether the white or black pixels should be inpainted. (Note: if you set `mask_source` to `INIT_IMAGE_ALPHA` you can omit the `mask_image` parameter completely.)
     * @param {module:api/V1alphaGenerationApi~v1alphaGenerationMaskingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v1alphaGenerationMasking(engineId, accept, initImage, options, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'engineId' is set
      if (engineId === undefined || engineId === null) {
        throw new Error("Missing the required parameter 'engineId' when calling v1alphaGenerationMasking");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling v1alphaGenerationMasking");
      }
      // verify the required parameter 'initImage' is set
      if (initImage === undefined || initImage === null) {
        throw new Error("Missing the required parameter 'initImage' when calling v1alphaGenerationMasking");
      }
      // verify the required parameter 'options' is set
      if (options === undefined || options === null) {
        throw new Error("Missing the required parameter 'options' when calling v1alphaGenerationMasking");
      }

      let pathParams = {
        'engine_id': engineId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Organization': opts['organization']
      };
      let formParams = {
        'init_image': initImage,
        'mask_image': opts['maskImage'],
        'options': options
      };

      let authNames = ['api_key_header_Authorization'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/vnd.goa.error'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1alpha/generation/{engine_id}/image-to-image/masking', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1alphaGenerationTextToImage operation.
     * @callback module:api/V1alphaGenerationApi~v1alphaGenerationTextToImageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * text-to-image
     * Generate an image from text
     * @param {String} engineId  
     * @param {module:model/String} accept  
     * @param {module:model/TextToImageRequestBody} textToImageRequestBody 
     * @param {Object} opts Optional parameters
     * @param {String} opts.organization Optional: Allows for requests to be scoped to an organization other than the user's default.  If not provided, the user's default organization will be used.
     * @param {module:api/V1alphaGenerationApi~v1alphaGenerationTextToImageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v1alphaGenerationTextToImage(engineId, accept, textToImageRequestBody, opts, callback) {
      opts = opts || {};
      let postBody = textToImageRequestBody;
      // verify the required parameter 'engineId' is set
      if (engineId === undefined || engineId === null) {
        throw new Error("Missing the required parameter 'engineId' when calling v1alphaGenerationTextToImage");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling v1alphaGenerationTextToImage");
      }
      // verify the required parameter 'textToImageRequestBody' is set
      if (textToImageRequestBody === undefined || textToImageRequestBody === null) {
        throw new Error("Missing the required parameter 'textToImageRequestBody' when calling v1alphaGenerationTextToImage");
      }

      let pathParams = {
        'engine_id': engineId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Organization': opts['organization']
      };
      let formParams = {
      };

      let authNames = ['api_key_header_Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/vnd.goa.error'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1alpha/generation/{engine_id}/text-to-image', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
