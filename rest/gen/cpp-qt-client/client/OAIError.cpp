/**
 * Stability.ai REST API
 * Welcome to the Stability.ai REST API developer preview!  Please note, this is an alpha version of our new REST API, and is subject to change according to your feedback.  Feedback during this test is crucial for us to understand what the pain points are and how we can improve it going forward.  Changes will be communicated here, as well as on our online REST API documentation, which can be found at: https://api.stability.ai/docs  Your DreamStudio API key will be required for authentication. You can learn more about API keys here: https://platform.stability.ai/docs/getting-started/authentication  If you encounter any issues, please let us know in the #API discord channel: https://discord.gg/stablediffusion 
 *
 * The version of the OpenAPI document: 0.1
 * Contact: info@stability.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIError::OAIError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIError::OAIError() {
    this->initializeModel();
}

OAIError::~OAIError() {}

void OAIError::initializeModel() {

    m_fault_isSet = false;
    m_fault_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_temporary_isSet = false;
    m_temporary_isValid = false;

    m_timeout_isSet = false;
    m_timeout_isValid = false;
}

void OAIError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIError::fromJsonObject(QJsonObject json) {

    m_fault_isValid = ::OpenAPI::fromJsonValue(fault, json[QString("fault")]);
    m_fault_isSet = !json[QString("fault")].isNull() && m_fault_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_temporary_isValid = ::OpenAPI::fromJsonValue(temporary, json[QString("temporary")]);
    m_temporary_isSet = !json[QString("temporary")].isNull() && m_temporary_isValid;

    m_timeout_isValid = ::OpenAPI::fromJsonValue(timeout, json[QString("timeout")]);
    m_timeout_isSet = !json[QString("timeout")].isNull() && m_timeout_isValid;
}

QString OAIError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIError::asJsonObject() const {
    QJsonObject obj;
    if (m_fault_isSet) {
        obj.insert(QString("fault"), ::OpenAPI::toJsonValue(fault));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(message));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(name));
    }
    if (m_temporary_isSet) {
        obj.insert(QString("temporary"), ::OpenAPI::toJsonValue(temporary));
    }
    if (m_timeout_isSet) {
        obj.insert(QString("timeout"), ::OpenAPI::toJsonValue(timeout));
    }
    return obj;
}

bool OAIError::isFault() const {
    return fault;
}
void OAIError::setFault(const bool &fault) {
    this->fault = fault;
    this->m_fault_isSet = true;
}

bool OAIError::is_fault_Set() const{
    return m_fault_isSet;
}

bool OAIError::is_fault_Valid() const{
    return m_fault_isValid;
}

QString OAIError::getId() const {
    return id;
}
void OAIError::setId(const QString &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool OAIError::is_id_Set() const{
    return m_id_isSet;
}

bool OAIError::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIError::getMessage() const {
    return message;
}
void OAIError::setMessage(const QString &message) {
    this->message = message;
    this->m_message_isSet = true;
}

bool OAIError::is_message_Set() const{
    return m_message_isSet;
}

bool OAIError::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIError::getName() const {
    return name;
}
void OAIError::setName(const QString &name) {
    this->name = name;
    this->m_name_isSet = true;
}

bool OAIError::is_name_Set() const{
    return m_name_isSet;
}

bool OAIError::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIError::isTemporary() const {
    return temporary;
}
void OAIError::setTemporary(const bool &temporary) {
    this->temporary = temporary;
    this->m_temporary_isSet = true;
}

bool OAIError::is_temporary_Set() const{
    return m_temporary_isSet;
}

bool OAIError::is_temporary_Valid() const{
    return m_temporary_isValid;
}

bool OAIError::isTimeout() const {
    return timeout;
}
void OAIError::setTimeout(const bool &timeout) {
    this->timeout = timeout;
    this->m_timeout_isSet = true;
}

bool OAIError::is_timeout_Set() const{
    return m_timeout_isSet;
}

bool OAIError::is_timeout_Valid() const{
    return m_timeout_isValid;
}

bool OAIError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fault_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_temporary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIError::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_fault_isValid && m_id_isValid && m_message_isValid && m_name_isValid && m_temporary_isValid && m_timeout_isValid && true;
}

} // namespace OpenAPI
