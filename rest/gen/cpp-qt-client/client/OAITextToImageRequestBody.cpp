/**
 * Stability.ai REST API
 * Welcome to the Stability.ai REST API developer preview!  Please note, this is an alpha version of our new REST API, and is subject to change according to your feedback.  Feedback during this test is crucial for us to understand what the pain points are and how we can improve it going forward.  Changes will be communicated here, as well as on our online REST API documentation, which can be found at: https://api.stability.ai/docs  Your DreamStudio API key will be required for authentication. You can learn more about API keys here: https://platform.stability.ai/docs/getting-started/authentication  If you encounter any issues, please let us know in the #API discord channel: https://discord.gg/stablediffusion 
 *
 * The version of the OpenAPI document: 0.1
 * Contact: info@stability.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITextToImageRequestBody.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITextToImageRequestBody::OAITextToImageRequestBody(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITextToImageRequestBody::OAITextToImageRequestBody() {
    this->initializeModel();
}

OAITextToImageRequestBody::~OAITextToImageRequestBody() {}

void OAITextToImageRequestBody::initializeModel() {

    m_cfg_scale_isSet = false;
    m_cfg_scale_isValid = false;

    m_clip_guidance_preset_isSet = false;
    m_clip_guidance_preset_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_sampler_isSet = false;
    m_sampler_isValid = false;

    m_samples_isSet = false;
    m_samples_isValid = false;

    m_seed_isSet = false;
    m_seed_isValid = false;

    m_steps_isSet = false;
    m_steps_isValid = false;

    m_text_prompts_isSet = false;
    m_text_prompts_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAITextToImageRequestBody::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITextToImageRequestBody::fromJsonObject(QJsonObject json) {

    m_cfg_scale_isValid = ::OpenAPI::fromJsonValue(cfg_scale, json[QString("cfg_scale")]);
    m_cfg_scale_isSet = !json[QString("cfg_scale")].isNull() && m_cfg_scale_isValid;

    m_clip_guidance_preset_isValid = ::OpenAPI::fromJsonValue(clip_guidance_preset, json[QString("clip_guidance_preset")]);
    m_clip_guidance_preset_isSet = !json[QString("clip_guidance_preset")].isNull() && m_clip_guidance_preset_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_sampler_isValid = ::OpenAPI::fromJsonValue(sampler, json[QString("sampler")]);
    m_sampler_isSet = !json[QString("sampler")].isNull() && m_sampler_isValid;

    m_samples_isValid = ::OpenAPI::fromJsonValue(samples, json[QString("samples")]);
    m_samples_isSet = !json[QString("samples")].isNull() && m_samples_isValid;

    m_seed_isValid = ::OpenAPI::fromJsonValue(seed, json[QString("seed")]);
    m_seed_isSet = !json[QString("seed")].isNull() && m_seed_isValid;

    m_steps_isValid = ::OpenAPI::fromJsonValue(steps, json[QString("steps")]);
    m_steps_isSet = !json[QString("steps")].isNull() && m_steps_isValid;

    m_text_prompts_isValid = ::OpenAPI::fromJsonValue(text_prompts, json[QString("text_prompts")]);
    m_text_prompts_isSet = !json[QString("text_prompts")].isNull() && m_text_prompts_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAITextToImageRequestBody::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITextToImageRequestBody::asJsonObject() const {
    QJsonObject obj;
    if (m_cfg_scale_isSet) {
        obj.insert(QString("cfg_scale"), ::OpenAPI::toJsonValue(cfg_scale));
    }
    if (m_clip_guidance_preset_isSet) {
        obj.insert(QString("clip_guidance_preset"), ::OpenAPI::toJsonValue(clip_guidance_preset));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(height));
    }
    if (m_sampler_isSet) {
        obj.insert(QString("sampler"), ::OpenAPI::toJsonValue(sampler));
    }
    if (m_samples_isSet) {
        obj.insert(QString("samples"), ::OpenAPI::toJsonValue(samples));
    }
    if (m_seed_isSet) {
        obj.insert(QString("seed"), ::OpenAPI::toJsonValue(seed));
    }
    if (m_steps_isSet) {
        obj.insert(QString("steps"), ::OpenAPI::toJsonValue(steps));
    }
    if (text_prompts.size() > 0) {
        obj.insert(QString("text_prompts"), ::OpenAPI::toJsonValue(text_prompts));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(width));
    }
    return obj;
}

double OAITextToImageRequestBody::getCfgScale() const {
    return cfg_scale;
}
void OAITextToImageRequestBody::setCfgScale(const double &cfg_scale) {
    this->cfg_scale = cfg_scale;
    this->m_cfg_scale_isSet = true;
}

bool OAITextToImageRequestBody::is_cfg_scale_Set() const{
    return m_cfg_scale_isSet;
}

bool OAITextToImageRequestBody::is_cfg_scale_Valid() const{
    return m_cfg_scale_isValid;
}

QString OAITextToImageRequestBody::getClipGuidancePreset() const {
    return clip_guidance_preset;
}
void OAITextToImageRequestBody::setClipGuidancePreset(const QString &clip_guidance_preset) {
    this->clip_guidance_preset = clip_guidance_preset;
    this->m_clip_guidance_preset_isSet = true;
}

bool OAITextToImageRequestBody::is_clip_guidance_preset_Set() const{
    return m_clip_guidance_preset_isSet;
}

bool OAITextToImageRequestBody::is_clip_guidance_preset_Valid() const{
    return m_clip_guidance_preset_isValid;
}

qint32 OAITextToImageRequestBody::getHeight() const {
    return height;
}
void OAITextToImageRequestBody::setHeight(const qint32 &height) {
    this->height = height;
    this->m_height_isSet = true;
}

bool OAITextToImageRequestBody::is_height_Set() const{
    return m_height_isSet;
}

bool OAITextToImageRequestBody::is_height_Valid() const{
    return m_height_isValid;
}

QString OAITextToImageRequestBody::getSampler() const {
    return sampler;
}
void OAITextToImageRequestBody::setSampler(const QString &sampler) {
    this->sampler = sampler;
    this->m_sampler_isSet = true;
}

bool OAITextToImageRequestBody::is_sampler_Set() const{
    return m_sampler_isSet;
}

bool OAITextToImageRequestBody::is_sampler_Valid() const{
    return m_sampler_isValid;
}

qint32 OAITextToImageRequestBody::getSamples() const {
    return samples;
}
void OAITextToImageRequestBody::setSamples(const qint32 &samples) {
    this->samples = samples;
    this->m_samples_isSet = true;
}

bool OAITextToImageRequestBody::is_samples_Set() const{
    return m_samples_isSet;
}

bool OAITextToImageRequestBody::is_samples_Valid() const{
    return m_samples_isValid;
}

qint32 OAITextToImageRequestBody::getSeed() const {
    return seed;
}
void OAITextToImageRequestBody::setSeed(const qint32 &seed) {
    this->seed = seed;
    this->m_seed_isSet = true;
}

bool OAITextToImageRequestBody::is_seed_Set() const{
    return m_seed_isSet;
}

bool OAITextToImageRequestBody::is_seed_Valid() const{
    return m_seed_isValid;
}

qint32 OAITextToImageRequestBody::getSteps() const {
    return steps;
}
void OAITextToImageRequestBody::setSteps(const qint32 &steps) {
    this->steps = steps;
    this->m_steps_isSet = true;
}

bool OAITextToImageRequestBody::is_steps_Set() const{
    return m_steps_isSet;
}

bool OAITextToImageRequestBody::is_steps_Valid() const{
    return m_steps_isValid;
}

QList<OAITextPrompt> OAITextToImageRequestBody::getTextPrompts() const {
    return text_prompts;
}
void OAITextToImageRequestBody::setTextPrompts(const QList<OAITextPrompt> &text_prompts) {
    this->text_prompts = text_prompts;
    this->m_text_prompts_isSet = true;
}

bool OAITextToImageRequestBody::is_text_prompts_Set() const{
    return m_text_prompts_isSet;
}

bool OAITextToImageRequestBody::is_text_prompts_Valid() const{
    return m_text_prompts_isValid;
}

qint32 OAITextToImageRequestBody::getWidth() const {
    return width;
}
void OAITextToImageRequestBody::setWidth(const qint32 &width) {
    this->width = width;
    this->m_width_isSet = true;
}

bool OAITextToImageRequestBody::is_width_Set() const{
    return m_width_isSet;
}

bool OAITextToImageRequestBody::is_width_Valid() const{
    return m_width_isValid;
}

bool OAITextToImageRequestBody::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cfg_scale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_clip_guidance_preset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sampler_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_samples_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_steps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (text_prompts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITextToImageRequestBody::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_text_prompts_isValid && true;
}

} // namespace OpenAPI
