/**
 * Stability.ai REST API
 * Welcome to the Stability.ai REST API developer preview!  Please note, this is an alpha version of our new REST API, and is subject to change according to your feedback.  Feedback during this test is crucial for us to understand what the pain points are and how we can improve it going forward.  Changes will be communicated here, as well as on our online REST API documentation, which can be found at: https://api.stability.ai/docs  Your DreamStudio API key will be required for authentication. You can learn more about API keys here: https://platform.stability.ai/docs/getting-started/authentication  If you encounter any issues, please let us know in the #API discord channel: https://discord.gg/stablediffusion 
 *
 * The version of the OpenAPI document: 0.1
 * Contact: info@stability.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountResponseBody.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountResponseBody::OAIAccountResponseBody(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountResponseBody::OAIAccountResponseBody() {
    this->initializeModel();
}

OAIAccountResponseBody::~OAIAccountResponseBody() {}

void OAIAccountResponseBody::initializeModel() {

    m_email_isSet = false;
    m_email_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_organizations_isSet = false;
    m_organizations_isValid = false;

    m_profile_picture_isSet = false;
    m_profile_picture_isValid = false;
}

void OAIAccountResponseBody::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountResponseBody::fromJsonObject(QJsonObject json) {

    m_email_isValid = ::OpenAPI::fromJsonValue(email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_organizations_isValid = ::OpenAPI::fromJsonValue(organizations, json[QString("organizations")]);
    m_organizations_isSet = !json[QString("organizations")].isNull() && m_organizations_isValid;

    m_profile_picture_isValid = ::OpenAPI::fromJsonValue(profile_picture, json[QString("profile_picture")]);
    m_profile_picture_isSet = !json[QString("profile_picture")].isNull() && m_profile_picture_isValid;
}

QString OAIAccountResponseBody::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountResponseBody::asJsonObject() const {
    QJsonObject obj;
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(email));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
    if (organizations.size() > 0) {
        obj.insert(QString("organizations"), ::OpenAPI::toJsonValue(organizations));
    }
    if (m_profile_picture_isSet) {
        obj.insert(QString("profile_picture"), ::OpenAPI::toJsonValue(profile_picture));
    }
    return obj;
}

QString OAIAccountResponseBody::getEmail() const {
    return email;
}
void OAIAccountResponseBody::setEmail(const QString &email) {
    this->email = email;
    this->m_email_isSet = true;
}

bool OAIAccountResponseBody::is_email_Set() const{
    return m_email_isSet;
}

bool OAIAccountResponseBody::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIAccountResponseBody::getId() const {
    return id;
}
void OAIAccountResponseBody::setId(const QString &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool OAIAccountResponseBody::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAccountResponseBody::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIOrganizationMembership> OAIAccountResponseBody::getOrganizations() const {
    return organizations;
}
void OAIAccountResponseBody::setOrganizations(const QList<OAIOrganizationMembership> &organizations) {
    this->organizations = organizations;
    this->m_organizations_isSet = true;
}

bool OAIAccountResponseBody::is_organizations_Set() const{
    return m_organizations_isSet;
}

bool OAIAccountResponseBody::is_organizations_Valid() const{
    return m_organizations_isValid;
}

QString OAIAccountResponseBody::getProfilePicture() const {
    return profile_picture;
}
void OAIAccountResponseBody::setProfilePicture(const QString &profile_picture) {
    this->profile_picture = profile_picture;
    this->m_profile_picture_isSet = true;
}

bool OAIAccountResponseBody::is_profile_picture_Set() const{
    return m_profile_picture_isSet;
}

bool OAIAccountResponseBody::is_profile_picture_Valid() const{
    return m_profile_picture_isValid;
}

bool OAIAccountResponseBody::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (organizations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_picture_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountResponseBody::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_email_isValid && m_id_isValid && m_organizations_isValid && true;
}

} // namespace OpenAPI
