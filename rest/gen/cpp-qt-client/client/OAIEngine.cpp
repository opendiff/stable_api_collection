/**
 * Stability.ai REST API
 * Welcome to the Stability.ai REST API developer preview!  Please note, this is an alpha version of our new REST API, and is subject to change according to your feedback.  Feedback during this test is crucial for us to understand what the pain points are and how we can improve it going forward.  Changes will be communicated here, as well as on our online REST API documentation, which can be found at: https://api.stability.ai/docs  Your DreamStudio API key will be required for authentication. You can learn more about API keys here: https://platform.stability.ai/docs/getting-started/authentication  If you encounter any issues, please let us know in the #API discord channel: https://discord.gg/stablediffusion 
 *
 * The version of the OpenAPI document: 0.1
 * Contact: info@stability.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEngine.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEngine::OAIEngine(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEngine::OAIEngine() {
    this->initializeModel();
}

OAIEngine::~OAIEngine() {}

void OAIEngine::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIEngine::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEngine::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIEngine::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEngine::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(type));
    }
    return obj;
}

QString OAIEngine::getDescription() const {
    return description;
}
void OAIEngine::setDescription(const QString &description) {
    this->description = description;
    this->m_description_isSet = true;
}

bool OAIEngine::is_description_Set() const{
    return m_description_isSet;
}

bool OAIEngine::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIEngine::getId() const {
    return id;
}
void OAIEngine::setId(const QString &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool OAIEngine::is_id_Set() const{
    return m_id_isSet;
}

bool OAIEngine::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIEngine::getName() const {
    return name;
}
void OAIEngine::setName(const QString &name) {
    this->name = name;
    this->m_name_isSet = true;
}

bool OAIEngine::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEngine::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIEngine::getType() const {
    return type;
}
void OAIEngine::setType(const QString &type) {
    this->type = type;
    this->m_type_isSet = true;
}

bool OAIEngine::is_type_Set() const{
    return m_type_isSet;
}

bool OAIEngine::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIEngine::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEngine::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_description_isValid && m_id_isValid && m_name_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
