/**
 * Stability.ai REST API
 * Welcome to the Stability.ai REST API developer preview!  Please note, this is an alpha version of our new REST API, and is subject to change according to your feedback.  Feedback during this test is crucial for us to understand what the pain points are and how we can improve it going forward.  Changes will be communicated here, as well as on our online REST API documentation, which can be found at: https://api.stability.ai/docs  Your DreamStudio API key will be required for authentication. You can learn more about API keys here: https://platform.stability.ai/docs/getting-started/authentication  If you encounter any issues, please let us know in the #API discord channel: https://discord.gg/stablediffusion 
 *
 * The version of the OpenAPI document: 0.1
 * Contact: info@stability.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITextPrompt.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITextPrompt::OAITextPrompt(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITextPrompt::OAITextPrompt() {
    this->initializeModel();
}

OAITextPrompt::~OAITextPrompt() {}

void OAITextPrompt::initializeModel() {

    m_text_isSet = false;
    m_text_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;
}

void OAITextPrompt::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITextPrompt::fromJsonObject(QJsonObject json) {

    m_text_isValid = ::OpenAPI::fromJsonValue(text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(weight, json[QString("weight")]);
    m_weight_isSet = !json[QString("weight")].isNull() && m_weight_isValid;
}

QString OAITextPrompt::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITextPrompt::asJsonObject() const {
    QJsonObject obj;
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(text));
    }
    if (m_weight_isSet) {
        obj.insert(QString("weight"), ::OpenAPI::toJsonValue(weight));
    }
    return obj;
}

QString OAITextPrompt::getText() const {
    return text;
}
void OAITextPrompt::setText(const QString &text) {
    this->text = text;
    this->m_text_isSet = true;
}

bool OAITextPrompt::is_text_Set() const{
    return m_text_isSet;
}

bool OAITextPrompt::is_text_Valid() const{
    return m_text_isValid;
}

float OAITextPrompt::getWeight() const {
    return weight;
}
void OAITextPrompt::setWeight(const float &weight) {
    this->weight = weight;
    this->m_weight_isSet = true;
}

bool OAITextPrompt::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAITextPrompt::is_weight_Valid() const{
    return m_weight_isValid;
}

bool OAITextPrompt::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITextPrompt::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_text_isValid && true;
}

} // namespace OpenAPI
