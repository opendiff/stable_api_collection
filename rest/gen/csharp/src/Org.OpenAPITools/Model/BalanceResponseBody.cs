/*
 * Stability.ai REST API
 *
 * Welcome to the Stability.ai REST API developer preview!  Please note, this is an alpha version of our new REST API, and is subject to change according to your feedback.  Feedback during this test is crucial for us to understand what the pain points are and how we can improve it going forward.  Changes will be communicated here, as well as on our online REST API documentation, which can be found at: https://api.stability.ai/docs  Your DreamStudio API key will be required for authentication. You can learn more about API keys here: https://platform.stability.ai/docs/getting-started/authentication  If you encounter any issues, please let us know in the #API discord channel: https://discord.gg/stablediffusion 
 *
 * The version of the OpenAPI document: 0.1
 * Contact: info@stability.ai
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// BalanceResponseBody
    /// </summary>
    [DataContract]
    public partial class BalanceResponseBody :  IEquatable<BalanceResponseBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BalanceResponseBody" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BalanceResponseBody() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BalanceResponseBody" /> class.
        /// </summary>
        /// <param name="credits">The balance of the account/organization associated with the API key (required).</param>
        public BalanceResponseBody(double credits = default(double))
        {
            // to ensure "credits" is required (not null)
            if (credits == null)
            {
                throw new InvalidDataException("credits is a required property for BalanceResponseBody and cannot be null");
            }
            else
            {
                this.Credits = credits;
            }

        }

        /// <summary>
        /// The balance of the account/organization associated with the API key
        /// </summary>
        /// <value>The balance of the account/organization associated with the API key</value>
        [DataMember(Name="credits", EmitDefaultValue=true)]
        public double Credits { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BalanceResponseBody {\n");
            sb.Append("  Credits: ").Append(Credits).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BalanceResponseBody);
        }

        /// <summary>
        /// Returns true if BalanceResponseBody instances are equal
        /// </summary>
        /// <param name="input">Instance of BalanceResponseBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BalanceResponseBody input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Credits == input.Credits ||
                    (this.Credits != null &&
                    this.Credits.Equals(input.Credits))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Credits != null)
                    hashCode = hashCode * 59 + this.Credits.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
