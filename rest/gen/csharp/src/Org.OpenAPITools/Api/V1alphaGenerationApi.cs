/*
 * Stability.ai REST API
 *
 * Welcome to the Stability.ai REST API developer preview!  Please note, this is an alpha version of our new REST API, and is subject to change according to your feedback.  Feedback during this test is crucial for us to understand what the pain points are and how we can improve it going forward.  Changes will be communicated here, as well as on our online REST API documentation, which can be found at: https://api.stability.ai/docs  Your DreamStudio API key will be required for authentication. You can learn more about API keys here: https://platform.stability.ai/docs/getting-started/authentication  If you encounter any issues, please let us know in the #API discord channel: https://discord.gg/stablediffusion 
 *
 * The version of the OpenAPI document: 0.1
 * Contact: info@stability.ai
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IV1alphaGenerationApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// image-to-image
        /// </summary>
        /// <remarks>
        /// Generate big fancy pictures from small fancy pictures
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="engineId"> </param>
        /// <param name="accept"> </param>
        /// <param name="initImage">Initial image to use for the image-to-image generation</param>
        /// <param name="options"></param>
        /// <param name="organization">Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)</param>
        /// <returns></returns>
        void V1alphaGenerationImageToImage (string engineId, string accept, System.IO.Stream initImage, ImageToImageOptions options, string organization = default(string));

        /// <summary>
        /// image-to-image
        /// </summary>
        /// <remarks>
        /// Generate big fancy pictures from small fancy pictures
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="engineId"> </param>
        /// <param name="accept"> </param>
        /// <param name="initImage">Initial image to use for the image-to-image generation</param>
        /// <param name="options"></param>
        /// <param name="organization">Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V1alphaGenerationImageToImageWithHttpInfo (string engineId, string accept, System.IO.Stream initImage, ImageToImageOptions options, string organization = default(string));
        /// <summary>
        /// image-to-image/masking
        /// </summary>
        /// <remarks>
        /// Paint fancy things into fancy pictures
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="engineId"> </param>
        /// <param name="accept"> </param>
        /// <param name="initImage">Initial image to use for the image-to-image generation</param>
        /// <param name="options"></param>
        /// <param name="organization">Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)</param>
        /// <param name="maskImage">Optional mask image to use for masking. Must be the same dimensions as the &#x60;init_image&#x60;. Use the &#x60;mask_source&#x60; option to specify whether the white or black pixels should be inpainted. (Note: if you set &#x60;mask_source&#x60; to &#x60;INIT_IMAGE_ALPHA&#x60; you can omit the &#x60;mask_image&#x60; parameter completely.) (optional)</param>
        /// <returns></returns>
        void V1alphaGenerationMasking (string engineId, string accept, System.IO.Stream initImage, MaskingOptions options, string organization = default(string), System.IO.Stream maskImage = default(System.IO.Stream));

        /// <summary>
        /// image-to-image/masking
        /// </summary>
        /// <remarks>
        /// Paint fancy things into fancy pictures
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="engineId"> </param>
        /// <param name="accept"> </param>
        /// <param name="initImage">Initial image to use for the image-to-image generation</param>
        /// <param name="options"></param>
        /// <param name="organization">Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)</param>
        /// <param name="maskImage">Optional mask image to use for masking. Must be the same dimensions as the &#x60;init_image&#x60;. Use the &#x60;mask_source&#x60; option to specify whether the white or black pixels should be inpainted. (Note: if you set &#x60;mask_source&#x60; to &#x60;INIT_IMAGE_ALPHA&#x60; you can omit the &#x60;mask_image&#x60; parameter completely.) (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V1alphaGenerationMaskingWithHttpInfo (string engineId, string accept, System.IO.Stream initImage, MaskingOptions options, string organization = default(string), System.IO.Stream maskImage = default(System.IO.Stream));
        /// <summary>
        /// text-to-image
        /// </summary>
        /// <remarks>
        /// Generate an image from text
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="engineId"> </param>
        /// <param name="accept"> </param>
        /// <param name="textToImageRequestBody"></param>
        /// <param name="organization">Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)</param>
        /// <returns></returns>
        void V1alphaGenerationTextToImage (string engineId, string accept, TextToImageRequestBody textToImageRequestBody, string organization = default(string));

        /// <summary>
        /// text-to-image
        /// </summary>
        /// <remarks>
        /// Generate an image from text
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="engineId"> </param>
        /// <param name="accept"> </param>
        /// <param name="textToImageRequestBody"></param>
        /// <param name="organization">Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V1alphaGenerationTextToImageWithHttpInfo (string engineId, string accept, TextToImageRequestBody textToImageRequestBody, string organization = default(string));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// image-to-image
        /// </summary>
        /// <remarks>
        /// Generate big fancy pictures from small fancy pictures
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="engineId"> </param>
        /// <param name="accept"> </param>
        /// <param name="initImage">Initial image to use for the image-to-image generation</param>
        /// <param name="options"></param>
        /// <param name="organization">Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V1alphaGenerationImageToImageAsync (string engineId, string accept, System.IO.Stream initImage, ImageToImageOptions options, string organization = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// image-to-image
        /// </summary>
        /// <remarks>
        /// Generate big fancy pictures from small fancy pictures
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="engineId"> </param>
        /// <param name="accept"> </param>
        /// <param name="initImage">Initial image to use for the image-to-image generation</param>
        /// <param name="options"></param>
        /// <param name="organization">Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V1alphaGenerationImageToImageWithHttpInfoAsync (string engineId, string accept, System.IO.Stream initImage, ImageToImageOptions options, string organization = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// image-to-image/masking
        /// </summary>
        /// <remarks>
        /// Paint fancy things into fancy pictures
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="engineId"> </param>
        /// <param name="accept"> </param>
        /// <param name="initImage">Initial image to use for the image-to-image generation</param>
        /// <param name="options"></param>
        /// <param name="organization">Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)</param>
        /// <param name="maskImage">Optional mask image to use for masking. Must be the same dimensions as the &#x60;init_image&#x60;. Use the &#x60;mask_source&#x60; option to specify whether the white or black pixels should be inpainted. (Note: if you set &#x60;mask_source&#x60; to &#x60;INIT_IMAGE_ALPHA&#x60; you can omit the &#x60;mask_image&#x60; parameter completely.) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V1alphaGenerationMaskingAsync (string engineId, string accept, System.IO.Stream initImage, MaskingOptions options, string organization = default(string), System.IO.Stream maskImage = default(System.IO.Stream), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// image-to-image/masking
        /// </summary>
        /// <remarks>
        /// Paint fancy things into fancy pictures
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="engineId"> </param>
        /// <param name="accept"> </param>
        /// <param name="initImage">Initial image to use for the image-to-image generation</param>
        /// <param name="options"></param>
        /// <param name="organization">Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)</param>
        /// <param name="maskImage">Optional mask image to use for masking. Must be the same dimensions as the &#x60;init_image&#x60;. Use the &#x60;mask_source&#x60; option to specify whether the white or black pixels should be inpainted. (Note: if you set &#x60;mask_source&#x60; to &#x60;INIT_IMAGE_ALPHA&#x60; you can omit the &#x60;mask_image&#x60; parameter completely.) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V1alphaGenerationMaskingWithHttpInfoAsync (string engineId, string accept, System.IO.Stream initImage, MaskingOptions options, string organization = default(string), System.IO.Stream maskImage = default(System.IO.Stream), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// text-to-image
        /// </summary>
        /// <remarks>
        /// Generate an image from text
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="engineId"> </param>
        /// <param name="accept"> </param>
        /// <param name="textToImageRequestBody"></param>
        /// <param name="organization">Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V1alphaGenerationTextToImageAsync (string engineId, string accept, TextToImageRequestBody textToImageRequestBody, string organization = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// text-to-image
        /// </summary>
        /// <remarks>
        /// Generate an image from text
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="engineId"> </param>
        /// <param name="accept"> </param>
        /// <param name="textToImageRequestBody"></param>
        /// <param name="organization">Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V1alphaGenerationTextToImageWithHttpInfoAsync (string engineId, string accept, TextToImageRequestBody textToImageRequestBody, string organization = default(string), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class V1alphaGenerationApi : IV1alphaGenerationApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="V1alphaGenerationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public V1alphaGenerationApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="V1alphaGenerationApi"/> class
        /// </summary>
        /// <returns></returns>
        public V1alphaGenerationApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="V1alphaGenerationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public V1alphaGenerationApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// image-to-image Generate big fancy pictures from small fancy pictures
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="engineId"> </param>
        /// <param name="accept"> </param>
        /// <param name="initImage">Initial image to use for the image-to-image generation</param>
        /// <param name="options"></param>
        /// <param name="organization">Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)</param>
        /// <returns></returns>
        public void V1alphaGenerationImageToImage (string engineId, string accept, System.IO.Stream initImage, ImageToImageOptions options, string organization = default(string))
        {
             V1alphaGenerationImageToImageWithHttpInfo(engineId, accept, initImage, options, organization);
        }

        /// <summary>
        /// image-to-image Generate big fancy pictures from small fancy pictures
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="engineId"> </param>
        /// <param name="accept"> </param>
        /// <param name="initImage">Initial image to use for the image-to-image generation</param>
        /// <param name="options"></param>
        /// <param name="organization">Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> V1alphaGenerationImageToImageWithHttpInfo (string engineId, string accept, System.IO.Stream initImage, ImageToImageOptions options, string organization = default(string))
        {
            // verify the required parameter 'engineId' is set
            if (engineId == null)
                throw new ApiException(400, "Missing required parameter 'engineId' when calling V1alphaGenerationApi->V1alphaGenerationImageToImage");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling V1alphaGenerationApi->V1alphaGenerationImageToImage");
            // verify the required parameter 'initImage' is set
            if (initImage == null)
                throw new ApiException(400, "Missing required parameter 'initImage' when calling V1alphaGenerationApi->V1alphaGenerationImageToImage");
            // verify the required parameter 'options' is set
            if (options == null)
                throw new ApiException(400, "Missing required parameter 'options' when calling V1alphaGenerationApi->V1alphaGenerationImageToImage");

            var localVarPath = "/v1alpha/generation/{engine_id}/image-to-image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.goa.error"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (engineId != null) localVarPathParams.Add("engine_id", this.Configuration.ApiClient.ParameterToString(engineId)); // path parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (organization != null) localVarHeaderParams.Add("Organization", this.Configuration.ApiClient.ParameterToString(organization)); // header parameter
            if (initImage != null) localVarFileParams.Add("init_image", this.Configuration.ApiClient.ParameterToFile("init_image", initImage));
            if (options != null) localVarFormParams.Add("options", this.Configuration.ApiClient.Serialize(options)); // form parameter

            // authentication (api_key_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1alphaGenerationImageToImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// image-to-image Generate big fancy pictures from small fancy pictures
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="engineId"> </param>
        /// <param name="accept"> </param>
        /// <param name="initImage">Initial image to use for the image-to-image generation</param>
        /// <param name="options"></param>
        /// <param name="organization">Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V1alphaGenerationImageToImageAsync (string engineId, string accept, System.IO.Stream initImage, ImageToImageOptions options, string organization = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             await V1alphaGenerationImageToImageWithHttpInfoAsync(engineId, accept, initImage, options, organization, cancellationToken);

        }

        /// <summary>
        /// image-to-image Generate big fancy pictures from small fancy pictures
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="engineId"> </param>
        /// <param name="accept"> </param>
        /// <param name="initImage">Initial image to use for the image-to-image generation</param>
        /// <param name="options"></param>
        /// <param name="organization">Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> V1alphaGenerationImageToImageWithHttpInfoAsync (string engineId, string accept, System.IO.Stream initImage, ImageToImageOptions options, string organization = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'engineId' is set
            if (engineId == null)
                throw new ApiException(400, "Missing required parameter 'engineId' when calling V1alphaGenerationApi->V1alphaGenerationImageToImage");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling V1alphaGenerationApi->V1alphaGenerationImageToImage");
            // verify the required parameter 'initImage' is set
            if (initImage == null)
                throw new ApiException(400, "Missing required parameter 'initImage' when calling V1alphaGenerationApi->V1alphaGenerationImageToImage");
            // verify the required parameter 'options' is set
            if (options == null)
                throw new ApiException(400, "Missing required parameter 'options' when calling V1alphaGenerationApi->V1alphaGenerationImageToImage");

            var localVarPath = "/v1alpha/generation/{engine_id}/image-to-image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.goa.error"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (engineId != null) localVarPathParams.Add("engine_id", this.Configuration.ApiClient.ParameterToString(engineId)); // path parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (organization != null) localVarHeaderParams.Add("Organization", this.Configuration.ApiClient.ParameterToString(organization)); // header parameter
            if (initImage != null) localVarFileParams.Add("init_image", this.Configuration.ApiClient.ParameterToFile("init_image", initImage));
            if (options != null) localVarFormParams.Add("options", this.Configuration.ApiClient.Serialize(options)); // form parameter

            // authentication (api_key_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1alphaGenerationImageToImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// image-to-image/masking Paint fancy things into fancy pictures
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="engineId"> </param>
        /// <param name="accept"> </param>
        /// <param name="initImage">Initial image to use for the image-to-image generation</param>
        /// <param name="options"></param>
        /// <param name="organization">Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)</param>
        /// <param name="maskImage">Optional mask image to use for masking. Must be the same dimensions as the &#x60;init_image&#x60;. Use the &#x60;mask_source&#x60; option to specify whether the white or black pixels should be inpainted. (Note: if you set &#x60;mask_source&#x60; to &#x60;INIT_IMAGE_ALPHA&#x60; you can omit the &#x60;mask_image&#x60; parameter completely.) (optional)</param>
        /// <returns></returns>
        public void V1alphaGenerationMasking (string engineId, string accept, System.IO.Stream initImage, MaskingOptions options, string organization = default(string), System.IO.Stream maskImage = default(System.IO.Stream))
        {
             V1alphaGenerationMaskingWithHttpInfo(engineId, accept, initImage, options, organization, maskImage);
        }

        /// <summary>
        /// image-to-image/masking Paint fancy things into fancy pictures
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="engineId"> </param>
        /// <param name="accept"> </param>
        /// <param name="initImage">Initial image to use for the image-to-image generation</param>
        /// <param name="options"></param>
        /// <param name="organization">Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)</param>
        /// <param name="maskImage">Optional mask image to use for masking. Must be the same dimensions as the &#x60;init_image&#x60;. Use the &#x60;mask_source&#x60; option to specify whether the white or black pixels should be inpainted. (Note: if you set &#x60;mask_source&#x60; to &#x60;INIT_IMAGE_ALPHA&#x60; you can omit the &#x60;mask_image&#x60; parameter completely.) (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> V1alphaGenerationMaskingWithHttpInfo (string engineId, string accept, System.IO.Stream initImage, MaskingOptions options, string organization = default(string), System.IO.Stream maskImage = default(System.IO.Stream))
        {
            // verify the required parameter 'engineId' is set
            if (engineId == null)
                throw new ApiException(400, "Missing required parameter 'engineId' when calling V1alphaGenerationApi->V1alphaGenerationMasking");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling V1alphaGenerationApi->V1alphaGenerationMasking");
            // verify the required parameter 'initImage' is set
            if (initImage == null)
                throw new ApiException(400, "Missing required parameter 'initImage' when calling V1alphaGenerationApi->V1alphaGenerationMasking");
            // verify the required parameter 'options' is set
            if (options == null)
                throw new ApiException(400, "Missing required parameter 'options' when calling V1alphaGenerationApi->V1alphaGenerationMasking");

            var localVarPath = "/v1alpha/generation/{engine_id}/image-to-image/masking";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.goa.error"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (engineId != null) localVarPathParams.Add("engine_id", this.Configuration.ApiClient.ParameterToString(engineId)); // path parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (organization != null) localVarHeaderParams.Add("Organization", this.Configuration.ApiClient.ParameterToString(organization)); // header parameter
            if (initImage != null) localVarFileParams.Add("init_image", this.Configuration.ApiClient.ParameterToFile("init_image", initImage));
            if (maskImage != null) localVarFileParams.Add("mask_image", this.Configuration.ApiClient.ParameterToFile("mask_image", maskImage));
            if (options != null) localVarFormParams.Add("options", this.Configuration.ApiClient.Serialize(options)); // form parameter

            // authentication (api_key_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1alphaGenerationMasking", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// image-to-image/masking Paint fancy things into fancy pictures
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="engineId"> </param>
        /// <param name="accept"> </param>
        /// <param name="initImage">Initial image to use for the image-to-image generation</param>
        /// <param name="options"></param>
        /// <param name="organization">Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)</param>
        /// <param name="maskImage">Optional mask image to use for masking. Must be the same dimensions as the &#x60;init_image&#x60;. Use the &#x60;mask_source&#x60; option to specify whether the white or black pixels should be inpainted. (Note: if you set &#x60;mask_source&#x60; to &#x60;INIT_IMAGE_ALPHA&#x60; you can omit the &#x60;mask_image&#x60; parameter completely.) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V1alphaGenerationMaskingAsync (string engineId, string accept, System.IO.Stream initImage, MaskingOptions options, string organization = default(string), System.IO.Stream maskImage = default(System.IO.Stream), CancellationToken cancellationToken = default(CancellationToken))
        {
             await V1alphaGenerationMaskingWithHttpInfoAsync(engineId, accept, initImage, options, organization, maskImage, cancellationToken);

        }

        /// <summary>
        /// image-to-image/masking Paint fancy things into fancy pictures
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="engineId"> </param>
        /// <param name="accept"> </param>
        /// <param name="initImage">Initial image to use for the image-to-image generation</param>
        /// <param name="options"></param>
        /// <param name="organization">Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)</param>
        /// <param name="maskImage">Optional mask image to use for masking. Must be the same dimensions as the &#x60;init_image&#x60;. Use the &#x60;mask_source&#x60; option to specify whether the white or black pixels should be inpainted. (Note: if you set &#x60;mask_source&#x60; to &#x60;INIT_IMAGE_ALPHA&#x60; you can omit the &#x60;mask_image&#x60; parameter completely.) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> V1alphaGenerationMaskingWithHttpInfoAsync (string engineId, string accept, System.IO.Stream initImage, MaskingOptions options, string organization = default(string), System.IO.Stream maskImage = default(System.IO.Stream), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'engineId' is set
            if (engineId == null)
                throw new ApiException(400, "Missing required parameter 'engineId' when calling V1alphaGenerationApi->V1alphaGenerationMasking");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling V1alphaGenerationApi->V1alphaGenerationMasking");
            // verify the required parameter 'initImage' is set
            if (initImage == null)
                throw new ApiException(400, "Missing required parameter 'initImage' when calling V1alphaGenerationApi->V1alphaGenerationMasking");
            // verify the required parameter 'options' is set
            if (options == null)
                throw new ApiException(400, "Missing required parameter 'options' when calling V1alphaGenerationApi->V1alphaGenerationMasking");

            var localVarPath = "/v1alpha/generation/{engine_id}/image-to-image/masking";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.goa.error"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (engineId != null) localVarPathParams.Add("engine_id", this.Configuration.ApiClient.ParameterToString(engineId)); // path parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (organization != null) localVarHeaderParams.Add("Organization", this.Configuration.ApiClient.ParameterToString(organization)); // header parameter
            if (initImage != null) localVarFileParams.Add("init_image", this.Configuration.ApiClient.ParameterToFile("init_image", initImage));
            if (maskImage != null) localVarFileParams.Add("mask_image", this.Configuration.ApiClient.ParameterToFile("mask_image", maskImage));
            if (options != null) localVarFormParams.Add("options", this.Configuration.ApiClient.Serialize(options)); // form parameter

            // authentication (api_key_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1alphaGenerationMasking", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// text-to-image Generate an image from text
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="engineId"> </param>
        /// <param name="accept"> </param>
        /// <param name="textToImageRequestBody"></param>
        /// <param name="organization">Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)</param>
        /// <returns></returns>
        public void V1alphaGenerationTextToImage (string engineId, string accept, TextToImageRequestBody textToImageRequestBody, string organization = default(string))
        {
             V1alphaGenerationTextToImageWithHttpInfo(engineId, accept, textToImageRequestBody, organization);
        }

        /// <summary>
        /// text-to-image Generate an image from text
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="engineId"> </param>
        /// <param name="accept"> </param>
        /// <param name="textToImageRequestBody"></param>
        /// <param name="organization">Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> V1alphaGenerationTextToImageWithHttpInfo (string engineId, string accept, TextToImageRequestBody textToImageRequestBody, string organization = default(string))
        {
            // verify the required parameter 'engineId' is set
            if (engineId == null)
                throw new ApiException(400, "Missing required parameter 'engineId' when calling V1alphaGenerationApi->V1alphaGenerationTextToImage");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling V1alphaGenerationApi->V1alphaGenerationTextToImage");
            // verify the required parameter 'textToImageRequestBody' is set
            if (textToImageRequestBody == null)
                throw new ApiException(400, "Missing required parameter 'textToImageRequestBody' when calling V1alphaGenerationApi->V1alphaGenerationTextToImage");

            var localVarPath = "/v1alpha/generation/{engine_id}/text-to-image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.goa.error"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (engineId != null) localVarPathParams.Add("engine_id", this.Configuration.ApiClient.ParameterToString(engineId)); // path parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (organization != null) localVarHeaderParams.Add("Organization", this.Configuration.ApiClient.ParameterToString(organization)); // header parameter
            if (textToImageRequestBody != null && textToImageRequestBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(textToImageRequestBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = textToImageRequestBody; // byte array
            }

            // authentication (api_key_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1alphaGenerationTextToImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// text-to-image Generate an image from text
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="engineId"> </param>
        /// <param name="accept"> </param>
        /// <param name="textToImageRequestBody"></param>
        /// <param name="organization">Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V1alphaGenerationTextToImageAsync (string engineId, string accept, TextToImageRequestBody textToImageRequestBody, string organization = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             await V1alphaGenerationTextToImageWithHttpInfoAsync(engineId, accept, textToImageRequestBody, organization, cancellationToken);

        }

        /// <summary>
        /// text-to-image Generate an image from text
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="engineId"> </param>
        /// <param name="accept"> </param>
        /// <param name="textToImageRequestBody"></param>
        /// <param name="organization">Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> V1alphaGenerationTextToImageWithHttpInfoAsync (string engineId, string accept, TextToImageRequestBody textToImageRequestBody, string organization = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'engineId' is set
            if (engineId == null)
                throw new ApiException(400, "Missing required parameter 'engineId' when calling V1alphaGenerationApi->V1alphaGenerationTextToImage");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling V1alphaGenerationApi->V1alphaGenerationTextToImage");
            // verify the required parameter 'textToImageRequestBody' is set
            if (textToImageRequestBody == null)
                throw new ApiException(400, "Missing required parameter 'textToImageRequestBody' when calling V1alphaGenerationApi->V1alphaGenerationTextToImage");

            var localVarPath = "/v1alpha/generation/{engine_id}/text-to-image";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.goa.error"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (engineId != null) localVarPathParams.Add("engine_id", this.Configuration.ApiClient.ParameterToString(engineId)); // path parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (organization != null) localVarHeaderParams.Add("Organization", this.Configuration.ApiClient.ParameterToString(organization)); // header parameter
            if (textToImageRequestBody != null && textToImageRequestBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(textToImageRequestBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = textToImageRequestBody; // byte array
            }

            // authentication (api_key_header_Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1alphaGenerationTextToImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
