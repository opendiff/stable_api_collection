/*
 * Stability.ai REST API
 *
 * Welcome to the Stability.ai REST API developer preview!  Please note, this is an alpha version of our new REST API, and is subject to change according to your feedback.  Feedback during this test is crucial for us to understand what the pain points are and how we can improve it going forward.  Changes will be communicated here, as well as on our online REST API documentation, which can be found at: https://api.stability.ai/docs  Your DreamStudio API key will be required for authentication. You can learn more about API keys here: https://platform.stability.ai/docs/getting-started/authentication  If you encounter any issues, please let us know in the #API discord channel: https://discord.gg/stablediffusion 
 *
 * The version of the OpenAPI document: 0.1
 * Contact: info@stability.ai
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct TextToImageRequestBody {
    /// How strictly the diffusion process adheres to the prompt text (higher values keep your image closer to your prompt)
    #[serde(rename = "cfg_scale", skip_serializing_if = "Option::is_none")]
    pub cfg_scale: Option<f32>,
    #[serde(rename = "clip_guidance_preset", skip_serializing_if = "Option::is_none")]
    pub clip_guidance_preset: Option<ClipGuidancePreset>,
    /// Height of the image (note: `height * width` must be <= 1 Megapixel)
    #[serde(rename = "height", skip_serializing_if = "Option::is_none")]
    pub height: Option<i32>,
    /// Which sampler to use for the diffusion process. If this value is omitted we'll automatically select an appropriate sampler for you.
    #[serde(rename = "sampler", skip_serializing_if = "Option::is_none")]
    pub sampler: Option<Sampler>,
    /// Number of images to generate
    #[serde(rename = "samples", skip_serializing_if = "Option::is_none")]
    pub samples: Option<i32>,
    /// Random noise seed (omit this option or use `0` for a random seed)
    #[serde(rename = "seed", skip_serializing_if = "Option::is_none")]
    pub seed: Option<i32>,
    /// Number of diffusion steps to run
    #[serde(rename = "steps", skip_serializing_if = "Option::is_none")]
    pub steps: Option<i32>,
    #[serde(rename = "text_prompts")]
    pub text_prompts: Vec<crate::models::TextPrompt>,
    /// Width of the image (note: `height * width` must be <= 1 Megapixel)
    #[serde(rename = "width", skip_serializing_if = "Option::is_none")]
    pub width: Option<i32>,
}

impl TextToImageRequestBody {
    pub fn new(text_prompts: Vec<crate::models::TextPrompt>) -> TextToImageRequestBody {
        TextToImageRequestBody {
            cfg_scale: None,
            clip_guidance_preset: None,
            height: None,
            sampler: None,
            samples: None,
            seed: None,
            steps: None,
            text_prompts,
            width: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ClipGuidancePreset {
    #[serde(rename = "FAST_BLUE")]
    FASTBLUE,
    #[serde(rename = "FAST_GREEN")]
    FASTGREEN,
    #[serde(rename = "NONE")]
    NONE,
    #[serde(rename = "SIMPLE")]
    SIMPLE,
    #[serde(rename = "SLOW")]
    SLOW,
    #[serde(rename = "SLOWER")]
    SLOWER,
    #[serde(rename = "SLOWEST")]
    SLOWEST,
}

impl Default for ClipGuidancePreset {
    fn default() -> ClipGuidancePreset {
        Self::FASTBLUE
    }
}
/// Which sampler to use for the diffusion process. If this value is omitted we'll automatically select an appropriate sampler for you.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Sampler {
    #[serde(rename = "DDIM")]
    DDIM,
    #[serde(rename = "DDPM")]
    DDPM,
    #[serde(rename = "K_DPMPP_2M")]
    KDPMPP2M,
    #[serde(rename = "K_DPMPP_2S_ANCESTRAL")]
    KDPMPP2SANCESTRAL,
    #[serde(rename = "K_DPM_2")]
    KDPM2,
    #[serde(rename = "K_DPM_2_ANCESTRAL")]
    KDPM2ANCESTRAL,
    #[serde(rename = "K_EULER")]
    KEULER,
    #[serde(rename = "K_EULER_ANCESTRAL")]
    KEULERANCESTRAL,
    #[serde(rename = "K_HEUN")]
    KHEUN,
    #[serde(rename = "K_LMS")]
    KLMS,
}

impl Default for Sampler {
    fn default() -> Sampler {
        Self::DDIM
    }
}

