note
 description:"[
		Stability.ai REST API
 		Welcome to the Stability.ai REST API developer preview!  Please note, this is an alpha version of our new REST API, and is subject to change according to your feedback.  Feedback during this test is crucial for us to understand what the pain points are and how we can improve it going forward.  Changes will be communicated here, as well as on our online REST API documentation, which can be found at: https://api.stability.ai/docs  Your DreamStudio API key will be required for authentication. You can learn more about API keys here: https://platform.stability.ai/docs/getting-started/authentication  If you encounter any issues, please let us know in the #API discord channel: https://discord.gg/stablediffusion 
  		The version of the OpenAPI document: 0.1
 	    Contact: info@stability.ai

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"

class
	V1ALPHAGENERATION_API

inherit

    API_I


feature -- API Access


	v1alpha_generation_image_to_image (engine_id: STRING_32; accept: STRING_32; init_image: FILE; options: IMAGE_TO_IMAGE_OPTIONS; organization: STRING_32)
			-- image-to-image
			-- Generate big fancy pictures from small fancy pictures
			-- 
			-- argument: engine_id   (required)
			-- 
			-- argument: accept   (required)
			-- 
			-- argument: init_image Initial image to use for the image-to-image generation (required)
			-- 
			-- argument: options  (required)
			-- 
			-- argument: organization Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional, default to null)
			-- 
			-- 
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/v1alpha/generation/{engine_id}/image-to-image"
			l_path.replace_substring_all ("{"+"engine_id"+"}", api_client.url_encode (engine_id.out))

			if attached accept as l_accept then
				l_request.add_header(l_accept.out,"Accept");
			end
			if attached organization as l_organization then
				l_request.add_header(l_organization.out,"Organization");
			end
			if attached init_image as l_init_image then
				l_request.add_form(l_init_image,"init_image");
			end
			if attached options as l_options then
				l_request.add_form(l_options,"options");
			end

			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/vnd.goa.error">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"multipart/form-data">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"api_key_header_Authorization">>)
			l_response := api_client.call_api (l_path, "Post", l_request, agent serializer, Void)
			if l_response.has_error then
				last_error := l_response.error
			end
		end

	v1alpha_generation_masking (engine_id: STRING_32; accept: STRING_32; init_image: FILE; options: MASKING_OPTIONS; organization: STRING_32; mask_image: FILE)
			-- image-to-image/masking
			-- Paint fancy things into fancy pictures
			-- 
			-- argument: engine_id   (required)
			-- 
			-- argument: accept   (required)
			-- 
			-- argument: init_image Initial image to use for the image-to-image generation (required)
			-- 
			-- argument: options  (required)
			-- 
			-- argument: organization Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional, default to null)
			-- 
			-- argument: mask_image Optional mask image to use for masking. Must be the same dimensions as the &#x60;init_image&#x60;. Use the &#x60;mask_source&#x60; option to specify whether the white or black pixels should be inpainted. (Note: if you set &#x60;mask_source&#x60; to &#x60;INIT_IMAGE_ALPHA&#x60; you can omit the &#x60;mask_image&#x60; parameter completely.) (optional, default to null)
			-- 
			-- 
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/v1alpha/generation/{engine_id}/image-to-image/masking"
			l_path.replace_substring_all ("{"+"engine_id"+"}", api_client.url_encode (engine_id.out))

			if attached accept as l_accept then
				l_request.add_header(l_accept.out,"Accept");
			end
			if attached organization as l_organization then
				l_request.add_header(l_organization.out,"Organization");
			end
			if attached init_image as l_init_image then
				l_request.add_form(l_init_image,"init_image");
			end
			if attached mask_image as l_mask_image then
				l_request.add_form(l_mask_image,"mask_image");
			end
			if attached options as l_options then
				l_request.add_form(l_options,"options");
			end

			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/vnd.goa.error">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"multipart/form-data">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"api_key_header_Authorization">>)
			l_response := api_client.call_api (l_path, "Post", l_request, agent serializer, Void)
			if l_response.has_error then
				last_error := l_response.error
			end
		end

	v1alpha_generation_text_to_image (engine_id: STRING_32; accept: STRING_32; text_to_image_request_body: TEXT_TO_IMAGE_REQUEST_BODY; organization: STRING_32)
			-- text-to-image
			-- Generate an image from text
			-- 
			-- argument: engine_id   (required)
			-- 
			-- argument: accept   (required)
			-- 
			-- argument: text_to_image_request_body  (required)
			-- 
			-- argument: organization Optional: Allows for requests to be scoped to an organization other than the user&#39;s default.  If not provided, the user&#39;s default organization will be used. (optional, default to null)
			-- 
			-- 
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(text_to_image_request_body)
			l_path := "/v1alpha/generation/{engine_id}/text-to-image"
			l_path.replace_substring_all ("{"+"engine_id"+"}", api_client.url_encode (engine_id.out))

			if attached accept as l_accept then
				l_request.add_header(l_accept.out,"Accept");
			end
			if attached organization as l_organization then
				l_request.add_header(l_organization.out,"Organization");
			end

			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/vnd.goa.error">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/json">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"api_key_header_Authorization">>)
			l_response := api_client.call_api (l_path, "Post", l_request, agent serializer, Void)
			if l_response.has_error then
				last_error := l_response.error
			end
		end


end
