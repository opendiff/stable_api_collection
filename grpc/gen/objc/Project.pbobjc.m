// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: project.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Project.pbobjc.h"
#import "Generation.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(ProjectAsset);
GPBObjCClassDeclaration(Request);

#pragma mark - ProjectRoot

@implementation ProjectRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - ProjectRoot_FileDescriptor

static GPBFileDescriptor *ProjectRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"gooseai"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum ProjectAccess

GPBEnumDescriptor *ProjectAccess_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ProjectAccessPrivate\000ProjectAccessPublic"
        "\000";
    static const int32_t values[] = {
        ProjectAccess_ProjectAccessPrivate,
        ProjectAccess_ProjectAccessPublic,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ProjectAccess)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ProjectAccess_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ProjectAccess_IsValidValue(int32_t value__) {
  switch (value__) {
    case ProjectAccess_ProjectAccessPrivate:
    case ProjectAccess_ProjectAccessPublic:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum ProjectStatus

GPBEnumDescriptor *ProjectStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ProjectStatusInactive\000ProjectStatusActiv"
        "e\000ProjectStatusDeleted\000";
    static const int32_t values[] = {
        ProjectStatus_ProjectStatusInactive,
        ProjectStatus_ProjectStatusActive,
        ProjectStatus_ProjectStatusDeleted,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ProjectStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ProjectStatus_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ProjectStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case ProjectStatus_ProjectStatusInactive:
    case ProjectStatus_ProjectStatusActive:
    case ProjectStatus_ProjectStatusDeleted:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum ProjectAssetUse

GPBEnumDescriptor *ProjectAssetUse_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ProjectAssetUseUndefined\000ProjectAssetUse"
        "Input\000ProjectAssetUseOutput\000ProjectAsset"
        "UseIntermediate\000ProjectAssetUseProject\000";
    static const int32_t values[] = {
        ProjectAssetUse_ProjectAssetUseUndefined,
        ProjectAssetUse_ProjectAssetUseInput,
        ProjectAssetUse_ProjectAssetUseOutput,
        ProjectAssetUse_ProjectAssetUseIntermediate,
        ProjectAssetUse_ProjectAssetUseProject,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ProjectAssetUse)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ProjectAssetUse_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ProjectAssetUse_IsValidValue(int32_t value__) {
  switch (value__) {
    case ProjectAssetUse_ProjectAssetUseUndefined:
    case ProjectAssetUse_ProjectAssetUseInput:
    case ProjectAssetUse_ProjectAssetUseOutput:
    case ProjectAssetUse_ProjectAssetUseIntermediate:
    case ProjectAssetUse_ProjectAssetUseProject:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum ProjectSortDir

GPBEnumDescriptor *ProjectSortDir_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ProjectSortDirUnspecified\000ProjectSortDir"
        "Asc\000ProjectSortDirDesc\000";
    static const int32_t values[] = {
        ProjectSortDir_ProjectSortDirUnspecified,
        ProjectSortDir_ProjectSortDirAsc,
        ProjectSortDir_ProjectSortDirDesc,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ProjectSortDir)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ProjectSortDir_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ProjectSortDir_IsValidValue(int32_t value__) {
  switch (value__) {
    case ProjectSortDir_ProjectSortDirUnspecified:
    case ProjectSortDir_ProjectSortDirAsc:
    case ProjectSortDir_ProjectSortDirDesc:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - ProjectAsset

@implementation ProjectAsset

@dynamic id_p;
@dynamic uri;
@dynamic use;
@dynamic name;
@dynamic size;
@dynamic createdAt;
@dynamic updatedAt;
@dynamic hasRequest, request;

typedef struct ProjectAsset__storage_ {
  uint32_t _has_storage_[1];
  ProjectAssetUse use;
  NSString *id_p;
  NSString *uri;
  NSString *name;
  Request *request;
  uint64_t size;
  uint64_t createdAt;
  uint64_t updatedAt;
} ProjectAsset__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = ProjectAsset_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ProjectAsset__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "uri",
        .dataTypeSpecific.clazz = Nil,
        .number = ProjectAsset_FieldNumber_Uri,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ProjectAsset__storage_, uri),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "use",
        .dataTypeSpecific.enumDescFunc = ProjectAssetUse_EnumDescriptor,
        .number = ProjectAsset_FieldNumber_Use,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ProjectAsset__storage_, use),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = ProjectAsset_FieldNumber_Name,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ProjectAsset__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "size",
        .dataTypeSpecific.clazz = Nil,
        .number = ProjectAsset_FieldNumber_Size,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ProjectAsset__storage_, size),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "createdAt",
        .dataTypeSpecific.clazz = Nil,
        .number = ProjectAsset_FieldNumber_CreatedAt,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ProjectAsset__storage_, createdAt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "updatedAt",
        .dataTypeSpecific.clazz = Nil,
        .number = ProjectAsset_FieldNumber_UpdatedAt,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(ProjectAsset__storage_, updatedAt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "request",
        .dataTypeSpecific.clazz = GPBObjCClass(Request),
        .number = ProjectAsset_FieldNumber_Request,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(ProjectAsset__storage_, request),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ProjectAsset class]
                                     rootClass:[ProjectRoot class]
                                          file:ProjectRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ProjectAsset__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ProjectAsset_Use_RawValue(ProjectAsset *message) {
  GPBDescriptor *descriptor = [ProjectAsset descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ProjectAsset_FieldNumber_Use];
  return GPBGetMessageRawEnumField(message, field);
}

void SetProjectAsset_Use_RawValue(ProjectAsset *message, int32_t value) {
  GPBDescriptor *descriptor = [ProjectAsset descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ProjectAsset_FieldNumber_Use];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - Project

@implementation Project

@dynamic id_p;
@dynamic title;
@dynamic ownerId;
@dynamic access;
@dynamic status;
@dynamic size;
@dynamic hasFile, file;
@dynamic createdAt;
@dynamic updatedAt;
@dynamic assetsArray, assetsArray_Count;

typedef struct Project__storage_ {
  uint32_t _has_storage_[1];
  ProjectAccess access;
  ProjectStatus status;
  NSString *id_p;
  NSString *title;
  NSString *ownerId;
  ProjectAsset *file;
  NSMutableArray *assetsArray;
  uint64_t size;
  uint64_t createdAt;
  uint64_t updatedAt;
} Project__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = Project_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Project__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "title",
        .dataTypeSpecific.clazz = Nil,
        .number = Project_FieldNumber_Title,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Project__storage_, title),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "ownerId",
        .dataTypeSpecific.clazz = Nil,
        .number = Project_FieldNumber_OwnerId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Project__storage_, ownerId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "access",
        .dataTypeSpecific.enumDescFunc = ProjectAccess_EnumDescriptor,
        .number = Project_FieldNumber_Access,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Project__storage_, access),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = ProjectStatus_EnumDescriptor,
        .number = Project_FieldNumber_Status,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Project__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "size",
        .dataTypeSpecific.clazz = Nil,
        .number = Project_FieldNumber_Size,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Project__storage_, size),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "file",
        .dataTypeSpecific.clazz = GPBObjCClass(ProjectAsset),
        .number = Project_FieldNumber_File,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(Project__storage_, file),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "createdAt",
        .dataTypeSpecific.clazz = Nil,
        .number = Project_FieldNumber_CreatedAt,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(Project__storage_, createdAt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "updatedAt",
        .dataTypeSpecific.clazz = Nil,
        .number = Project_FieldNumber_UpdatedAt,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(Project__storage_, updatedAt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "assetsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(ProjectAsset),
        .number = Project_FieldNumber_AssetsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Project__storage_, assetsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Project class]
                                     rootClass:[ProjectRoot class]
                                          file:ProjectRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Project__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Project_Access_RawValue(Project *message) {
  GPBDescriptor *descriptor = [Project descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Project_FieldNumber_Access];
  return GPBGetMessageRawEnumField(message, field);
}

void SetProject_Access_RawValue(Project *message, int32_t value) {
  GPBDescriptor *descriptor = [Project descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Project_FieldNumber_Access];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t Project_Status_RawValue(Project *message) {
  GPBDescriptor *descriptor = [Project descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Project_FieldNumber_Status];
  return GPBGetMessageRawEnumField(message, field);
}

void SetProject_Status_RawValue(Project *message, int32_t value) {
  GPBDescriptor *descriptor = [Project descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Project_FieldNumber_Status];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - CreateProjectRequest

@implementation CreateProjectRequest

@dynamic title;
@dynamic hasOwnerId, ownerId;
@dynamic access;
@dynamic status;
@dynamic hasFile, file;

typedef struct CreateProjectRequest__storage_ {
  uint32_t _has_storage_[1];
  ProjectAccess access;
  ProjectStatus status;
  NSString *title;
  NSString *ownerId;
  ProjectAsset *file;
} CreateProjectRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "title",
        .dataTypeSpecific.clazz = Nil,
        .number = CreateProjectRequest_FieldNumber_Title,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CreateProjectRequest__storage_, title),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "ownerId",
        .dataTypeSpecific.clazz = Nil,
        .number = CreateProjectRequest_FieldNumber_OwnerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CreateProjectRequest__storage_, ownerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "access",
        .dataTypeSpecific.enumDescFunc = ProjectAccess_EnumDescriptor,
        .number = CreateProjectRequest_FieldNumber_Access,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CreateProjectRequest__storage_, access),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = ProjectStatus_EnumDescriptor,
        .number = CreateProjectRequest_FieldNumber_Status,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CreateProjectRequest__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "file",
        .dataTypeSpecific.clazz = GPBObjCClass(ProjectAsset),
        .number = CreateProjectRequest_FieldNumber_File,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(CreateProjectRequest__storage_, file),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CreateProjectRequest class]
                                     rootClass:[ProjectRoot class]
                                          file:ProjectRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CreateProjectRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t CreateProjectRequest_Access_RawValue(CreateProjectRequest *message) {
  GPBDescriptor *descriptor = [CreateProjectRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CreateProjectRequest_FieldNumber_Access];
  return GPBGetMessageRawEnumField(message, field);
}

void SetCreateProjectRequest_Access_RawValue(CreateProjectRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [CreateProjectRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CreateProjectRequest_FieldNumber_Access];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t CreateProjectRequest_Status_RawValue(CreateProjectRequest *message) {
  GPBDescriptor *descriptor = [CreateProjectRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CreateProjectRequest_FieldNumber_Status];
  return GPBGetMessageRawEnumField(message, field);
}

void SetCreateProjectRequest_Status_RawValue(CreateProjectRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [CreateProjectRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CreateProjectRequest_FieldNumber_Status];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - UpdateProjectRequest

@implementation UpdateProjectRequest

@dynamic id_p;
@dynamic hasOwnerId, ownerId;
@dynamic hasTitle, title;
@dynamic hasAccess, access;
@dynamic hasStatus, status;
@dynamic hasFile, file;

typedef struct UpdateProjectRequest__storage_ {
  uint32_t _has_storage_[1];
  ProjectAccess access;
  ProjectStatus status;
  NSString *id_p;
  NSString *ownerId;
  NSString *title;
  ProjectAsset *file;
} UpdateProjectRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateProjectRequest_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateProjectRequest__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "ownerId",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateProjectRequest_FieldNumber_OwnerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UpdateProjectRequest__storage_, ownerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "title",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateProjectRequest_FieldNumber_Title,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UpdateProjectRequest__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "access",
        .dataTypeSpecific.enumDescFunc = ProjectAccess_EnumDescriptor,
        .number = UpdateProjectRequest_FieldNumber_Access,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(UpdateProjectRequest__storage_, access),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = ProjectStatus_EnumDescriptor,
        .number = UpdateProjectRequest_FieldNumber_Status,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(UpdateProjectRequest__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "file",
        .dataTypeSpecific.clazz = GPBObjCClass(ProjectAsset),
        .number = UpdateProjectRequest_FieldNumber_File,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(UpdateProjectRequest__storage_, file),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateProjectRequest class]
                                     rootClass:[ProjectRoot class]
                                          file:ProjectRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateProjectRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t UpdateProjectRequest_Access_RawValue(UpdateProjectRequest *message) {
  GPBDescriptor *descriptor = [UpdateProjectRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:UpdateProjectRequest_FieldNumber_Access];
  return GPBGetMessageRawEnumField(message, field);
}

void SetUpdateProjectRequest_Access_RawValue(UpdateProjectRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [UpdateProjectRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:UpdateProjectRequest_FieldNumber_Access];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t UpdateProjectRequest_Status_RawValue(UpdateProjectRequest *message) {
  GPBDescriptor *descriptor = [UpdateProjectRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:UpdateProjectRequest_FieldNumber_Status];
  return GPBGetMessageRawEnumField(message, field);
}

void SetUpdateProjectRequest_Status_RawValue(UpdateProjectRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [UpdateProjectRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:UpdateProjectRequest_FieldNumber_Status];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - ListProjectRequest

@implementation ListProjectRequest

@dynamic hasOwnerId, ownerId;

typedef struct ListProjectRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *ownerId;
} ListProjectRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ownerId",
        .dataTypeSpecific.clazz = Nil,
        .number = ListProjectRequest_FieldNumber_OwnerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ListProjectRequest__storage_, ownerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ListProjectRequest class]
                                     rootClass:[ProjectRoot class]
                                          file:ProjectRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ListProjectRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetProjectRequest

@implementation GetProjectRequest

@dynamic id_p;
@dynamic hasOwnerId, ownerId;

typedef struct GetProjectRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *ownerId;
} GetProjectRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = GetProjectRequest_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetProjectRequest__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "ownerId",
        .dataTypeSpecific.clazz = Nil,
        .number = GetProjectRequest_FieldNumber_OwnerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetProjectRequest__storage_, ownerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetProjectRequest class]
                                     rootClass:[ProjectRoot class]
                                          file:ProjectRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetProjectRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DeleteProjectRequest

@implementation DeleteProjectRequest

@dynamic id_p;
@dynamic hasOwnerId, ownerId;

typedef struct DeleteProjectRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *ownerId;
} DeleteProjectRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = DeleteProjectRequest_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DeleteProjectRequest__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "ownerId",
        .dataTypeSpecific.clazz = Nil,
        .number = DeleteProjectRequest_FieldNumber_OwnerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DeleteProjectRequest__storage_, ownerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DeleteProjectRequest class]
                                     rootClass:[ProjectRoot class]
                                          file:ProjectRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DeleteProjectRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryAssetsRequest

@implementation QueryAssetsRequest

@dynamic id_p;
@dynamic hasOwnerId, ownerId;
@dynamic hasSince, since;
@dynamic hasUntil, until;
@dynamic hasLimit, limit;
@dynamic hasStartKey, startKey;
@dynamic useArray, useArray_Count;
@dynamic sortDir;

typedef struct QueryAssetsRequest__storage_ {
  uint32_t _has_storage_[1];
  ProjectSortDir sortDir;
  NSString *id_p;
  NSString *ownerId;
  NSString *startKey;
  GPBEnumArray *useArray;
  uint64_t since;
  uint64_t until;
  uint64_t limit;
} QueryAssetsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryAssetsRequest_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryAssetsRequest__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "ownerId",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryAssetsRequest_FieldNumber_OwnerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(QueryAssetsRequest__storage_, ownerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "since",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryAssetsRequest_FieldNumber_Since,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(QueryAssetsRequest__storage_, since),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "until",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryAssetsRequest_FieldNumber_Until,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(QueryAssetsRequest__storage_, until),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "limit",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryAssetsRequest_FieldNumber_Limit,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(QueryAssetsRequest__storage_, limit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "startKey",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryAssetsRequest_FieldNumber_StartKey,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(QueryAssetsRequest__storage_, startKey),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "useArray",
        .dataTypeSpecific.enumDescFunc = ProjectAssetUse_EnumDescriptor,
        .number = QueryAssetsRequest_FieldNumber_UseArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(QueryAssetsRequest__storage_, useArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "sortDir",
        .dataTypeSpecific.enumDescFunc = ProjectSortDir_EnumDescriptor,
        .number = QueryAssetsRequest_FieldNumber_SortDir,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(QueryAssetsRequest__storage_, sortDir),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[QueryAssetsRequest class]
                                     rootClass:[ProjectRoot class]
                                          file:ProjectRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryAssetsRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t QueryAssetsRequest_SortDir_RawValue(QueryAssetsRequest *message) {
  GPBDescriptor *descriptor = [QueryAssetsRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:QueryAssetsRequest_FieldNumber_SortDir];
  return GPBGetMessageRawEnumField(message, field);
}

void SetQueryAssetsRequest_SortDir_RawValue(QueryAssetsRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [QueryAssetsRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:QueryAssetsRequest_FieldNumber_SortDir];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - QueryAssetsResponse

@implementation QueryAssetsResponse

@dynamic assetsArray, assetsArray_Count;
@dynamic hasLastKey, lastKey;

typedef struct QueryAssetsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *assetsArray;
  NSString *lastKey;
} QueryAssetsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "assetsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(ProjectAsset),
        .number = QueryAssetsResponse_FieldNumber_AssetsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(QueryAssetsResponse__storage_, assetsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "lastKey",
        .dataTypeSpecific.clazz = Nil,
        .number = QueryAssetsResponse_FieldNumber_LastKey,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryAssetsResponse__storage_, lastKey),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[QueryAssetsResponse class]
                                     rootClass:[ProjectRoot class]
                                          file:ProjectRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryAssetsResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
