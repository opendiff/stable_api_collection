// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dashboard.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Dashboard.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(APIKey);
GPBObjCClassDeclaration(Charge);
GPBObjCClassDeclaration(CostData);
GPBObjCClassDeclaration(CostTotal);
GPBObjCClassDeclaration(Organization);
GPBObjCClassDeclaration(OrganizationAutoCharge);
GPBObjCClassDeclaration(OrganizationGrant);
GPBObjCClassDeclaration(OrganizationMember);
GPBObjCClassDeclaration(OrganizationPaymentInfo);
GPBObjCClassDeclaration(TotalMetricsData);
GPBObjCClassDeclaration(UsageMetric);
GPBObjCClassDeclaration(User);

#pragma mark - DashboardRoot

@implementation DashboardRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - DashboardRoot_FileDescriptor

static GPBFileDescriptor *DashboardRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"gooseai"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum OrganizationRole

GPBEnumDescriptor *OrganizationRole_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Member\000Accountant\000Owner\000";
    static const int32_t values[] = {
        OrganizationRole_Member,
        OrganizationRole_Accountant,
        OrganizationRole_Owner,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(OrganizationRole)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:OrganizationRole_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL OrganizationRole_IsValidValue(int32_t value__) {
  switch (value__) {
    case OrganizationRole_Member:
    case OrganizationRole_Accountant:
    case OrganizationRole_Owner:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - OrganizationMember

@implementation OrganizationMember

@dynamic hasOrganization, organization;
@dynamic hasUser, user;
@dynamic role;
@dynamic isDefault;

typedef struct OrganizationMember__storage_ {
  uint32_t _has_storage_[1];
  OrganizationRole role;
  Organization *organization;
  User *user;
} OrganizationMember__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "organization",
        .dataTypeSpecific.clazz = GPBObjCClass(Organization),
        .number = OrganizationMember_FieldNumber_Organization,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OrganizationMember__storage_, organization),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "user",
        .dataTypeSpecific.clazz = GPBObjCClass(User),
        .number = OrganizationMember_FieldNumber_User,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OrganizationMember__storage_, user),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "role",
        .dataTypeSpecific.enumDescFunc = OrganizationRole_EnumDescriptor,
        .number = OrganizationMember_FieldNumber_Role,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OrganizationMember__storage_, role),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "isDefault",
        .dataTypeSpecific.clazz = Nil,
        .number = OrganizationMember_FieldNumber_IsDefault,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OrganizationMember class]
                                     rootClass:[DashboardRoot class]
                                          file:DashboardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OrganizationMember__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t OrganizationMember_Role_RawValue(OrganizationMember *message) {
  GPBDescriptor *descriptor = [OrganizationMember descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OrganizationMember_FieldNumber_Role];
  return GPBGetMessageRawEnumField(message, field);
}

void SetOrganizationMember_Role_RawValue(OrganizationMember *message, int32_t value) {
  GPBDescriptor *descriptor = [OrganizationMember descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OrganizationMember_FieldNumber_Role];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - OrganizationGrant

@implementation OrganizationGrant

@dynamic amountGranted;
@dynamic amountUsed;
@dynamic expiresAt;
@dynamic grantedAt;

typedef struct OrganizationGrant__storage_ {
  uint32_t _has_storage_[1];
  double amountGranted;
  double amountUsed;
  uint64_t expiresAt;
  uint64_t grantedAt;
} OrganizationGrant__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "amountGranted",
        .dataTypeSpecific.clazz = Nil,
        .number = OrganizationGrant_FieldNumber_AmountGranted,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OrganizationGrant__storage_, amountGranted),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "amountUsed",
        .dataTypeSpecific.clazz = Nil,
        .number = OrganizationGrant_FieldNumber_AmountUsed,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OrganizationGrant__storage_, amountUsed),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "expiresAt",
        .dataTypeSpecific.clazz = Nil,
        .number = OrganizationGrant_FieldNumber_ExpiresAt,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OrganizationGrant__storage_, expiresAt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "grantedAt",
        .dataTypeSpecific.clazz = Nil,
        .number = OrganizationGrant_FieldNumber_GrantedAt,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(OrganizationGrant__storage_, grantedAt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OrganizationGrant class]
                                     rootClass:[DashboardRoot class]
                                          file:DashboardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OrganizationGrant__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OrganizationPaymentInfo

@implementation OrganizationPaymentInfo

@dynamic balance;
@dynamic grantsArray, grantsArray_Count;

typedef struct OrganizationPaymentInfo__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *grantsArray;
  double balance;
} OrganizationPaymentInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "balance",
        .dataTypeSpecific.clazz = Nil,
        .number = OrganizationPaymentInfo_FieldNumber_Balance,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OrganizationPaymentInfo__storage_, balance),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "grantsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(OrganizationGrant),
        .number = OrganizationPaymentInfo_FieldNumber_GrantsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(OrganizationPaymentInfo__storage_, grantsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OrganizationPaymentInfo class]
                                     rootClass:[DashboardRoot class]
                                          file:DashboardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OrganizationPaymentInfo__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OrganizationAutoCharge

@implementation OrganizationAutoCharge

@dynamic enabled;
@dynamic id_p;
@dynamic createdAt;

typedef struct OrganizationAutoCharge__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  uint64_t createdAt;
} OrganizationAutoCharge__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "enabled",
        .dataTypeSpecific.clazz = Nil,
        .number = OrganizationAutoCharge_FieldNumber_Enabled,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = OrganizationAutoCharge_FieldNumber_Id_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OrganizationAutoCharge__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "createdAt",
        .dataTypeSpecific.clazz = Nil,
        .number = OrganizationAutoCharge_FieldNumber_CreatedAt,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(OrganizationAutoCharge__storage_, createdAt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OrganizationAutoCharge class]
                                     rootClass:[DashboardRoot class]
                                          file:DashboardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OrganizationAutoCharge__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Organization

@implementation Organization

@dynamic id_p;
@dynamic name;
@dynamic description_p;
@dynamic membersArray, membersArray_Count;
@dynamic hasPaymentInfo, paymentInfo;
@dynamic hasStripeCustomerId, stripeCustomerId;
@dynamic hasAutoCharge, autoCharge;

typedef struct Organization__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *name;
  NSString *description_p;
  NSMutableArray *membersArray;
  OrganizationPaymentInfo *paymentInfo;
  NSString *stripeCustomerId;
  OrganizationAutoCharge *autoCharge;
} Organization__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = Organization_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Organization__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = Organization_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Organization__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.clazz = Nil,
        .number = Organization_FieldNumber_Description_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Organization__storage_, description_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "membersArray",
        .dataTypeSpecific.clazz = GPBObjCClass(OrganizationMember),
        .number = Organization_FieldNumber_MembersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Organization__storage_, membersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "paymentInfo",
        .dataTypeSpecific.clazz = GPBObjCClass(OrganizationPaymentInfo),
        .number = Organization_FieldNumber_PaymentInfo,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Organization__storage_, paymentInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "stripeCustomerId",
        .dataTypeSpecific.clazz = Nil,
        .number = Organization_FieldNumber_StripeCustomerId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Organization__storage_, stripeCustomerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "autoCharge",
        .dataTypeSpecific.clazz = GPBObjCClass(OrganizationAutoCharge),
        .number = Organization_FieldNumber_AutoCharge,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Organization__storage_, autoCharge),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Organization class]
                                     rootClass:[DashboardRoot class]
                                          file:DashboardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Organization__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - APIKey

@implementation APIKey

@dynamic key;
@dynamic isSecret;
@dynamic createdAt;

typedef struct APIKey__storage_ {
  uint32_t _has_storage_[1];
  NSString *key;
  uint64_t createdAt;
} APIKey__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "key",
        .dataTypeSpecific.clazz = Nil,
        .number = APIKey_FieldNumber_Key,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(APIKey__storage_, key),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isSecret",
        .dataTypeSpecific.clazz = Nil,
        .number = APIKey_FieldNumber_IsSecret,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "createdAt",
        .dataTypeSpecific.clazz = Nil,
        .number = APIKey_FieldNumber_CreatedAt,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(APIKey__storage_, createdAt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[APIKey class]
                                     rootClass:[DashboardRoot class]
                                          file:DashboardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(APIKey__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - User

@implementation User

@dynamic id_p;
@dynamic hasAuthId, authId;
@dynamic profilePicture;
@dynamic email;
@dynamic organizationsArray, organizationsArray_Count;
@dynamic apiKeysArray, apiKeysArray_Count;
@dynamic createdAt;
@dynamic hasEmailVerified, emailVerified;

typedef struct User__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *authId;
  NSString *profilePicture;
  NSString *email;
  NSMutableArray *organizationsArray;
  NSMutableArray *apiKeysArray;
  uint64_t createdAt;
} User__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = User_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(User__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "authId",
        .dataTypeSpecific.clazz = Nil,
        .number = User_FieldNumber_AuthId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(User__storage_, authId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "profilePicture",
        .dataTypeSpecific.clazz = Nil,
        .number = User_FieldNumber_ProfilePicture,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(User__storage_, profilePicture),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "email",
        .dataTypeSpecific.clazz = Nil,
        .number = User_FieldNumber_Email,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(User__storage_, email),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "organizationsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(OrganizationMember),
        .number = User_FieldNumber_OrganizationsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(User__storage_, organizationsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "apiKeysArray",
        .dataTypeSpecific.clazz = GPBObjCClass(APIKey),
        .number = User_FieldNumber_ApiKeysArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(User__storage_, apiKeysArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "createdAt",
        .dataTypeSpecific.clazz = Nil,
        .number = User_FieldNumber_CreatedAt,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(User__storage_, createdAt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "emailVerified",
        .dataTypeSpecific.clazz = Nil,
        .number = User_FieldNumber_EmailVerified,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[User class]
                                     rootClass:[DashboardRoot class]
                                          file:DashboardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(User__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CostData

@implementation CostData

@dynamic amountTokens;
@dynamic amountCredits;

typedef struct CostData__storage_ {
  uint32_t _has_storage_[1];
  uint32_t amountTokens;
  double amountCredits;
} CostData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "amountTokens",
        .dataTypeSpecific.clazz = Nil,
        .number = CostData_FieldNumber_AmountTokens,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CostData__storage_, amountTokens),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "amountCredits",
        .dataTypeSpecific.clazz = Nil,
        .number = CostData_FieldNumber_AmountCredits,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CostData__storage_, amountCredits),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CostData class]
                                     rootClass:[DashboardRoot class]
                                          file:DashboardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CostData__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UsageMetric

@implementation UsageMetric

@dynamic operation;
@dynamic engine;
@dynamic hasInputCost, inputCost;
@dynamic hasOutputCost, outputCost;
@dynamic hasUser, user;
@dynamic aggregationTimestamp;

typedef struct UsageMetric__storage_ {
  uint32_t _has_storage_[1];
  NSString *operation;
  NSString *engine;
  CostData *inputCost;
  CostData *outputCost;
  NSString *user;
  uint64_t aggregationTimestamp;
} UsageMetric__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "operation",
        .dataTypeSpecific.clazz = Nil,
        .number = UsageMetric_FieldNumber_Operation,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UsageMetric__storage_, operation),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "engine",
        .dataTypeSpecific.clazz = Nil,
        .number = UsageMetric_FieldNumber_Engine,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UsageMetric__storage_, engine),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "inputCost",
        .dataTypeSpecific.clazz = GPBObjCClass(CostData),
        .number = UsageMetric_FieldNumber_InputCost,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UsageMetric__storage_, inputCost),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "outputCost",
        .dataTypeSpecific.clazz = GPBObjCClass(CostData),
        .number = UsageMetric_FieldNumber_OutputCost,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(UsageMetric__storage_, outputCost),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "user",
        .dataTypeSpecific.clazz = Nil,
        .number = UsageMetric_FieldNumber_User,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(UsageMetric__storage_, user),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "aggregationTimestamp",
        .dataTypeSpecific.clazz = Nil,
        .number = UsageMetric_FieldNumber_AggregationTimestamp,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(UsageMetric__storage_, aggregationTimestamp),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UsageMetric class]
                                     rootClass:[DashboardRoot class]
                                          file:DashboardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UsageMetric__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CostTotal

@implementation CostTotal

@dynamic amountTokens;
@dynamic amountCredits;

typedef struct CostTotal__storage_ {
  uint32_t _has_storage_[1];
  uint32_t amountTokens;
  double amountCredits;
} CostTotal__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "amountTokens",
        .dataTypeSpecific.clazz = Nil,
        .number = CostTotal_FieldNumber_AmountTokens,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CostTotal__storage_, amountTokens),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "amountCredits",
        .dataTypeSpecific.clazz = Nil,
        .number = CostTotal_FieldNumber_AmountCredits,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CostTotal__storage_, amountCredits),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CostTotal class]
                                     rootClass:[DashboardRoot class]
                                          file:DashboardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CostTotal__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TotalMetricsData

@implementation TotalMetricsData

@dynamic hasInputTotal, inputTotal;
@dynamic hasOutputTotal, outputTotal;

typedef struct TotalMetricsData__storage_ {
  uint32_t _has_storage_[1];
  CostTotal *inputTotal;
  CostTotal *outputTotal;
} TotalMetricsData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "inputTotal",
        .dataTypeSpecific.clazz = GPBObjCClass(CostTotal),
        .number = TotalMetricsData_FieldNumber_InputTotal,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TotalMetricsData__storage_, inputTotal),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "outputTotal",
        .dataTypeSpecific.clazz = GPBObjCClass(CostTotal),
        .number = TotalMetricsData_FieldNumber_OutputTotal,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TotalMetricsData__storage_, outputTotal),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TotalMetricsData class]
                                     rootClass:[DashboardRoot class]
                                          file:DashboardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TotalMetricsData__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Metrics

@implementation Metrics

@dynamic metricsArray, metricsArray_Count;
@dynamic hasTotal, total;

typedef struct Metrics__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *metricsArray;
  TotalMetricsData *total;
} Metrics__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "metricsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(UsageMetric),
        .number = Metrics_FieldNumber_MetricsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Metrics__storage_, metricsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "total",
        .dataTypeSpecific.clazz = GPBObjCClass(TotalMetricsData),
        .number = Metrics_FieldNumber_Total,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Metrics__storage_, total),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Metrics class]
                                     rootClass:[DashboardRoot class]
                                          file:DashboardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Metrics__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - EmptyRequest

@implementation EmptyRequest


typedef struct EmptyRequest__storage_ {
  uint32_t _has_storage_[1];
} EmptyRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[EmptyRequest class]
                                     rootClass:[DashboardRoot class]
                                          file:DashboardRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(EmptyRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetOrganizationRequest

@implementation GetOrganizationRequest

@dynamic id_p;

typedef struct GetOrganizationRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
} GetOrganizationRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = GetOrganizationRequest_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetOrganizationRequest__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetOrganizationRequest class]
                                     rootClass:[DashboardRoot class]
                                          file:DashboardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetOrganizationRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetMetricsRequest

@implementation GetMetricsRequest

@dynamic organizationId;
@dynamic hasUserId, userId;
@dynamic rangeFrom;
@dynamic rangeTo;
@dynamic includePerRequestMetrics;

typedef struct GetMetricsRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *organizationId;
  NSString *userId;
  uint64_t rangeFrom;
  uint64_t rangeTo;
} GetMetricsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "organizationId",
        .dataTypeSpecific.clazz = Nil,
        .number = GetMetricsRequest_FieldNumber_OrganizationId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetMetricsRequest__storage_, organizationId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = GetMetricsRequest_FieldNumber_UserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetMetricsRequest__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "rangeFrom",
        .dataTypeSpecific.clazz = Nil,
        .number = GetMetricsRequest_FieldNumber_RangeFrom,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetMetricsRequest__storage_, rangeFrom),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "rangeTo",
        .dataTypeSpecific.clazz = Nil,
        .number = GetMetricsRequest_FieldNumber_RangeTo,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetMetricsRequest__storage_, rangeTo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "includePerRequestMetrics",
        .dataTypeSpecific.clazz = Nil,
        .number = GetMetricsRequest_FieldNumber_IncludePerRequestMetrics,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetMetricsRequest class]
                                     rootClass:[DashboardRoot class]
                                          file:DashboardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetMetricsRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - APIKeyRequest

@implementation APIKeyRequest

@dynamic isSecret;

typedef struct APIKeyRequest__storage_ {
  uint32_t _has_storage_[1];
} APIKeyRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "isSecret",
        .dataTypeSpecific.clazz = Nil,
        .number = APIKeyRequest_FieldNumber_IsSecret,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[APIKeyRequest class]
                                     rootClass:[DashboardRoot class]
                                          file:DashboardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(APIKeyRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - APIKeyFindRequest

@implementation APIKeyFindRequest

@dynamic id_p;

typedef struct APIKeyFindRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
} APIKeyFindRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = APIKeyFindRequest_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(APIKeyFindRequest__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[APIKeyFindRequest class]
                                     rootClass:[DashboardRoot class]
                                          file:DashboardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(APIKeyFindRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateDefaultOrganizationRequest

@implementation UpdateDefaultOrganizationRequest

@dynamic organizationId;

typedef struct UpdateDefaultOrganizationRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *organizationId;
} UpdateDefaultOrganizationRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "organizationId",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateDefaultOrganizationRequest_FieldNumber_OrganizationId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateDefaultOrganizationRequest__storage_, organizationId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateDefaultOrganizationRequest class]
                                     rootClass:[DashboardRoot class]
                                          file:DashboardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateDefaultOrganizationRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ClientSettings

@implementation ClientSettings

@dynamic settings;

typedef struct ClientSettings__storage_ {
  uint32_t _has_storage_[1];
  NSData *settings;
} ClientSettings__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "settings",
        .dataTypeSpecific.clazz = Nil,
        .number = ClientSettings_FieldNumber_Settings,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ClientSettings__storage_, settings),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ClientSettings class]
                                     rootClass:[DashboardRoot class]
                                          file:DashboardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ClientSettings__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CreateAutoChargeIntentRequest

@implementation CreateAutoChargeIntentRequest

@dynamic organizationId;
@dynamic monthlyMaximum;
@dynamic minimumValue;
@dynamic amountCredits;

typedef struct CreateAutoChargeIntentRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *organizationId;
  uint64_t monthlyMaximum;
  uint64_t minimumValue;
  uint64_t amountCredits;
} CreateAutoChargeIntentRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "organizationId",
        .dataTypeSpecific.clazz = Nil,
        .number = CreateAutoChargeIntentRequest_FieldNumber_OrganizationId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CreateAutoChargeIntentRequest__storage_, organizationId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "monthlyMaximum",
        .dataTypeSpecific.clazz = Nil,
        .number = CreateAutoChargeIntentRequest_FieldNumber_MonthlyMaximum,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CreateAutoChargeIntentRequest__storage_, monthlyMaximum),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "minimumValue",
        .dataTypeSpecific.clazz = Nil,
        .number = CreateAutoChargeIntentRequest_FieldNumber_MinimumValue,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CreateAutoChargeIntentRequest__storage_, minimumValue),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "amountCredits",
        .dataTypeSpecific.clazz = Nil,
        .number = CreateAutoChargeIntentRequest_FieldNumber_AmountCredits,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CreateAutoChargeIntentRequest__storage_, amountCredits),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CreateAutoChargeIntentRequest class]
                                     rootClass:[DashboardRoot class]
                                          file:DashboardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CreateAutoChargeIntentRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CreateChargeRequest

@implementation CreateChargeRequest

@dynamic amount;
@dynamic organizationId;

typedef struct CreateChargeRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *organizationId;
  uint64_t amount;
} CreateChargeRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "amount",
        .dataTypeSpecific.clazz = Nil,
        .number = CreateChargeRequest_FieldNumber_Amount,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CreateChargeRequest__storage_, amount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "organizationId",
        .dataTypeSpecific.clazz = Nil,
        .number = CreateChargeRequest_FieldNumber_OrganizationId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CreateChargeRequest__storage_, organizationId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CreateChargeRequest class]
                                     rootClass:[DashboardRoot class]
                                          file:DashboardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CreateChargeRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetChargesRequest

@implementation GetChargesRequest

@dynamic organizationId;
@dynamic rangeFrom;
@dynamic rangeTo;

typedef struct GetChargesRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *organizationId;
  uint64_t rangeFrom;
  uint64_t rangeTo;
} GetChargesRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "organizationId",
        .dataTypeSpecific.clazz = Nil,
        .number = GetChargesRequest_FieldNumber_OrganizationId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetChargesRequest__storage_, organizationId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "rangeFrom",
        .dataTypeSpecific.clazz = Nil,
        .number = GetChargesRequest_FieldNumber_RangeFrom,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetChargesRequest__storage_, rangeFrom),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "rangeTo",
        .dataTypeSpecific.clazz = Nil,
        .number = GetChargesRequest_FieldNumber_RangeTo,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetChargesRequest__storage_, rangeTo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetChargesRequest class]
                                     rootClass:[DashboardRoot class]
                                          file:DashboardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetChargesRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Charge

@implementation Charge

@dynamic id_p;
@dynamic paid;
@dynamic receiptLink;
@dynamic paymentLink;
@dynamic createdAt;
@dynamic amountCredits;

typedef struct Charge__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *receiptLink;
  NSString *paymentLink;
  uint64_t createdAt;
  uint64_t amountCredits;
} Charge__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = Charge_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Charge__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "paid",
        .dataTypeSpecific.clazz = Nil,
        .number = Charge_FieldNumber_Paid,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "receiptLink",
        .dataTypeSpecific.clazz = Nil,
        .number = Charge_FieldNumber_ReceiptLink,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Charge__storage_, receiptLink),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "paymentLink",
        .dataTypeSpecific.clazz = Nil,
        .number = Charge_FieldNumber_PaymentLink,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Charge__storage_, paymentLink),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "createdAt",
        .dataTypeSpecific.clazz = Nil,
        .number = Charge_FieldNumber_CreatedAt,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Charge__storage_, createdAt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "amountCredits",
        .dataTypeSpecific.clazz = Nil,
        .number = Charge_FieldNumber_AmountCredits,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(Charge__storage_, amountCredits),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Charge class]
                                     rootClass:[DashboardRoot class]
                                          file:DashboardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Charge__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Charges

@implementation Charges

@dynamic chargesArray, chargesArray_Count;

typedef struct Charges__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *chargesArray;
} Charges__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "chargesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Charge),
        .number = Charges_FieldNumber_ChargesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Charges__storage_, chargesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Charges class]
                                     rootClass:[DashboardRoot class]
                                          file:DashboardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Charges__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetAutoChargeRequest

@implementation GetAutoChargeRequest

@dynamic organizationId;

typedef struct GetAutoChargeRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *organizationId;
} GetAutoChargeRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "organizationId",
        .dataTypeSpecific.clazz = Nil,
        .number = GetAutoChargeRequest_FieldNumber_OrganizationId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetAutoChargeRequest__storage_, organizationId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetAutoChargeRequest class]
                                     rootClass:[DashboardRoot class]
                                          file:DashboardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetAutoChargeRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AutoChargeIntent

@implementation AutoChargeIntent

@dynamic id_p;
@dynamic paymentLink;
@dynamic createdAt;
@dynamic monthlyMaximum;
@dynamic minimumValue;
@dynamic amountCredits;

typedef struct AutoChargeIntent__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *paymentLink;
  uint64_t createdAt;
  uint64_t monthlyMaximum;
  uint64_t minimumValue;
  uint64_t amountCredits;
} AutoChargeIntent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = AutoChargeIntent_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AutoChargeIntent__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "paymentLink",
        .dataTypeSpecific.clazz = Nil,
        .number = AutoChargeIntent_FieldNumber_PaymentLink,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AutoChargeIntent__storage_, paymentLink),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "createdAt",
        .dataTypeSpecific.clazz = Nil,
        .number = AutoChargeIntent_FieldNumber_CreatedAt,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AutoChargeIntent__storage_, createdAt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "monthlyMaximum",
        .dataTypeSpecific.clazz = Nil,
        .number = AutoChargeIntent_FieldNumber_MonthlyMaximum,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(AutoChargeIntent__storage_, monthlyMaximum),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "minimumValue",
        .dataTypeSpecific.clazz = Nil,
        .number = AutoChargeIntent_FieldNumber_MinimumValue,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(AutoChargeIntent__storage_, minimumValue),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "amountCredits",
        .dataTypeSpecific.clazz = Nil,
        .number = AutoChargeIntent_FieldNumber_AmountCredits,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(AutoChargeIntent__storage_, amountCredits),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AutoChargeIntent class]
                                     rootClass:[DashboardRoot class]
                                          file:DashboardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AutoChargeIntent__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateUserInfoRequest

@implementation UpdateUserInfoRequest

@dynamic hasEmail, email;

typedef struct UpdateUserInfoRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *email;
} UpdateUserInfoRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "email",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateUserInfoRequest_FieldNumber_Email,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateUserInfoRequest__storage_, email),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateUserInfoRequest class]
                                     rootClass:[DashboardRoot class]
                                          file:DashboardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateUserInfoRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UserPasswordChangeTicket

@implementation UserPasswordChangeTicket

@dynamic ticket;

typedef struct UserPasswordChangeTicket__storage_ {
  uint32_t _has_storage_[1];
  NSString *ticket;
} UserPasswordChangeTicket__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ticket",
        .dataTypeSpecific.clazz = Nil,
        .number = UserPasswordChangeTicket_FieldNumber_Ticket,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UserPasswordChangeTicket__storage_, ticket),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserPasswordChangeTicket class]
                                     rootClass:[DashboardRoot class]
                                          file:DashboardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UserPasswordChangeTicket__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
