//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: dashboard.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Gooseai_DashboardServiceClient`, then call methods of this protocol to make API calls.
internal protocol Gooseai_DashboardServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Gooseai_DashboardServiceClientInterceptorFactoryProtocol? { get }

  func getMe(
    _ request: Gooseai_EmptyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Gooseai_EmptyRequest, Gooseai_User>

  func getOrganization(
    _ request: Gooseai_GetOrganizationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Gooseai_GetOrganizationRequest, Gooseai_Organization>

  func getMetrics(
    _ request: Gooseai_GetMetricsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Gooseai_GetMetricsRequest, Gooseai_Metrics>

  func createAPIKey(
    _ request: Gooseai_APIKeyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Gooseai_APIKeyRequest, Gooseai_APIKey>

  func deleteAPIKey(
    _ request: Gooseai_APIKeyFindRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Gooseai_APIKeyFindRequest, Gooseai_APIKey>

  func updateDefaultOrganization(
    _ request: Gooseai_UpdateDefaultOrganizationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Gooseai_UpdateDefaultOrganizationRequest, Gooseai_User>

  func getClientSettings(
    _ request: Gooseai_EmptyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Gooseai_EmptyRequest, Gooseai_ClientSettings>

  func setClientSettings(
    _ request: Gooseai_ClientSettings,
    callOptions: CallOptions?
  ) -> UnaryCall<Gooseai_ClientSettings, Gooseai_ClientSettings>

  func updateUserInfo(
    _ request: Gooseai_UpdateUserInfoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Gooseai_UpdateUserInfoRequest, Gooseai_User>

  func createPasswordChangeTicket(
    _ request: Gooseai_EmptyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Gooseai_EmptyRequest, Gooseai_UserPasswordChangeTicket>

  func deleteAccount(
    _ request: Gooseai_EmptyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Gooseai_EmptyRequest, Gooseai_User>

  func createCharge(
    _ request: Gooseai_CreateChargeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Gooseai_CreateChargeRequest, Gooseai_Charge>

  func getCharges(
    _ request: Gooseai_GetChargesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Gooseai_GetChargesRequest, Gooseai_Charges>

  func createAutoChargeIntent(
    _ request: Gooseai_CreateAutoChargeIntentRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Gooseai_CreateAutoChargeIntentRequest, Gooseai_AutoChargeIntent>

  func updateAutoChargeIntent(
    _ request: Gooseai_CreateAutoChargeIntentRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Gooseai_CreateAutoChargeIntentRequest, Gooseai_AutoChargeIntent>

  func getAutoChargeIntent(
    _ request: Gooseai_GetAutoChargeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Gooseai_GetAutoChargeRequest, Gooseai_AutoChargeIntent>
}

extension Gooseai_DashboardServiceClientProtocol {
  internal var serviceName: String {
    return "gooseai.DashboardService"
  }

  /// Get info
  ///
  /// - Parameters:
  ///   - request: Request to send to GetMe.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getMe(
    _ request: Gooseai_EmptyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gooseai_EmptyRequest, Gooseai_User> {
    return self.makeUnaryCall(
      path: Gooseai_DashboardServiceClientMetadata.Methods.getMe.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMeInterceptors() ?? []
    )
  }

  /// Unary call to GetOrganization
  ///
  /// - Parameters:
  ///   - request: Request to send to GetOrganization.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getOrganization(
    _ request: Gooseai_GetOrganizationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gooseai_GetOrganizationRequest, Gooseai_Organization> {
    return self.makeUnaryCall(
      path: Gooseai_DashboardServiceClientMetadata.Methods.getOrganization.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetOrganizationInterceptors() ?? []
    )
  }

  /// Unary call to GetMetrics
  ///
  /// - Parameters:
  ///   - request: Request to send to GetMetrics.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getMetrics(
    _ request: Gooseai_GetMetricsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gooseai_GetMetricsRequest, Gooseai_Metrics> {
    return self.makeUnaryCall(
      path: Gooseai_DashboardServiceClientMetadata.Methods.getMetrics.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMetricsInterceptors() ?? []
    )
  }

  /// API key management
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateAPIKey.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createAPIKey(
    _ request: Gooseai_APIKeyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gooseai_APIKeyRequest, Gooseai_APIKey> {
    return self.makeUnaryCall(
      path: Gooseai_DashboardServiceClientMetadata.Methods.createAPIKey.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateAPIKeyInterceptors() ?? []
    )
  }

  /// Unary call to DeleteAPIKey
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteAPIKey.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteAPIKey(
    _ request: Gooseai_APIKeyFindRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gooseai_APIKeyFindRequest, Gooseai_APIKey> {
    return self.makeUnaryCall(
      path: Gooseai_DashboardServiceClientMetadata.Methods.deleteAPIKey.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteAPIKeyInterceptors() ?? []
    )
  }

  /// User settings
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateDefaultOrganization.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateDefaultOrganization(
    _ request: Gooseai_UpdateDefaultOrganizationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gooseai_UpdateDefaultOrganizationRequest, Gooseai_User> {
    return self.makeUnaryCall(
      path: Gooseai_DashboardServiceClientMetadata.Methods.updateDefaultOrganization.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateDefaultOrganizationInterceptors() ?? []
    )
  }

  /// Unary call to GetClientSettings
  ///
  /// - Parameters:
  ///   - request: Request to send to GetClientSettings.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getClientSettings(
    _ request: Gooseai_EmptyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gooseai_EmptyRequest, Gooseai_ClientSettings> {
    return self.makeUnaryCall(
      path: Gooseai_DashboardServiceClientMetadata.Methods.getClientSettings.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetClientSettingsInterceptors() ?? []
    )
  }

  /// Unary call to SetClientSettings
  ///
  /// - Parameters:
  ///   - request: Request to send to SetClientSettings.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setClientSettings(
    _ request: Gooseai_ClientSettings,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gooseai_ClientSettings, Gooseai_ClientSettings> {
    return self.makeUnaryCall(
      path: Gooseai_DashboardServiceClientMetadata.Methods.setClientSettings.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetClientSettingsInterceptors() ?? []
    )
  }

  /// Unary call to UpdateUserInfo
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateUserInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateUserInfo(
    _ request: Gooseai_UpdateUserInfoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gooseai_UpdateUserInfoRequest, Gooseai_User> {
    return self.makeUnaryCall(
      path: Gooseai_DashboardServiceClientMetadata.Methods.updateUserInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateUserInfoInterceptors() ?? []
    )
  }

  /// Unary call to CreatePasswordChangeTicket
  ///
  /// - Parameters:
  ///   - request: Request to send to CreatePasswordChangeTicket.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createPasswordChangeTicket(
    _ request: Gooseai_EmptyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gooseai_EmptyRequest, Gooseai_UserPasswordChangeTicket> {
    return self.makeUnaryCall(
      path: Gooseai_DashboardServiceClientMetadata.Methods.createPasswordChangeTicket.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreatePasswordChangeTicketInterceptors() ?? []
    )
  }

  /// Unary call to DeleteAccount
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteAccount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteAccount(
    _ request: Gooseai_EmptyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gooseai_EmptyRequest, Gooseai_User> {
    return self.makeUnaryCall(
      path: Gooseai_DashboardServiceClientMetadata.Methods.deleteAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteAccountInterceptors() ?? []
    )
  }

  /// Payment functions
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateCharge.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createCharge(
    _ request: Gooseai_CreateChargeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gooseai_CreateChargeRequest, Gooseai_Charge> {
    return self.makeUnaryCall(
      path: Gooseai_DashboardServiceClientMetadata.Methods.createCharge.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateChargeInterceptors() ?? []
    )
  }

  /// Unary call to GetCharges
  ///
  /// - Parameters:
  ///   - request: Request to send to GetCharges.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getCharges(
    _ request: Gooseai_GetChargesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gooseai_GetChargesRequest, Gooseai_Charges> {
    return self.makeUnaryCall(
      path: Gooseai_DashboardServiceClientMetadata.Methods.getCharges.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetChargesInterceptors() ?? []
    )
  }

  /// Unary call to CreateAutoChargeIntent
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateAutoChargeIntent.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createAutoChargeIntent(
    _ request: Gooseai_CreateAutoChargeIntentRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gooseai_CreateAutoChargeIntentRequest, Gooseai_AutoChargeIntent> {
    return self.makeUnaryCall(
      path: Gooseai_DashboardServiceClientMetadata.Methods.createAutoChargeIntent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateAutoChargeIntentInterceptors() ?? []
    )
  }

  /// Unary call to UpdateAutoChargeIntent
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateAutoChargeIntent.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateAutoChargeIntent(
    _ request: Gooseai_CreateAutoChargeIntentRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gooseai_CreateAutoChargeIntentRequest, Gooseai_AutoChargeIntent> {
    return self.makeUnaryCall(
      path: Gooseai_DashboardServiceClientMetadata.Methods.updateAutoChargeIntent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateAutoChargeIntentInterceptors() ?? []
    )
  }

  /// Unary call to GetAutoChargeIntent
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAutoChargeIntent.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getAutoChargeIntent(
    _ request: Gooseai_GetAutoChargeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gooseai_GetAutoChargeRequest, Gooseai_AutoChargeIntent> {
    return self.makeUnaryCall(
      path: Gooseai_DashboardServiceClientMetadata.Methods.getAutoChargeIntent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAutoChargeIntentInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Gooseai_DashboardServiceClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Gooseai_DashboardServiceNIOClient")
internal final class Gooseai_DashboardServiceClient: Gooseai_DashboardServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Gooseai_DashboardServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Gooseai_DashboardServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the gooseai.DashboardService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Gooseai_DashboardServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Gooseai_DashboardServiceNIOClient: Gooseai_DashboardServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Gooseai_DashboardServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the gooseai.DashboardService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Gooseai_DashboardServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Gooseai_DashboardServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Gooseai_DashboardServiceClientInterceptorFactoryProtocol? { get }

  func makeGetMeCall(
    _ request: Gooseai_EmptyRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Gooseai_EmptyRequest, Gooseai_User>

  func makeGetOrganizationCall(
    _ request: Gooseai_GetOrganizationRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Gooseai_GetOrganizationRequest, Gooseai_Organization>

  func makeGetMetricsCall(
    _ request: Gooseai_GetMetricsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Gooseai_GetMetricsRequest, Gooseai_Metrics>

  func makeCreateApikeyCall(
    _ request: Gooseai_APIKeyRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Gooseai_APIKeyRequest, Gooseai_APIKey>

  func makeDeleteApikeyCall(
    _ request: Gooseai_APIKeyFindRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Gooseai_APIKeyFindRequest, Gooseai_APIKey>

  func makeUpdateDefaultOrganizationCall(
    _ request: Gooseai_UpdateDefaultOrganizationRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Gooseai_UpdateDefaultOrganizationRequest, Gooseai_User>

  func makeGetClientSettingsCall(
    _ request: Gooseai_EmptyRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Gooseai_EmptyRequest, Gooseai_ClientSettings>

  func makeSetClientSettingsCall(
    _ request: Gooseai_ClientSettings,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Gooseai_ClientSettings, Gooseai_ClientSettings>

  func makeUpdateUserInfoCall(
    _ request: Gooseai_UpdateUserInfoRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Gooseai_UpdateUserInfoRequest, Gooseai_User>

  func makeCreatePasswordChangeTicketCall(
    _ request: Gooseai_EmptyRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Gooseai_EmptyRequest, Gooseai_UserPasswordChangeTicket>

  func makeDeleteAccountCall(
    _ request: Gooseai_EmptyRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Gooseai_EmptyRequest, Gooseai_User>

  func makeCreateChargeCall(
    _ request: Gooseai_CreateChargeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Gooseai_CreateChargeRequest, Gooseai_Charge>

  func makeGetChargesCall(
    _ request: Gooseai_GetChargesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Gooseai_GetChargesRequest, Gooseai_Charges>

  func makeCreateAutoChargeIntentCall(
    _ request: Gooseai_CreateAutoChargeIntentRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Gooseai_CreateAutoChargeIntentRequest, Gooseai_AutoChargeIntent>

  func makeUpdateAutoChargeIntentCall(
    _ request: Gooseai_CreateAutoChargeIntentRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Gooseai_CreateAutoChargeIntentRequest, Gooseai_AutoChargeIntent>

  func makeGetAutoChargeIntentCall(
    _ request: Gooseai_GetAutoChargeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Gooseai_GetAutoChargeRequest, Gooseai_AutoChargeIntent>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Gooseai_DashboardServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Gooseai_DashboardServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: Gooseai_DashboardServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeGetMeCall(
    _ request: Gooseai_EmptyRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Gooseai_EmptyRequest, Gooseai_User> {
    return self.makeAsyncUnaryCall(
      path: Gooseai_DashboardServiceClientMetadata.Methods.getMe.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMeInterceptors() ?? []
    )
  }

  internal func makeGetOrganizationCall(
    _ request: Gooseai_GetOrganizationRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Gooseai_GetOrganizationRequest, Gooseai_Organization> {
    return self.makeAsyncUnaryCall(
      path: Gooseai_DashboardServiceClientMetadata.Methods.getOrganization.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetOrganizationInterceptors() ?? []
    )
  }

  internal func makeGetMetricsCall(
    _ request: Gooseai_GetMetricsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Gooseai_GetMetricsRequest, Gooseai_Metrics> {
    return self.makeAsyncUnaryCall(
      path: Gooseai_DashboardServiceClientMetadata.Methods.getMetrics.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMetricsInterceptors() ?? []
    )
  }

  internal func makeCreateApikeyCall(
    _ request: Gooseai_APIKeyRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Gooseai_APIKeyRequest, Gooseai_APIKey> {
    return self.makeAsyncUnaryCall(
      path: Gooseai_DashboardServiceClientMetadata.Methods.createAPIKey.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateAPIKeyInterceptors() ?? []
    )
  }

  internal func makeDeleteApikeyCall(
    _ request: Gooseai_APIKeyFindRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Gooseai_APIKeyFindRequest, Gooseai_APIKey> {
    return self.makeAsyncUnaryCall(
      path: Gooseai_DashboardServiceClientMetadata.Methods.deleteAPIKey.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteAPIKeyInterceptors() ?? []
    )
  }

  internal func makeUpdateDefaultOrganizationCall(
    _ request: Gooseai_UpdateDefaultOrganizationRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Gooseai_UpdateDefaultOrganizationRequest, Gooseai_User> {
    return self.makeAsyncUnaryCall(
      path: Gooseai_DashboardServiceClientMetadata.Methods.updateDefaultOrganization.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateDefaultOrganizationInterceptors() ?? []
    )
  }

  internal func makeGetClientSettingsCall(
    _ request: Gooseai_EmptyRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Gooseai_EmptyRequest, Gooseai_ClientSettings> {
    return self.makeAsyncUnaryCall(
      path: Gooseai_DashboardServiceClientMetadata.Methods.getClientSettings.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetClientSettingsInterceptors() ?? []
    )
  }

  internal func makeSetClientSettingsCall(
    _ request: Gooseai_ClientSettings,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Gooseai_ClientSettings, Gooseai_ClientSettings> {
    return self.makeAsyncUnaryCall(
      path: Gooseai_DashboardServiceClientMetadata.Methods.setClientSettings.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetClientSettingsInterceptors() ?? []
    )
  }

  internal func makeUpdateUserInfoCall(
    _ request: Gooseai_UpdateUserInfoRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Gooseai_UpdateUserInfoRequest, Gooseai_User> {
    return self.makeAsyncUnaryCall(
      path: Gooseai_DashboardServiceClientMetadata.Methods.updateUserInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateUserInfoInterceptors() ?? []
    )
  }

  internal func makeCreatePasswordChangeTicketCall(
    _ request: Gooseai_EmptyRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Gooseai_EmptyRequest, Gooseai_UserPasswordChangeTicket> {
    return self.makeAsyncUnaryCall(
      path: Gooseai_DashboardServiceClientMetadata.Methods.createPasswordChangeTicket.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreatePasswordChangeTicketInterceptors() ?? []
    )
  }

  internal func makeDeleteAccountCall(
    _ request: Gooseai_EmptyRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Gooseai_EmptyRequest, Gooseai_User> {
    return self.makeAsyncUnaryCall(
      path: Gooseai_DashboardServiceClientMetadata.Methods.deleteAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteAccountInterceptors() ?? []
    )
  }

  internal func makeCreateChargeCall(
    _ request: Gooseai_CreateChargeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Gooseai_CreateChargeRequest, Gooseai_Charge> {
    return self.makeAsyncUnaryCall(
      path: Gooseai_DashboardServiceClientMetadata.Methods.createCharge.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateChargeInterceptors() ?? []
    )
  }

  internal func makeGetChargesCall(
    _ request: Gooseai_GetChargesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Gooseai_GetChargesRequest, Gooseai_Charges> {
    return self.makeAsyncUnaryCall(
      path: Gooseai_DashboardServiceClientMetadata.Methods.getCharges.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetChargesInterceptors() ?? []
    )
  }

  internal func makeCreateAutoChargeIntentCall(
    _ request: Gooseai_CreateAutoChargeIntentRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Gooseai_CreateAutoChargeIntentRequest, Gooseai_AutoChargeIntent> {
    return self.makeAsyncUnaryCall(
      path: Gooseai_DashboardServiceClientMetadata.Methods.createAutoChargeIntent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateAutoChargeIntentInterceptors() ?? []
    )
  }

  internal func makeUpdateAutoChargeIntentCall(
    _ request: Gooseai_CreateAutoChargeIntentRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Gooseai_CreateAutoChargeIntentRequest, Gooseai_AutoChargeIntent> {
    return self.makeAsyncUnaryCall(
      path: Gooseai_DashboardServiceClientMetadata.Methods.updateAutoChargeIntent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateAutoChargeIntentInterceptors() ?? []
    )
  }

  internal func makeGetAutoChargeIntentCall(
    _ request: Gooseai_GetAutoChargeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Gooseai_GetAutoChargeRequest, Gooseai_AutoChargeIntent> {
    return self.makeAsyncUnaryCall(
      path: Gooseai_DashboardServiceClientMetadata.Methods.getAutoChargeIntent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAutoChargeIntentInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Gooseai_DashboardServiceAsyncClientProtocol {
  internal func getMe(
    _ request: Gooseai_EmptyRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Gooseai_User {
    return try await self.performAsyncUnaryCall(
      path: Gooseai_DashboardServiceClientMetadata.Methods.getMe.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMeInterceptors() ?? []
    )
  }

  internal func getOrganization(
    _ request: Gooseai_GetOrganizationRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Gooseai_Organization {
    return try await self.performAsyncUnaryCall(
      path: Gooseai_DashboardServiceClientMetadata.Methods.getOrganization.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetOrganizationInterceptors() ?? []
    )
  }

  internal func getMetrics(
    _ request: Gooseai_GetMetricsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Gooseai_Metrics {
    return try await self.performAsyncUnaryCall(
      path: Gooseai_DashboardServiceClientMetadata.Methods.getMetrics.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMetricsInterceptors() ?? []
    )
  }

  internal func createAPIKey(
    _ request: Gooseai_APIKeyRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Gooseai_APIKey {
    return try await self.performAsyncUnaryCall(
      path: Gooseai_DashboardServiceClientMetadata.Methods.createAPIKey.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateAPIKeyInterceptors() ?? []
    )
  }

  internal func deleteAPIKey(
    _ request: Gooseai_APIKeyFindRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Gooseai_APIKey {
    return try await self.performAsyncUnaryCall(
      path: Gooseai_DashboardServiceClientMetadata.Methods.deleteAPIKey.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteAPIKeyInterceptors() ?? []
    )
  }

  internal func updateDefaultOrganization(
    _ request: Gooseai_UpdateDefaultOrganizationRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Gooseai_User {
    return try await self.performAsyncUnaryCall(
      path: Gooseai_DashboardServiceClientMetadata.Methods.updateDefaultOrganization.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateDefaultOrganizationInterceptors() ?? []
    )
  }

  internal func getClientSettings(
    _ request: Gooseai_EmptyRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Gooseai_ClientSettings {
    return try await self.performAsyncUnaryCall(
      path: Gooseai_DashboardServiceClientMetadata.Methods.getClientSettings.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetClientSettingsInterceptors() ?? []
    )
  }

  internal func setClientSettings(
    _ request: Gooseai_ClientSettings,
    callOptions: CallOptions? = nil
  ) async throws -> Gooseai_ClientSettings {
    return try await self.performAsyncUnaryCall(
      path: Gooseai_DashboardServiceClientMetadata.Methods.setClientSettings.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetClientSettingsInterceptors() ?? []
    )
  }

  internal func updateUserInfo(
    _ request: Gooseai_UpdateUserInfoRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Gooseai_User {
    return try await self.performAsyncUnaryCall(
      path: Gooseai_DashboardServiceClientMetadata.Methods.updateUserInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateUserInfoInterceptors() ?? []
    )
  }

  internal func createPasswordChangeTicket(
    _ request: Gooseai_EmptyRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Gooseai_UserPasswordChangeTicket {
    return try await self.performAsyncUnaryCall(
      path: Gooseai_DashboardServiceClientMetadata.Methods.createPasswordChangeTicket.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreatePasswordChangeTicketInterceptors() ?? []
    )
  }

  internal func deleteAccount(
    _ request: Gooseai_EmptyRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Gooseai_User {
    return try await self.performAsyncUnaryCall(
      path: Gooseai_DashboardServiceClientMetadata.Methods.deleteAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteAccountInterceptors() ?? []
    )
  }

  internal func createCharge(
    _ request: Gooseai_CreateChargeRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Gooseai_Charge {
    return try await self.performAsyncUnaryCall(
      path: Gooseai_DashboardServiceClientMetadata.Methods.createCharge.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateChargeInterceptors() ?? []
    )
  }

  internal func getCharges(
    _ request: Gooseai_GetChargesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Gooseai_Charges {
    return try await self.performAsyncUnaryCall(
      path: Gooseai_DashboardServiceClientMetadata.Methods.getCharges.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetChargesInterceptors() ?? []
    )
  }

  internal func createAutoChargeIntent(
    _ request: Gooseai_CreateAutoChargeIntentRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Gooseai_AutoChargeIntent {
    return try await self.performAsyncUnaryCall(
      path: Gooseai_DashboardServiceClientMetadata.Methods.createAutoChargeIntent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateAutoChargeIntentInterceptors() ?? []
    )
  }

  internal func updateAutoChargeIntent(
    _ request: Gooseai_CreateAutoChargeIntentRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Gooseai_AutoChargeIntent {
    return try await self.performAsyncUnaryCall(
      path: Gooseai_DashboardServiceClientMetadata.Methods.updateAutoChargeIntent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateAutoChargeIntentInterceptors() ?? []
    )
  }

  internal func getAutoChargeIntent(
    _ request: Gooseai_GetAutoChargeRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Gooseai_AutoChargeIntent {
    return try await self.performAsyncUnaryCall(
      path: Gooseai_DashboardServiceClientMetadata.Methods.getAutoChargeIntent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAutoChargeIntentInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Gooseai_DashboardServiceAsyncClient: Gooseai_DashboardServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Gooseai_DashboardServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Gooseai_DashboardServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

internal protocol Gooseai_DashboardServiceClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'getMe'.
  func makeGetMeInterceptors() -> [ClientInterceptor<Gooseai_EmptyRequest, Gooseai_User>]

  /// - Returns: Interceptors to use when invoking 'getOrganization'.
  func makeGetOrganizationInterceptors() -> [ClientInterceptor<Gooseai_GetOrganizationRequest, Gooseai_Organization>]

  /// - Returns: Interceptors to use when invoking 'getMetrics'.
  func makeGetMetricsInterceptors() -> [ClientInterceptor<Gooseai_GetMetricsRequest, Gooseai_Metrics>]

  /// - Returns: Interceptors to use when invoking 'createAPIKey'.
  func makeCreateAPIKeyInterceptors() -> [ClientInterceptor<Gooseai_APIKeyRequest, Gooseai_APIKey>]

  /// - Returns: Interceptors to use when invoking 'deleteAPIKey'.
  func makeDeleteAPIKeyInterceptors() -> [ClientInterceptor<Gooseai_APIKeyFindRequest, Gooseai_APIKey>]

  /// - Returns: Interceptors to use when invoking 'updateDefaultOrganization'.
  func makeUpdateDefaultOrganizationInterceptors() -> [ClientInterceptor<Gooseai_UpdateDefaultOrganizationRequest, Gooseai_User>]

  /// - Returns: Interceptors to use when invoking 'getClientSettings'.
  func makeGetClientSettingsInterceptors() -> [ClientInterceptor<Gooseai_EmptyRequest, Gooseai_ClientSettings>]

  /// - Returns: Interceptors to use when invoking 'setClientSettings'.
  func makeSetClientSettingsInterceptors() -> [ClientInterceptor<Gooseai_ClientSettings, Gooseai_ClientSettings>]

  /// - Returns: Interceptors to use when invoking 'updateUserInfo'.
  func makeUpdateUserInfoInterceptors() -> [ClientInterceptor<Gooseai_UpdateUserInfoRequest, Gooseai_User>]

  /// - Returns: Interceptors to use when invoking 'createPasswordChangeTicket'.
  func makeCreatePasswordChangeTicketInterceptors() -> [ClientInterceptor<Gooseai_EmptyRequest, Gooseai_UserPasswordChangeTicket>]

  /// - Returns: Interceptors to use when invoking 'deleteAccount'.
  func makeDeleteAccountInterceptors() -> [ClientInterceptor<Gooseai_EmptyRequest, Gooseai_User>]

  /// - Returns: Interceptors to use when invoking 'createCharge'.
  func makeCreateChargeInterceptors() -> [ClientInterceptor<Gooseai_CreateChargeRequest, Gooseai_Charge>]

  /// - Returns: Interceptors to use when invoking 'getCharges'.
  func makeGetChargesInterceptors() -> [ClientInterceptor<Gooseai_GetChargesRequest, Gooseai_Charges>]

  /// - Returns: Interceptors to use when invoking 'createAutoChargeIntent'.
  func makeCreateAutoChargeIntentInterceptors() -> [ClientInterceptor<Gooseai_CreateAutoChargeIntentRequest, Gooseai_AutoChargeIntent>]

  /// - Returns: Interceptors to use when invoking 'updateAutoChargeIntent'.
  func makeUpdateAutoChargeIntentInterceptors() -> [ClientInterceptor<Gooseai_CreateAutoChargeIntentRequest, Gooseai_AutoChargeIntent>]

  /// - Returns: Interceptors to use when invoking 'getAutoChargeIntent'.
  func makeGetAutoChargeIntentInterceptors() -> [ClientInterceptor<Gooseai_GetAutoChargeRequest, Gooseai_AutoChargeIntent>]
}

internal enum Gooseai_DashboardServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "DashboardService",
    fullName: "gooseai.DashboardService",
    methods: [
      Gooseai_DashboardServiceClientMetadata.Methods.getMe,
      Gooseai_DashboardServiceClientMetadata.Methods.getOrganization,
      Gooseai_DashboardServiceClientMetadata.Methods.getMetrics,
      Gooseai_DashboardServiceClientMetadata.Methods.createAPIKey,
      Gooseai_DashboardServiceClientMetadata.Methods.deleteAPIKey,
      Gooseai_DashboardServiceClientMetadata.Methods.updateDefaultOrganization,
      Gooseai_DashboardServiceClientMetadata.Methods.getClientSettings,
      Gooseai_DashboardServiceClientMetadata.Methods.setClientSettings,
      Gooseai_DashboardServiceClientMetadata.Methods.updateUserInfo,
      Gooseai_DashboardServiceClientMetadata.Methods.createPasswordChangeTicket,
      Gooseai_DashboardServiceClientMetadata.Methods.deleteAccount,
      Gooseai_DashboardServiceClientMetadata.Methods.createCharge,
      Gooseai_DashboardServiceClientMetadata.Methods.getCharges,
      Gooseai_DashboardServiceClientMetadata.Methods.createAutoChargeIntent,
      Gooseai_DashboardServiceClientMetadata.Methods.updateAutoChargeIntent,
      Gooseai_DashboardServiceClientMetadata.Methods.getAutoChargeIntent,
    ]
  )

  internal enum Methods {
    internal static let getMe = GRPCMethodDescriptor(
      name: "GetMe",
      path: "/gooseai.DashboardService/GetMe",
      type: GRPCCallType.unary
    )

    internal static let getOrganization = GRPCMethodDescriptor(
      name: "GetOrganization",
      path: "/gooseai.DashboardService/GetOrganization",
      type: GRPCCallType.unary
    )

    internal static let getMetrics = GRPCMethodDescriptor(
      name: "GetMetrics",
      path: "/gooseai.DashboardService/GetMetrics",
      type: GRPCCallType.unary
    )

    internal static let createAPIKey = GRPCMethodDescriptor(
      name: "CreateAPIKey",
      path: "/gooseai.DashboardService/CreateAPIKey",
      type: GRPCCallType.unary
    )

    internal static let deleteAPIKey = GRPCMethodDescriptor(
      name: "DeleteAPIKey",
      path: "/gooseai.DashboardService/DeleteAPIKey",
      type: GRPCCallType.unary
    )

    internal static let updateDefaultOrganization = GRPCMethodDescriptor(
      name: "UpdateDefaultOrganization",
      path: "/gooseai.DashboardService/UpdateDefaultOrganization",
      type: GRPCCallType.unary
    )

    internal static let getClientSettings = GRPCMethodDescriptor(
      name: "GetClientSettings",
      path: "/gooseai.DashboardService/GetClientSettings",
      type: GRPCCallType.unary
    )

    internal static let setClientSettings = GRPCMethodDescriptor(
      name: "SetClientSettings",
      path: "/gooseai.DashboardService/SetClientSettings",
      type: GRPCCallType.unary
    )

    internal static let updateUserInfo = GRPCMethodDescriptor(
      name: "UpdateUserInfo",
      path: "/gooseai.DashboardService/UpdateUserInfo",
      type: GRPCCallType.unary
    )

    internal static let createPasswordChangeTicket = GRPCMethodDescriptor(
      name: "CreatePasswordChangeTicket",
      path: "/gooseai.DashboardService/CreatePasswordChangeTicket",
      type: GRPCCallType.unary
    )

    internal static let deleteAccount = GRPCMethodDescriptor(
      name: "DeleteAccount",
      path: "/gooseai.DashboardService/DeleteAccount",
      type: GRPCCallType.unary
    )

    internal static let createCharge = GRPCMethodDescriptor(
      name: "CreateCharge",
      path: "/gooseai.DashboardService/CreateCharge",
      type: GRPCCallType.unary
    )

    internal static let getCharges = GRPCMethodDescriptor(
      name: "GetCharges",
      path: "/gooseai.DashboardService/GetCharges",
      type: GRPCCallType.unary
    )

    internal static let createAutoChargeIntent = GRPCMethodDescriptor(
      name: "CreateAutoChargeIntent",
      path: "/gooseai.DashboardService/CreateAutoChargeIntent",
      type: GRPCCallType.unary
    )

    internal static let updateAutoChargeIntent = GRPCMethodDescriptor(
      name: "UpdateAutoChargeIntent",
      path: "/gooseai.DashboardService/UpdateAutoChargeIntent",
      type: GRPCCallType.unary
    )

    internal static let getAutoChargeIntent = GRPCMethodDescriptor(
      name: "GetAutoChargeIntent",
      path: "/gooseai.DashboardService/GetAutoChargeIntent",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Gooseai_DashboardServiceProvider: CallHandlerProvider {
  var interceptors: Gooseai_DashboardServiceServerInterceptorFactoryProtocol? { get }

  /// Get info
  func getMe(request: Gooseai_EmptyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Gooseai_User>

  func getOrganization(request: Gooseai_GetOrganizationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Gooseai_Organization>

  func getMetrics(request: Gooseai_GetMetricsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Gooseai_Metrics>

  /// API key management
  func createAPIKey(request: Gooseai_APIKeyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Gooseai_APIKey>

  func deleteAPIKey(request: Gooseai_APIKeyFindRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Gooseai_APIKey>

  /// User settings
  func updateDefaultOrganization(request: Gooseai_UpdateDefaultOrganizationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Gooseai_User>

  func getClientSettings(request: Gooseai_EmptyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Gooseai_ClientSettings>

  func setClientSettings(request: Gooseai_ClientSettings, context: StatusOnlyCallContext) -> EventLoopFuture<Gooseai_ClientSettings>

  func updateUserInfo(request: Gooseai_UpdateUserInfoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Gooseai_User>

  func createPasswordChangeTicket(request: Gooseai_EmptyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Gooseai_UserPasswordChangeTicket>

  func deleteAccount(request: Gooseai_EmptyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Gooseai_User>

  /// Payment functions
  func createCharge(request: Gooseai_CreateChargeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Gooseai_Charge>

  func getCharges(request: Gooseai_GetChargesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Gooseai_Charges>

  func createAutoChargeIntent(request: Gooseai_CreateAutoChargeIntentRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Gooseai_AutoChargeIntent>

  func updateAutoChargeIntent(request: Gooseai_CreateAutoChargeIntentRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Gooseai_AutoChargeIntent>

  func getAutoChargeIntent(request: Gooseai_GetAutoChargeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Gooseai_AutoChargeIntent>
}

extension Gooseai_DashboardServiceProvider {
  internal var serviceName: Substring {
    return Gooseai_DashboardServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetMe":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gooseai_EmptyRequest>(),
        responseSerializer: ProtobufSerializer<Gooseai_User>(),
        interceptors: self.interceptors?.makeGetMeInterceptors() ?? [],
        userFunction: self.getMe(request:context:)
      )

    case "GetOrganization":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gooseai_GetOrganizationRequest>(),
        responseSerializer: ProtobufSerializer<Gooseai_Organization>(),
        interceptors: self.interceptors?.makeGetOrganizationInterceptors() ?? [],
        userFunction: self.getOrganization(request:context:)
      )

    case "GetMetrics":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gooseai_GetMetricsRequest>(),
        responseSerializer: ProtobufSerializer<Gooseai_Metrics>(),
        interceptors: self.interceptors?.makeGetMetricsInterceptors() ?? [],
        userFunction: self.getMetrics(request:context:)
      )

    case "CreateAPIKey":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gooseai_APIKeyRequest>(),
        responseSerializer: ProtobufSerializer<Gooseai_APIKey>(),
        interceptors: self.interceptors?.makeCreateAPIKeyInterceptors() ?? [],
        userFunction: self.createAPIKey(request:context:)
      )

    case "DeleteAPIKey":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gooseai_APIKeyFindRequest>(),
        responseSerializer: ProtobufSerializer<Gooseai_APIKey>(),
        interceptors: self.interceptors?.makeDeleteAPIKeyInterceptors() ?? [],
        userFunction: self.deleteAPIKey(request:context:)
      )

    case "UpdateDefaultOrganization":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gooseai_UpdateDefaultOrganizationRequest>(),
        responseSerializer: ProtobufSerializer<Gooseai_User>(),
        interceptors: self.interceptors?.makeUpdateDefaultOrganizationInterceptors() ?? [],
        userFunction: self.updateDefaultOrganization(request:context:)
      )

    case "GetClientSettings":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gooseai_EmptyRequest>(),
        responseSerializer: ProtobufSerializer<Gooseai_ClientSettings>(),
        interceptors: self.interceptors?.makeGetClientSettingsInterceptors() ?? [],
        userFunction: self.getClientSettings(request:context:)
      )

    case "SetClientSettings":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gooseai_ClientSettings>(),
        responseSerializer: ProtobufSerializer<Gooseai_ClientSettings>(),
        interceptors: self.interceptors?.makeSetClientSettingsInterceptors() ?? [],
        userFunction: self.setClientSettings(request:context:)
      )

    case "UpdateUserInfo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gooseai_UpdateUserInfoRequest>(),
        responseSerializer: ProtobufSerializer<Gooseai_User>(),
        interceptors: self.interceptors?.makeUpdateUserInfoInterceptors() ?? [],
        userFunction: self.updateUserInfo(request:context:)
      )

    case "CreatePasswordChangeTicket":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gooseai_EmptyRequest>(),
        responseSerializer: ProtobufSerializer<Gooseai_UserPasswordChangeTicket>(),
        interceptors: self.interceptors?.makeCreatePasswordChangeTicketInterceptors() ?? [],
        userFunction: self.createPasswordChangeTicket(request:context:)
      )

    case "DeleteAccount":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gooseai_EmptyRequest>(),
        responseSerializer: ProtobufSerializer<Gooseai_User>(),
        interceptors: self.interceptors?.makeDeleteAccountInterceptors() ?? [],
        userFunction: self.deleteAccount(request:context:)
      )

    case "CreateCharge":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gooseai_CreateChargeRequest>(),
        responseSerializer: ProtobufSerializer<Gooseai_Charge>(),
        interceptors: self.interceptors?.makeCreateChargeInterceptors() ?? [],
        userFunction: self.createCharge(request:context:)
      )

    case "GetCharges":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gooseai_GetChargesRequest>(),
        responseSerializer: ProtobufSerializer<Gooseai_Charges>(),
        interceptors: self.interceptors?.makeGetChargesInterceptors() ?? [],
        userFunction: self.getCharges(request:context:)
      )

    case "CreateAutoChargeIntent":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gooseai_CreateAutoChargeIntentRequest>(),
        responseSerializer: ProtobufSerializer<Gooseai_AutoChargeIntent>(),
        interceptors: self.interceptors?.makeCreateAutoChargeIntentInterceptors() ?? [],
        userFunction: self.createAutoChargeIntent(request:context:)
      )

    case "UpdateAutoChargeIntent":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gooseai_CreateAutoChargeIntentRequest>(),
        responseSerializer: ProtobufSerializer<Gooseai_AutoChargeIntent>(),
        interceptors: self.interceptors?.makeUpdateAutoChargeIntentInterceptors() ?? [],
        userFunction: self.updateAutoChargeIntent(request:context:)
      )

    case "GetAutoChargeIntent":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gooseai_GetAutoChargeRequest>(),
        responseSerializer: ProtobufSerializer<Gooseai_AutoChargeIntent>(),
        interceptors: self.interceptors?.makeGetAutoChargeIntentInterceptors() ?? [],
        userFunction: self.getAutoChargeIntent(request:context:)
      )

    default:
      return nil
    }
  }
}

#if compiler(>=5.6)

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Gooseai_DashboardServiceAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Gooseai_DashboardServiceServerInterceptorFactoryProtocol? { get }

  /// Get info
  @Sendable func getMe(
    request: Gooseai_EmptyRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Gooseai_User

  @Sendable func getOrganization(
    request: Gooseai_GetOrganizationRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Gooseai_Organization

  @Sendable func getMetrics(
    request: Gooseai_GetMetricsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Gooseai_Metrics

  /// API key management
  @Sendable func createAPIKey(
    request: Gooseai_APIKeyRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Gooseai_APIKey

  @Sendable func deleteAPIKey(
    request: Gooseai_APIKeyFindRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Gooseai_APIKey

  /// User settings
  @Sendable func updateDefaultOrganization(
    request: Gooseai_UpdateDefaultOrganizationRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Gooseai_User

  @Sendable func getClientSettings(
    request: Gooseai_EmptyRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Gooseai_ClientSettings

  @Sendable func setClientSettings(
    request: Gooseai_ClientSettings,
    context: GRPCAsyncServerCallContext
  ) async throws -> Gooseai_ClientSettings

  @Sendable func updateUserInfo(
    request: Gooseai_UpdateUserInfoRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Gooseai_User

  @Sendable func createPasswordChangeTicket(
    request: Gooseai_EmptyRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Gooseai_UserPasswordChangeTicket

  @Sendable func deleteAccount(
    request: Gooseai_EmptyRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Gooseai_User

  /// Payment functions
  @Sendable func createCharge(
    request: Gooseai_CreateChargeRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Gooseai_Charge

  @Sendable func getCharges(
    request: Gooseai_GetChargesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Gooseai_Charges

  @Sendable func createAutoChargeIntent(
    request: Gooseai_CreateAutoChargeIntentRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Gooseai_AutoChargeIntent

  @Sendable func updateAutoChargeIntent(
    request: Gooseai_CreateAutoChargeIntentRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Gooseai_AutoChargeIntent

  @Sendable func getAutoChargeIntent(
    request: Gooseai_GetAutoChargeRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Gooseai_AutoChargeIntent
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Gooseai_DashboardServiceAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Gooseai_DashboardServiceServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Gooseai_DashboardServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Gooseai_DashboardServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetMe":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gooseai_EmptyRequest>(),
        responseSerializer: ProtobufSerializer<Gooseai_User>(),
        interceptors: self.interceptors?.makeGetMeInterceptors() ?? [],
        wrapping: self.getMe(request:context:)
      )

    case "GetOrganization":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gooseai_GetOrganizationRequest>(),
        responseSerializer: ProtobufSerializer<Gooseai_Organization>(),
        interceptors: self.interceptors?.makeGetOrganizationInterceptors() ?? [],
        wrapping: self.getOrganization(request:context:)
      )

    case "GetMetrics":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gooseai_GetMetricsRequest>(),
        responseSerializer: ProtobufSerializer<Gooseai_Metrics>(),
        interceptors: self.interceptors?.makeGetMetricsInterceptors() ?? [],
        wrapping: self.getMetrics(request:context:)
      )

    case "CreateAPIKey":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gooseai_APIKeyRequest>(),
        responseSerializer: ProtobufSerializer<Gooseai_APIKey>(),
        interceptors: self.interceptors?.makeCreateAPIKeyInterceptors() ?? [],
        wrapping: self.createAPIKey(request:context:)
      )

    case "DeleteAPIKey":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gooseai_APIKeyFindRequest>(),
        responseSerializer: ProtobufSerializer<Gooseai_APIKey>(),
        interceptors: self.interceptors?.makeDeleteAPIKeyInterceptors() ?? [],
        wrapping: self.deleteAPIKey(request:context:)
      )

    case "UpdateDefaultOrganization":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gooseai_UpdateDefaultOrganizationRequest>(),
        responseSerializer: ProtobufSerializer<Gooseai_User>(),
        interceptors: self.interceptors?.makeUpdateDefaultOrganizationInterceptors() ?? [],
        wrapping: self.updateDefaultOrganization(request:context:)
      )

    case "GetClientSettings":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gooseai_EmptyRequest>(),
        responseSerializer: ProtobufSerializer<Gooseai_ClientSettings>(),
        interceptors: self.interceptors?.makeGetClientSettingsInterceptors() ?? [],
        wrapping: self.getClientSettings(request:context:)
      )

    case "SetClientSettings":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gooseai_ClientSettings>(),
        responseSerializer: ProtobufSerializer<Gooseai_ClientSettings>(),
        interceptors: self.interceptors?.makeSetClientSettingsInterceptors() ?? [],
        wrapping: self.setClientSettings(request:context:)
      )

    case "UpdateUserInfo":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gooseai_UpdateUserInfoRequest>(),
        responseSerializer: ProtobufSerializer<Gooseai_User>(),
        interceptors: self.interceptors?.makeUpdateUserInfoInterceptors() ?? [],
        wrapping: self.updateUserInfo(request:context:)
      )

    case "CreatePasswordChangeTicket":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gooseai_EmptyRequest>(),
        responseSerializer: ProtobufSerializer<Gooseai_UserPasswordChangeTicket>(),
        interceptors: self.interceptors?.makeCreatePasswordChangeTicketInterceptors() ?? [],
        wrapping: self.createPasswordChangeTicket(request:context:)
      )

    case "DeleteAccount":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gooseai_EmptyRequest>(),
        responseSerializer: ProtobufSerializer<Gooseai_User>(),
        interceptors: self.interceptors?.makeDeleteAccountInterceptors() ?? [],
        wrapping: self.deleteAccount(request:context:)
      )

    case "CreateCharge":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gooseai_CreateChargeRequest>(),
        responseSerializer: ProtobufSerializer<Gooseai_Charge>(),
        interceptors: self.interceptors?.makeCreateChargeInterceptors() ?? [],
        wrapping: self.createCharge(request:context:)
      )

    case "GetCharges":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gooseai_GetChargesRequest>(),
        responseSerializer: ProtobufSerializer<Gooseai_Charges>(),
        interceptors: self.interceptors?.makeGetChargesInterceptors() ?? [],
        wrapping: self.getCharges(request:context:)
      )

    case "CreateAutoChargeIntent":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gooseai_CreateAutoChargeIntentRequest>(),
        responseSerializer: ProtobufSerializer<Gooseai_AutoChargeIntent>(),
        interceptors: self.interceptors?.makeCreateAutoChargeIntentInterceptors() ?? [],
        wrapping: self.createAutoChargeIntent(request:context:)
      )

    case "UpdateAutoChargeIntent":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gooseai_CreateAutoChargeIntentRequest>(),
        responseSerializer: ProtobufSerializer<Gooseai_AutoChargeIntent>(),
        interceptors: self.interceptors?.makeUpdateAutoChargeIntentInterceptors() ?? [],
        wrapping: self.updateAutoChargeIntent(request:context:)
      )

    case "GetAutoChargeIntent":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gooseai_GetAutoChargeRequest>(),
        responseSerializer: ProtobufSerializer<Gooseai_AutoChargeIntent>(),
        interceptors: self.interceptors?.makeGetAutoChargeIntentInterceptors() ?? [],
        wrapping: self.getAutoChargeIntent(request:context:)
      )

    default:
      return nil
    }
  }
}

#endif // compiler(>=5.6)

internal protocol Gooseai_DashboardServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'getMe'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetMeInterceptors() -> [ServerInterceptor<Gooseai_EmptyRequest, Gooseai_User>]

  /// - Returns: Interceptors to use when handling 'getOrganization'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetOrganizationInterceptors() -> [ServerInterceptor<Gooseai_GetOrganizationRequest, Gooseai_Organization>]

  /// - Returns: Interceptors to use when handling 'getMetrics'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetMetricsInterceptors() -> [ServerInterceptor<Gooseai_GetMetricsRequest, Gooseai_Metrics>]

  /// - Returns: Interceptors to use when handling 'createAPIKey'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateAPIKeyInterceptors() -> [ServerInterceptor<Gooseai_APIKeyRequest, Gooseai_APIKey>]

  /// - Returns: Interceptors to use when handling 'deleteAPIKey'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteAPIKeyInterceptors() -> [ServerInterceptor<Gooseai_APIKeyFindRequest, Gooseai_APIKey>]

  /// - Returns: Interceptors to use when handling 'updateDefaultOrganization'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateDefaultOrganizationInterceptors() -> [ServerInterceptor<Gooseai_UpdateDefaultOrganizationRequest, Gooseai_User>]

  /// - Returns: Interceptors to use when handling 'getClientSettings'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetClientSettingsInterceptors() -> [ServerInterceptor<Gooseai_EmptyRequest, Gooseai_ClientSettings>]

  /// - Returns: Interceptors to use when handling 'setClientSettings'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetClientSettingsInterceptors() -> [ServerInterceptor<Gooseai_ClientSettings, Gooseai_ClientSettings>]

  /// - Returns: Interceptors to use when handling 'updateUserInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateUserInfoInterceptors() -> [ServerInterceptor<Gooseai_UpdateUserInfoRequest, Gooseai_User>]

  /// - Returns: Interceptors to use when handling 'createPasswordChangeTicket'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreatePasswordChangeTicketInterceptors() -> [ServerInterceptor<Gooseai_EmptyRequest, Gooseai_UserPasswordChangeTicket>]

  /// - Returns: Interceptors to use when handling 'deleteAccount'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteAccountInterceptors() -> [ServerInterceptor<Gooseai_EmptyRequest, Gooseai_User>]

  /// - Returns: Interceptors to use when handling 'createCharge'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateChargeInterceptors() -> [ServerInterceptor<Gooseai_CreateChargeRequest, Gooseai_Charge>]

  /// - Returns: Interceptors to use when handling 'getCharges'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetChargesInterceptors() -> [ServerInterceptor<Gooseai_GetChargesRequest, Gooseai_Charges>]

  /// - Returns: Interceptors to use when handling 'createAutoChargeIntent'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateAutoChargeIntentInterceptors() -> [ServerInterceptor<Gooseai_CreateAutoChargeIntentRequest, Gooseai_AutoChargeIntent>]

  /// - Returns: Interceptors to use when handling 'updateAutoChargeIntent'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateAutoChargeIntentInterceptors() -> [ServerInterceptor<Gooseai_CreateAutoChargeIntentRequest, Gooseai_AutoChargeIntent>]

  /// - Returns: Interceptors to use when handling 'getAutoChargeIntent'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetAutoChargeIntentInterceptors() -> [ServerInterceptor<Gooseai_GetAutoChargeRequest, Gooseai_AutoChargeIntent>]
}

internal enum Gooseai_DashboardServiceServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "DashboardService",
    fullName: "gooseai.DashboardService",
    methods: [
      Gooseai_DashboardServiceServerMetadata.Methods.getMe,
      Gooseai_DashboardServiceServerMetadata.Methods.getOrganization,
      Gooseai_DashboardServiceServerMetadata.Methods.getMetrics,
      Gooseai_DashboardServiceServerMetadata.Methods.createAPIKey,
      Gooseai_DashboardServiceServerMetadata.Methods.deleteAPIKey,
      Gooseai_DashboardServiceServerMetadata.Methods.updateDefaultOrganization,
      Gooseai_DashboardServiceServerMetadata.Methods.getClientSettings,
      Gooseai_DashboardServiceServerMetadata.Methods.setClientSettings,
      Gooseai_DashboardServiceServerMetadata.Methods.updateUserInfo,
      Gooseai_DashboardServiceServerMetadata.Methods.createPasswordChangeTicket,
      Gooseai_DashboardServiceServerMetadata.Methods.deleteAccount,
      Gooseai_DashboardServiceServerMetadata.Methods.createCharge,
      Gooseai_DashboardServiceServerMetadata.Methods.getCharges,
      Gooseai_DashboardServiceServerMetadata.Methods.createAutoChargeIntent,
      Gooseai_DashboardServiceServerMetadata.Methods.updateAutoChargeIntent,
      Gooseai_DashboardServiceServerMetadata.Methods.getAutoChargeIntent,
    ]
  )

  internal enum Methods {
    internal static let getMe = GRPCMethodDescriptor(
      name: "GetMe",
      path: "/gooseai.DashboardService/GetMe",
      type: GRPCCallType.unary
    )

    internal static let getOrganization = GRPCMethodDescriptor(
      name: "GetOrganization",
      path: "/gooseai.DashboardService/GetOrganization",
      type: GRPCCallType.unary
    )

    internal static let getMetrics = GRPCMethodDescriptor(
      name: "GetMetrics",
      path: "/gooseai.DashboardService/GetMetrics",
      type: GRPCCallType.unary
    )

    internal static let createAPIKey = GRPCMethodDescriptor(
      name: "CreateAPIKey",
      path: "/gooseai.DashboardService/CreateAPIKey",
      type: GRPCCallType.unary
    )

    internal static let deleteAPIKey = GRPCMethodDescriptor(
      name: "DeleteAPIKey",
      path: "/gooseai.DashboardService/DeleteAPIKey",
      type: GRPCCallType.unary
    )

    internal static let updateDefaultOrganization = GRPCMethodDescriptor(
      name: "UpdateDefaultOrganization",
      path: "/gooseai.DashboardService/UpdateDefaultOrganization",
      type: GRPCCallType.unary
    )

    internal static let getClientSettings = GRPCMethodDescriptor(
      name: "GetClientSettings",
      path: "/gooseai.DashboardService/GetClientSettings",
      type: GRPCCallType.unary
    )

    internal static let setClientSettings = GRPCMethodDescriptor(
      name: "SetClientSettings",
      path: "/gooseai.DashboardService/SetClientSettings",
      type: GRPCCallType.unary
    )

    internal static let updateUserInfo = GRPCMethodDescriptor(
      name: "UpdateUserInfo",
      path: "/gooseai.DashboardService/UpdateUserInfo",
      type: GRPCCallType.unary
    )

    internal static let createPasswordChangeTicket = GRPCMethodDescriptor(
      name: "CreatePasswordChangeTicket",
      path: "/gooseai.DashboardService/CreatePasswordChangeTicket",
      type: GRPCCallType.unary
    )

    internal static let deleteAccount = GRPCMethodDescriptor(
      name: "DeleteAccount",
      path: "/gooseai.DashboardService/DeleteAccount",
      type: GRPCCallType.unary
    )

    internal static let createCharge = GRPCMethodDescriptor(
      name: "CreateCharge",
      path: "/gooseai.DashboardService/CreateCharge",
      type: GRPCCallType.unary
    )

    internal static let getCharges = GRPCMethodDescriptor(
      name: "GetCharges",
      path: "/gooseai.DashboardService/GetCharges",
      type: GRPCCallType.unary
    )

    internal static let createAutoChargeIntent = GRPCMethodDescriptor(
      name: "CreateAutoChargeIntent",
      path: "/gooseai.DashboardService/CreateAutoChargeIntent",
      type: GRPCCallType.unary
    )

    internal static let updateAutoChargeIntent = GRPCMethodDescriptor(
      name: "UpdateAutoChargeIntent",
      path: "/gooseai.DashboardService/UpdateAutoChargeIntent",
      type: GRPCCallType.unary
    )

    internal static let getAutoChargeIntent = GRPCMethodDescriptor(
      name: "GetAutoChargeIntent",
      path: "/gooseai.DashboardService/GetAutoChargeIntent",
      type: GRPCCallType.unary
    )
  }
}
