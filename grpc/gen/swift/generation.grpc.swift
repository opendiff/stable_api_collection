//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: generation.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


///
/// gRPC services
///
/// Usage: instantiate `Gooseai_GenerationServiceClient`, then call methods of this protocol to make API calls.
internal protocol Gooseai_GenerationServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Gooseai_GenerationServiceClientInterceptorFactoryProtocol? { get }

  func generate(
    _ request: Gooseai_Request,
    callOptions: CallOptions?,
    handler: @escaping (Gooseai_Answer) -> Void
  ) -> ServerStreamingCall<Gooseai_Request, Gooseai_Answer>

  func chainGenerate(
    _ request: Gooseai_ChainRequest,
    callOptions: CallOptions?,
    handler: @escaping (Gooseai_Answer) -> Void
  ) -> ServerStreamingCall<Gooseai_ChainRequest, Gooseai_Answer>
}

extension Gooseai_GenerationServiceClientProtocol {
  internal var serviceName: String {
    return "gooseai.GenerationService"
  }

  /// Server streaming call to Generate
  ///
  /// - Parameters:
  ///   - request: Request to send to Generate.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func generate(
    _ request: Gooseai_Request,
    callOptions: CallOptions? = nil,
    handler: @escaping (Gooseai_Answer) -> Void
  ) -> ServerStreamingCall<Gooseai_Request, Gooseai_Answer> {
    return self.makeServerStreamingCall(
      path: Gooseai_GenerationServiceClientMetadata.Methods.generate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGenerateInterceptors() ?? [],
      handler: handler
    )
  }

  /// Server streaming call to ChainGenerate
  ///
  /// - Parameters:
  ///   - request: Request to send to ChainGenerate.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func chainGenerate(
    _ request: Gooseai_ChainRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Gooseai_Answer) -> Void
  ) -> ServerStreamingCall<Gooseai_ChainRequest, Gooseai_Answer> {
    return self.makeServerStreamingCall(
      path: Gooseai_GenerationServiceClientMetadata.Methods.chainGenerate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChainGenerateInterceptors() ?? [],
      handler: handler
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Gooseai_GenerationServiceClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Gooseai_GenerationServiceNIOClient")
internal final class Gooseai_GenerationServiceClient: Gooseai_GenerationServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Gooseai_GenerationServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Gooseai_GenerationServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the gooseai.GenerationService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Gooseai_GenerationServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Gooseai_GenerationServiceNIOClient: Gooseai_GenerationServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Gooseai_GenerationServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the gooseai.GenerationService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Gooseai_GenerationServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
///
/// gRPC services
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Gooseai_GenerationServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Gooseai_GenerationServiceClientInterceptorFactoryProtocol? { get }

  func makeGenerateCall(
    _ request: Gooseai_Request,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Gooseai_Request, Gooseai_Answer>

  func makeChainGenerateCall(
    _ request: Gooseai_ChainRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Gooseai_ChainRequest, Gooseai_Answer>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Gooseai_GenerationServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Gooseai_GenerationServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: Gooseai_GenerationServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeGenerateCall(
    _ request: Gooseai_Request,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Gooseai_Request, Gooseai_Answer> {
    return self.makeAsyncServerStreamingCall(
      path: Gooseai_GenerationServiceClientMetadata.Methods.generate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGenerateInterceptors() ?? []
    )
  }

  internal func makeChainGenerateCall(
    _ request: Gooseai_ChainRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Gooseai_ChainRequest, Gooseai_Answer> {
    return self.makeAsyncServerStreamingCall(
      path: Gooseai_GenerationServiceClientMetadata.Methods.chainGenerate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChainGenerateInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Gooseai_GenerationServiceAsyncClientProtocol {
  internal func generate(
    _ request: Gooseai_Request,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Gooseai_Answer> {
    return self.performAsyncServerStreamingCall(
      path: Gooseai_GenerationServiceClientMetadata.Methods.generate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGenerateInterceptors() ?? []
    )
  }

  internal func chainGenerate(
    _ request: Gooseai_ChainRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Gooseai_Answer> {
    return self.performAsyncServerStreamingCall(
      path: Gooseai_GenerationServiceClientMetadata.Methods.chainGenerate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChainGenerateInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Gooseai_GenerationServiceAsyncClient: Gooseai_GenerationServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Gooseai_GenerationServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Gooseai_GenerationServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

internal protocol Gooseai_GenerationServiceClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'generate'.
  func makeGenerateInterceptors() -> [ClientInterceptor<Gooseai_Request, Gooseai_Answer>]

  /// - Returns: Interceptors to use when invoking 'chainGenerate'.
  func makeChainGenerateInterceptors() -> [ClientInterceptor<Gooseai_ChainRequest, Gooseai_Answer>]
}

internal enum Gooseai_GenerationServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "GenerationService",
    fullName: "gooseai.GenerationService",
    methods: [
      Gooseai_GenerationServiceClientMetadata.Methods.generate,
      Gooseai_GenerationServiceClientMetadata.Methods.chainGenerate,
    ]
  )

  internal enum Methods {
    internal static let generate = GRPCMethodDescriptor(
      name: "Generate",
      path: "/gooseai.GenerationService/Generate",
      type: GRPCCallType.serverStreaming
    )

    internal static let chainGenerate = GRPCMethodDescriptor(
      name: "ChainGenerate",
      path: "/gooseai.GenerationService/ChainGenerate",
      type: GRPCCallType.serverStreaming
    )
  }
}

///
/// gRPC services
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Gooseai_GenerationServiceProvider: CallHandlerProvider {
  var interceptors: Gooseai_GenerationServiceServerInterceptorFactoryProtocol? { get }

  func generate(request: Gooseai_Request, context: StreamingResponseCallContext<Gooseai_Answer>) -> EventLoopFuture<GRPCStatus>

  func chainGenerate(request: Gooseai_ChainRequest, context: StreamingResponseCallContext<Gooseai_Answer>) -> EventLoopFuture<GRPCStatus>
}

extension Gooseai_GenerationServiceProvider {
  internal var serviceName: Substring {
    return Gooseai_GenerationServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Generate":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gooseai_Request>(),
        responseSerializer: ProtobufSerializer<Gooseai_Answer>(),
        interceptors: self.interceptors?.makeGenerateInterceptors() ?? [],
        userFunction: self.generate(request:context:)
      )

    case "ChainGenerate":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gooseai_ChainRequest>(),
        responseSerializer: ProtobufSerializer<Gooseai_Answer>(),
        interceptors: self.interceptors?.makeChainGenerateInterceptors() ?? [],
        userFunction: self.chainGenerate(request:context:)
      )

    default:
      return nil
    }
  }
}

#if compiler(>=5.6)

///
/// gRPC services
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Gooseai_GenerationServiceAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Gooseai_GenerationServiceServerInterceptorFactoryProtocol? { get }

  @Sendable func generate(
    request: Gooseai_Request,
    responseStream: GRPCAsyncResponseStreamWriter<Gooseai_Answer>,
    context: GRPCAsyncServerCallContext
  ) async throws

  @Sendable func chainGenerate(
    request: Gooseai_ChainRequest,
    responseStream: GRPCAsyncResponseStreamWriter<Gooseai_Answer>,
    context: GRPCAsyncServerCallContext
  ) async throws
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Gooseai_GenerationServiceAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Gooseai_GenerationServiceServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Gooseai_GenerationServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Gooseai_GenerationServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Generate":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gooseai_Request>(),
        responseSerializer: ProtobufSerializer<Gooseai_Answer>(),
        interceptors: self.interceptors?.makeGenerateInterceptors() ?? [],
        wrapping: self.generate(request:responseStream:context:)
      )

    case "ChainGenerate":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gooseai_ChainRequest>(),
        responseSerializer: ProtobufSerializer<Gooseai_Answer>(),
        interceptors: self.interceptors?.makeChainGenerateInterceptors() ?? [],
        wrapping: self.chainGenerate(request:responseStream:context:)
      )

    default:
      return nil
    }
  }
}

#endif // compiler(>=5.6)

internal protocol Gooseai_GenerationServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'generate'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGenerateInterceptors() -> [ServerInterceptor<Gooseai_Request, Gooseai_Answer>]

  /// - Returns: Interceptors to use when handling 'chainGenerate'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeChainGenerateInterceptors() -> [ServerInterceptor<Gooseai_ChainRequest, Gooseai_Answer>]
}

internal enum Gooseai_GenerationServiceServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "GenerationService",
    fullName: "gooseai.GenerationService",
    methods: [
      Gooseai_GenerationServiceServerMetadata.Methods.generate,
      Gooseai_GenerationServiceServerMetadata.Methods.chainGenerate,
    ]
  )

  internal enum Methods {
    internal static let generate = GRPCMethodDescriptor(
      name: "Generate",
      path: "/gooseai.GenerationService/Generate",
      type: GRPCCallType.serverStreaming
    )

    internal static let chainGenerate = GRPCMethodDescriptor(
      name: "ChainGenerate",
      path: "/gooseai.GenerationService/ChainGenerate",
      type: GRPCCallType.serverStreaming
    )
  }
}
