<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: generation.proto

namespace Gooseai;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Sequence of tokens, paired with the id of the tokenizer used to generate them.
 *
 * Generated from protobuf message <code>gooseai.Tokens</code>
 */
class Tokens extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>repeated .gooseai.Token tokens = 1 [json_name = "tokens"];</code>
     */
    private $tokens;
    /**
     * Generated from protobuf field <code>optional string tokenizer_id = 2 [json_name = "tokenizerId"];</code>
     */
    protected $tokenizer_id = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type array<\Gooseai\Token>|\Google\Protobuf\Internal\RepeatedField $tokens
     *     @type string $tokenizer_id
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Generation::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>repeated .gooseai.Token tokens = 1 [json_name = "tokens"];</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getTokens()
    {
        return $this->tokens;
    }

    /**
     * Generated from protobuf field <code>repeated .gooseai.Token tokens = 1 [json_name = "tokens"];</code>
     * @param array<\Gooseai\Token>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setTokens($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Gooseai\Token::class);
        $this->tokens = $arr;

        return $this;
    }

    /**
     * Generated from protobuf field <code>optional string tokenizer_id = 2 [json_name = "tokenizerId"];</code>
     * @return string
     */
    public function getTokenizerId()
    {
        return isset($this->tokenizer_id) ? $this->tokenizer_id : '';
    }

    public function hasTokenizerId()
    {
        return isset($this->tokenizer_id);
    }

    public function clearTokenizerId()
    {
        unset($this->tokenizer_id);
    }

    /**
     * Generated from protobuf field <code>optional string tokenizer_id = 2 [json_name = "tokenizerId"];</code>
     * @param string $var
     * @return $this
     */
    public function setTokenizerId($var)
    {
        GPBUtil::checkString($var, True);
        $this->tokenizer_id = $var;

        return $this;
    }

}

