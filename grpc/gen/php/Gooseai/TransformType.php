<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: generation.proto

namespace Gooseai;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>gooseai.TransformType</code>
 */
class TransformType extends \Google\Protobuf\Internal\Message
{
    protected $type;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int $diffusion
     *     @type int $upscaler
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Generation::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>.gooseai.DiffusionSampler diffusion = 1 [json_name = "diffusion"];</code>
     * @return int
     */
    public function getDiffusion()
    {
        return $this->readOneof(1);
    }

    public function hasDiffusion()
    {
        return $this->hasOneof(1);
    }

    /**
     * Generated from protobuf field <code>.gooseai.DiffusionSampler diffusion = 1 [json_name = "diffusion"];</code>
     * @param int $var
     * @return $this
     */
    public function setDiffusion($var)
    {
        GPBUtil::checkEnum($var, \Gooseai\DiffusionSampler::class);
        $this->writeOneof(1, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.gooseai.Upscaler upscaler = 2 [json_name = "upscaler"];</code>
     * @return int
     */
    public function getUpscaler()
    {
        return $this->readOneof(2);
    }

    public function hasUpscaler()
    {
        return $this->hasOneof(2);
    }

    /**
     * Generated from protobuf field <code>.gooseai.Upscaler upscaler = 2 [json_name = "upscaler"];</code>
     * @param int $var
     * @return $this
     */
    public function setUpscaler($var)
    {
        GPBUtil::checkEnum($var, \Gooseai\Upscaler::class);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getType()
    {
        return $this->whichOneof("type");
    }

}

