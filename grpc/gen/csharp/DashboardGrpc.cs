// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: dashboard.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Gooseai {
  public static partial class DashboardService
  {
    static readonly string __ServiceName = "gooseai.DashboardService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Gooseai.EmptyRequest> __Marshaller_gooseai_EmptyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Gooseai.EmptyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Gooseai.User> __Marshaller_gooseai_User = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Gooseai.User.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Gooseai.GetOrganizationRequest> __Marshaller_gooseai_GetOrganizationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Gooseai.GetOrganizationRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Gooseai.Organization> __Marshaller_gooseai_Organization = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Gooseai.Organization.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Gooseai.GetMetricsRequest> __Marshaller_gooseai_GetMetricsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Gooseai.GetMetricsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Gooseai.Metrics> __Marshaller_gooseai_Metrics = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Gooseai.Metrics.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Gooseai.APIKeyRequest> __Marshaller_gooseai_APIKeyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Gooseai.APIKeyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Gooseai.APIKey> __Marshaller_gooseai_APIKey = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Gooseai.APIKey.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Gooseai.APIKeyFindRequest> __Marshaller_gooseai_APIKeyFindRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Gooseai.APIKeyFindRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Gooseai.UpdateDefaultOrganizationRequest> __Marshaller_gooseai_UpdateDefaultOrganizationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Gooseai.UpdateDefaultOrganizationRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Gooseai.ClientSettings> __Marshaller_gooseai_ClientSettings = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Gooseai.ClientSettings.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Gooseai.UpdateUserInfoRequest> __Marshaller_gooseai_UpdateUserInfoRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Gooseai.UpdateUserInfoRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Gooseai.UserPasswordChangeTicket> __Marshaller_gooseai_UserPasswordChangeTicket = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Gooseai.UserPasswordChangeTicket.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Gooseai.CreateChargeRequest> __Marshaller_gooseai_CreateChargeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Gooseai.CreateChargeRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Gooseai.Charge> __Marshaller_gooseai_Charge = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Gooseai.Charge.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Gooseai.GetChargesRequest> __Marshaller_gooseai_GetChargesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Gooseai.GetChargesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Gooseai.Charges> __Marshaller_gooseai_Charges = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Gooseai.Charges.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Gooseai.CreateAutoChargeIntentRequest> __Marshaller_gooseai_CreateAutoChargeIntentRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Gooseai.CreateAutoChargeIntentRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Gooseai.AutoChargeIntent> __Marshaller_gooseai_AutoChargeIntent = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Gooseai.AutoChargeIntent.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Gooseai.GetAutoChargeRequest> __Marshaller_gooseai_GetAutoChargeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Gooseai.GetAutoChargeRequest.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Gooseai.EmptyRequest, global::Gooseai.User> __Method_GetMe = new grpc::Method<global::Gooseai.EmptyRequest, global::Gooseai.User>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetMe",
        __Marshaller_gooseai_EmptyRequest,
        __Marshaller_gooseai_User);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Gooseai.GetOrganizationRequest, global::Gooseai.Organization> __Method_GetOrganization = new grpc::Method<global::Gooseai.GetOrganizationRequest, global::Gooseai.Organization>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetOrganization",
        __Marshaller_gooseai_GetOrganizationRequest,
        __Marshaller_gooseai_Organization);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Gooseai.GetMetricsRequest, global::Gooseai.Metrics> __Method_GetMetrics = new grpc::Method<global::Gooseai.GetMetricsRequest, global::Gooseai.Metrics>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetMetrics",
        __Marshaller_gooseai_GetMetricsRequest,
        __Marshaller_gooseai_Metrics);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Gooseai.APIKeyRequest, global::Gooseai.APIKey> __Method_CreateAPIKey = new grpc::Method<global::Gooseai.APIKeyRequest, global::Gooseai.APIKey>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateAPIKey",
        __Marshaller_gooseai_APIKeyRequest,
        __Marshaller_gooseai_APIKey);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Gooseai.APIKeyFindRequest, global::Gooseai.APIKey> __Method_DeleteAPIKey = new grpc::Method<global::Gooseai.APIKeyFindRequest, global::Gooseai.APIKey>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteAPIKey",
        __Marshaller_gooseai_APIKeyFindRequest,
        __Marshaller_gooseai_APIKey);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Gooseai.UpdateDefaultOrganizationRequest, global::Gooseai.User> __Method_UpdateDefaultOrganization = new grpc::Method<global::Gooseai.UpdateDefaultOrganizationRequest, global::Gooseai.User>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateDefaultOrganization",
        __Marshaller_gooseai_UpdateDefaultOrganizationRequest,
        __Marshaller_gooseai_User);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Gooseai.EmptyRequest, global::Gooseai.ClientSettings> __Method_GetClientSettings = new grpc::Method<global::Gooseai.EmptyRequest, global::Gooseai.ClientSettings>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetClientSettings",
        __Marshaller_gooseai_EmptyRequest,
        __Marshaller_gooseai_ClientSettings);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Gooseai.ClientSettings, global::Gooseai.ClientSettings> __Method_SetClientSettings = new grpc::Method<global::Gooseai.ClientSettings, global::Gooseai.ClientSettings>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetClientSettings",
        __Marshaller_gooseai_ClientSettings,
        __Marshaller_gooseai_ClientSettings);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Gooseai.UpdateUserInfoRequest, global::Gooseai.User> __Method_UpdateUserInfo = new grpc::Method<global::Gooseai.UpdateUserInfoRequest, global::Gooseai.User>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateUserInfo",
        __Marshaller_gooseai_UpdateUserInfoRequest,
        __Marshaller_gooseai_User);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Gooseai.EmptyRequest, global::Gooseai.UserPasswordChangeTicket> __Method_CreatePasswordChangeTicket = new grpc::Method<global::Gooseai.EmptyRequest, global::Gooseai.UserPasswordChangeTicket>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreatePasswordChangeTicket",
        __Marshaller_gooseai_EmptyRequest,
        __Marshaller_gooseai_UserPasswordChangeTicket);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Gooseai.EmptyRequest, global::Gooseai.User> __Method_DeleteAccount = new grpc::Method<global::Gooseai.EmptyRequest, global::Gooseai.User>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteAccount",
        __Marshaller_gooseai_EmptyRequest,
        __Marshaller_gooseai_User);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Gooseai.CreateChargeRequest, global::Gooseai.Charge> __Method_CreateCharge = new grpc::Method<global::Gooseai.CreateChargeRequest, global::Gooseai.Charge>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateCharge",
        __Marshaller_gooseai_CreateChargeRequest,
        __Marshaller_gooseai_Charge);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Gooseai.GetChargesRequest, global::Gooseai.Charges> __Method_GetCharges = new grpc::Method<global::Gooseai.GetChargesRequest, global::Gooseai.Charges>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCharges",
        __Marshaller_gooseai_GetChargesRequest,
        __Marshaller_gooseai_Charges);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Gooseai.CreateAutoChargeIntentRequest, global::Gooseai.AutoChargeIntent> __Method_CreateAutoChargeIntent = new grpc::Method<global::Gooseai.CreateAutoChargeIntentRequest, global::Gooseai.AutoChargeIntent>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateAutoChargeIntent",
        __Marshaller_gooseai_CreateAutoChargeIntentRequest,
        __Marshaller_gooseai_AutoChargeIntent);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Gooseai.CreateAutoChargeIntentRequest, global::Gooseai.AutoChargeIntent> __Method_UpdateAutoChargeIntent = new grpc::Method<global::Gooseai.CreateAutoChargeIntentRequest, global::Gooseai.AutoChargeIntent>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateAutoChargeIntent",
        __Marshaller_gooseai_CreateAutoChargeIntentRequest,
        __Marshaller_gooseai_AutoChargeIntent);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Gooseai.GetAutoChargeRequest, global::Gooseai.AutoChargeIntent> __Method_GetAutoChargeIntent = new grpc::Method<global::Gooseai.GetAutoChargeRequest, global::Gooseai.AutoChargeIntent>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAutoChargeIntent",
        __Marshaller_gooseai_GetAutoChargeRequest,
        __Marshaller_gooseai_AutoChargeIntent);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Gooseai.DashboardReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of DashboardService</summary>
    [grpc::BindServiceMethod(typeof(DashboardService), "BindService")]
    public abstract partial class DashboardServiceBase
    {
      /// <summary>
      /// Get info
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Gooseai.User> GetMe(global::Gooseai.EmptyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Gooseai.Organization> GetOrganization(global::Gooseai.GetOrganizationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Gooseai.Metrics> GetMetrics(global::Gooseai.GetMetricsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// API key management
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Gooseai.APIKey> CreateAPIKey(global::Gooseai.APIKeyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Gooseai.APIKey> DeleteAPIKey(global::Gooseai.APIKeyFindRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// User settings
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Gooseai.User> UpdateDefaultOrganization(global::Gooseai.UpdateDefaultOrganizationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Gooseai.ClientSettings> GetClientSettings(global::Gooseai.EmptyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Gooseai.ClientSettings> SetClientSettings(global::Gooseai.ClientSettings request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Gooseai.User> UpdateUserInfo(global::Gooseai.UpdateUserInfoRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Gooseai.UserPasswordChangeTicket> CreatePasswordChangeTicket(global::Gooseai.EmptyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Gooseai.User> DeleteAccount(global::Gooseai.EmptyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Payment functions
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Gooseai.Charge> CreateCharge(global::Gooseai.CreateChargeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Gooseai.Charges> GetCharges(global::Gooseai.GetChargesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Gooseai.AutoChargeIntent> CreateAutoChargeIntent(global::Gooseai.CreateAutoChargeIntentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Gooseai.AutoChargeIntent> UpdateAutoChargeIntent(global::Gooseai.CreateAutoChargeIntentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Gooseai.AutoChargeIntent> GetAutoChargeIntent(global::Gooseai.GetAutoChargeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for DashboardService</summary>
    public partial class DashboardServiceClient : grpc::ClientBase<DashboardServiceClient>
    {
      /// <summary>Creates a new client for DashboardService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public DashboardServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for DashboardService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public DashboardServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected DashboardServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected DashboardServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Get info
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Gooseai.User GetMe(global::Gooseai.EmptyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMe(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get info
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Gooseai.User GetMe(global::Gooseai.EmptyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetMe, null, options, request);
      }
      /// <summary>
      /// Get info
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Gooseai.User> GetMeAsync(global::Gooseai.EmptyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get info
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Gooseai.User> GetMeAsync(global::Gooseai.EmptyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetMe, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Gooseai.Organization GetOrganization(global::Gooseai.GetOrganizationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOrganization(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Gooseai.Organization GetOrganization(global::Gooseai.GetOrganizationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetOrganization, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Gooseai.Organization> GetOrganizationAsync(global::Gooseai.GetOrganizationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOrganizationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Gooseai.Organization> GetOrganizationAsync(global::Gooseai.GetOrganizationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetOrganization, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Gooseai.Metrics GetMetrics(global::Gooseai.GetMetricsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMetrics(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Gooseai.Metrics GetMetrics(global::Gooseai.GetMetricsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetMetrics, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Gooseai.Metrics> GetMetricsAsync(global::Gooseai.GetMetricsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMetricsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Gooseai.Metrics> GetMetricsAsync(global::Gooseai.GetMetricsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetMetrics, null, options, request);
      }
      /// <summary>
      /// API key management
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Gooseai.APIKey CreateAPIKey(global::Gooseai.APIKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAPIKey(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// API key management
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Gooseai.APIKey CreateAPIKey(global::Gooseai.APIKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateAPIKey, null, options, request);
      }
      /// <summary>
      /// API key management
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Gooseai.APIKey> CreateAPIKeyAsync(global::Gooseai.APIKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAPIKeyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// API key management
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Gooseai.APIKey> CreateAPIKeyAsync(global::Gooseai.APIKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateAPIKey, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Gooseai.APIKey DeleteAPIKey(global::Gooseai.APIKeyFindRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAPIKey(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Gooseai.APIKey DeleteAPIKey(global::Gooseai.APIKeyFindRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteAPIKey, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Gooseai.APIKey> DeleteAPIKeyAsync(global::Gooseai.APIKeyFindRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAPIKeyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Gooseai.APIKey> DeleteAPIKeyAsync(global::Gooseai.APIKeyFindRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteAPIKey, null, options, request);
      }
      /// <summary>
      /// User settings
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Gooseai.User UpdateDefaultOrganization(global::Gooseai.UpdateDefaultOrganizationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateDefaultOrganization(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// User settings
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Gooseai.User UpdateDefaultOrganization(global::Gooseai.UpdateDefaultOrganizationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateDefaultOrganization, null, options, request);
      }
      /// <summary>
      /// User settings
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Gooseai.User> UpdateDefaultOrganizationAsync(global::Gooseai.UpdateDefaultOrganizationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateDefaultOrganizationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// User settings
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Gooseai.User> UpdateDefaultOrganizationAsync(global::Gooseai.UpdateDefaultOrganizationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateDefaultOrganization, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Gooseai.ClientSettings GetClientSettings(global::Gooseai.EmptyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetClientSettings(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Gooseai.ClientSettings GetClientSettings(global::Gooseai.EmptyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetClientSettings, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Gooseai.ClientSettings> GetClientSettingsAsync(global::Gooseai.EmptyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetClientSettingsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Gooseai.ClientSettings> GetClientSettingsAsync(global::Gooseai.EmptyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetClientSettings, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Gooseai.ClientSettings SetClientSettings(global::Gooseai.ClientSettings request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetClientSettings(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Gooseai.ClientSettings SetClientSettings(global::Gooseai.ClientSettings request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetClientSettings, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Gooseai.ClientSettings> SetClientSettingsAsync(global::Gooseai.ClientSettings request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetClientSettingsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Gooseai.ClientSettings> SetClientSettingsAsync(global::Gooseai.ClientSettings request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetClientSettings, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Gooseai.User UpdateUserInfo(global::Gooseai.UpdateUserInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateUserInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Gooseai.User UpdateUserInfo(global::Gooseai.UpdateUserInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateUserInfo, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Gooseai.User> UpdateUserInfoAsync(global::Gooseai.UpdateUserInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateUserInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Gooseai.User> UpdateUserInfoAsync(global::Gooseai.UpdateUserInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateUserInfo, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Gooseai.UserPasswordChangeTicket CreatePasswordChangeTicket(global::Gooseai.EmptyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreatePasswordChangeTicket(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Gooseai.UserPasswordChangeTicket CreatePasswordChangeTicket(global::Gooseai.EmptyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreatePasswordChangeTicket, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Gooseai.UserPasswordChangeTicket> CreatePasswordChangeTicketAsync(global::Gooseai.EmptyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreatePasswordChangeTicketAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Gooseai.UserPasswordChangeTicket> CreatePasswordChangeTicketAsync(global::Gooseai.EmptyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreatePasswordChangeTicket, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Gooseai.User DeleteAccount(global::Gooseai.EmptyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAccount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Gooseai.User DeleteAccount(global::Gooseai.EmptyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteAccount, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Gooseai.User> DeleteAccountAsync(global::Gooseai.EmptyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Gooseai.User> DeleteAccountAsync(global::Gooseai.EmptyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteAccount, null, options, request);
      }
      /// <summary>
      /// Payment functions
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Gooseai.Charge CreateCharge(global::Gooseai.CreateChargeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateCharge(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Payment functions
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Gooseai.Charge CreateCharge(global::Gooseai.CreateChargeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateCharge, null, options, request);
      }
      /// <summary>
      /// Payment functions
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Gooseai.Charge> CreateChargeAsync(global::Gooseai.CreateChargeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateChargeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Payment functions
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Gooseai.Charge> CreateChargeAsync(global::Gooseai.CreateChargeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateCharge, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Gooseai.Charges GetCharges(global::Gooseai.GetChargesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCharges(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Gooseai.Charges GetCharges(global::Gooseai.GetChargesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCharges, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Gooseai.Charges> GetChargesAsync(global::Gooseai.GetChargesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetChargesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Gooseai.Charges> GetChargesAsync(global::Gooseai.GetChargesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCharges, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Gooseai.AutoChargeIntent CreateAutoChargeIntent(global::Gooseai.CreateAutoChargeIntentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAutoChargeIntent(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Gooseai.AutoChargeIntent CreateAutoChargeIntent(global::Gooseai.CreateAutoChargeIntentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateAutoChargeIntent, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Gooseai.AutoChargeIntent> CreateAutoChargeIntentAsync(global::Gooseai.CreateAutoChargeIntentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAutoChargeIntentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Gooseai.AutoChargeIntent> CreateAutoChargeIntentAsync(global::Gooseai.CreateAutoChargeIntentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateAutoChargeIntent, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Gooseai.AutoChargeIntent UpdateAutoChargeIntent(global::Gooseai.CreateAutoChargeIntentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAutoChargeIntent(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Gooseai.AutoChargeIntent UpdateAutoChargeIntent(global::Gooseai.CreateAutoChargeIntentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateAutoChargeIntent, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Gooseai.AutoChargeIntent> UpdateAutoChargeIntentAsync(global::Gooseai.CreateAutoChargeIntentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAutoChargeIntentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Gooseai.AutoChargeIntent> UpdateAutoChargeIntentAsync(global::Gooseai.CreateAutoChargeIntentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateAutoChargeIntent, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Gooseai.AutoChargeIntent GetAutoChargeIntent(global::Gooseai.GetAutoChargeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAutoChargeIntent(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Gooseai.AutoChargeIntent GetAutoChargeIntent(global::Gooseai.GetAutoChargeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAutoChargeIntent, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Gooseai.AutoChargeIntent> GetAutoChargeIntentAsync(global::Gooseai.GetAutoChargeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAutoChargeIntentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Gooseai.AutoChargeIntent> GetAutoChargeIntentAsync(global::Gooseai.GetAutoChargeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAutoChargeIntent, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override DashboardServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new DashboardServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(DashboardServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetMe, serviceImpl.GetMe)
          .AddMethod(__Method_GetOrganization, serviceImpl.GetOrganization)
          .AddMethod(__Method_GetMetrics, serviceImpl.GetMetrics)
          .AddMethod(__Method_CreateAPIKey, serviceImpl.CreateAPIKey)
          .AddMethod(__Method_DeleteAPIKey, serviceImpl.DeleteAPIKey)
          .AddMethod(__Method_UpdateDefaultOrganization, serviceImpl.UpdateDefaultOrganization)
          .AddMethod(__Method_GetClientSettings, serviceImpl.GetClientSettings)
          .AddMethod(__Method_SetClientSettings, serviceImpl.SetClientSettings)
          .AddMethod(__Method_UpdateUserInfo, serviceImpl.UpdateUserInfo)
          .AddMethod(__Method_CreatePasswordChangeTicket, serviceImpl.CreatePasswordChangeTicket)
          .AddMethod(__Method_DeleteAccount, serviceImpl.DeleteAccount)
          .AddMethod(__Method_CreateCharge, serviceImpl.CreateCharge)
          .AddMethod(__Method_GetCharges, serviceImpl.GetCharges)
          .AddMethod(__Method_CreateAutoChargeIntent, serviceImpl.CreateAutoChargeIntent)
          .AddMethod(__Method_UpdateAutoChargeIntent, serviceImpl.UpdateAutoChargeIntent)
          .AddMethod(__Method_GetAutoChargeIntent, serviceImpl.GetAutoChargeIntent).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, DashboardServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetMe, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Gooseai.EmptyRequest, global::Gooseai.User>(serviceImpl.GetMe));
      serviceBinder.AddMethod(__Method_GetOrganization, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Gooseai.GetOrganizationRequest, global::Gooseai.Organization>(serviceImpl.GetOrganization));
      serviceBinder.AddMethod(__Method_GetMetrics, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Gooseai.GetMetricsRequest, global::Gooseai.Metrics>(serviceImpl.GetMetrics));
      serviceBinder.AddMethod(__Method_CreateAPIKey, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Gooseai.APIKeyRequest, global::Gooseai.APIKey>(serviceImpl.CreateAPIKey));
      serviceBinder.AddMethod(__Method_DeleteAPIKey, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Gooseai.APIKeyFindRequest, global::Gooseai.APIKey>(serviceImpl.DeleteAPIKey));
      serviceBinder.AddMethod(__Method_UpdateDefaultOrganization, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Gooseai.UpdateDefaultOrganizationRequest, global::Gooseai.User>(serviceImpl.UpdateDefaultOrganization));
      serviceBinder.AddMethod(__Method_GetClientSettings, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Gooseai.EmptyRequest, global::Gooseai.ClientSettings>(serviceImpl.GetClientSettings));
      serviceBinder.AddMethod(__Method_SetClientSettings, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Gooseai.ClientSettings, global::Gooseai.ClientSettings>(serviceImpl.SetClientSettings));
      serviceBinder.AddMethod(__Method_UpdateUserInfo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Gooseai.UpdateUserInfoRequest, global::Gooseai.User>(serviceImpl.UpdateUserInfo));
      serviceBinder.AddMethod(__Method_CreatePasswordChangeTicket, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Gooseai.EmptyRequest, global::Gooseai.UserPasswordChangeTicket>(serviceImpl.CreatePasswordChangeTicket));
      serviceBinder.AddMethod(__Method_DeleteAccount, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Gooseai.EmptyRequest, global::Gooseai.User>(serviceImpl.DeleteAccount));
      serviceBinder.AddMethod(__Method_CreateCharge, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Gooseai.CreateChargeRequest, global::Gooseai.Charge>(serviceImpl.CreateCharge));
      serviceBinder.AddMethod(__Method_GetCharges, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Gooseai.GetChargesRequest, global::Gooseai.Charges>(serviceImpl.GetCharges));
      serviceBinder.AddMethod(__Method_CreateAutoChargeIntent, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Gooseai.CreateAutoChargeIntentRequest, global::Gooseai.AutoChargeIntent>(serviceImpl.CreateAutoChargeIntent));
      serviceBinder.AddMethod(__Method_UpdateAutoChargeIntent, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Gooseai.CreateAutoChargeIntentRequest, global::Gooseai.AutoChargeIntent>(serviceImpl.UpdateAutoChargeIntent));
      serviceBinder.AddMethod(__Method_GetAutoChargeIntent, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Gooseai.GetAutoChargeRequest, global::Gooseai.AutoChargeIntent>(serviceImpl.GetAutoChargeIntent));
    }

  }
}
#endregion
