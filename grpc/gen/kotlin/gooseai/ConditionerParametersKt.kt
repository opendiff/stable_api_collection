//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: generation.proto

package gooseai;

@kotlin.jvm.JvmName("-initializeconditionerParameters")
public inline fun conditionerParameters(block: gooseai.ConditionerParametersKt.Dsl.() -> kotlin.Unit): gooseai.Generation.ConditionerParameters =
  gooseai.ConditionerParametersKt.Dsl._create(gooseai.Generation.ConditionerParameters.newBuilder()).apply { block() }._build()
public object ConditionerParametersKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: gooseai.Generation.ConditionerParameters.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: gooseai.Generation.ConditionerParameters.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): gooseai.Generation.ConditionerParameters = _builder.build()

    /**
     * <code>optional string vector_adjust_prior = 1 [json_name = "vectorAdjustPrior"];</code>
     */
    public var vectorAdjustPrior: kotlin.String
      @JvmName("getVectorAdjustPrior")
      get() = _builder.getVectorAdjustPrior()
      @JvmName("setVectorAdjustPrior")
      set(value) {
        _builder.setVectorAdjustPrior(value)
      }
    /**
     * <code>optional string vector_adjust_prior = 1 [json_name = "vectorAdjustPrior"];</code>
     */
    public fun clearVectorAdjustPrior() {
      _builder.clearVectorAdjustPrior()
    }
    /**
     * <code>optional string vector_adjust_prior = 1 [json_name = "vectorAdjustPrior"];</code>
     * @return Whether the vectorAdjustPrior field is set.
     */
    public fun hasVectorAdjustPrior(): kotlin.Boolean {
      return _builder.hasVectorAdjustPrior()
    }

    /**
     * <code>optional .gooseai.Model conditioner = 2 [json_name = "conditioner"];</code>
     */
    public var conditioner: gooseai.Generation.Model
      @JvmName("getConditioner")
      get() = _builder.getConditioner()
      @JvmName("setConditioner")
      set(value) {
        _builder.setConditioner(value)
      }
    /**
     * <code>optional .gooseai.Model conditioner = 2 [json_name = "conditioner"];</code>
     */
    public fun clearConditioner() {
      _builder.clearConditioner()
    }
    /**
     * <code>optional .gooseai.Model conditioner = 2 [json_name = "conditioner"];</code>
     * @return Whether the conditioner field is set.
     */
    public fun hasConditioner(): kotlin.Boolean {
      return _builder.hasConditioner()
    }
    public val ConditionerParametersKt.Dsl.conditionerOrNull: gooseai.Generation.Model?
      get() = _builder.conditionerOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun gooseai.Generation.ConditionerParameters.copy(block: gooseai.ConditionerParametersKt.Dsl.() -> kotlin.Unit): gooseai.Generation.ConditionerParameters =
  gooseai.ConditionerParametersKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val gooseai.Generation.ConditionerParametersOrBuilder.conditionerOrNull: gooseai.Generation.Model?
  get() = if (hasConditioner()) getConditioner() else null

