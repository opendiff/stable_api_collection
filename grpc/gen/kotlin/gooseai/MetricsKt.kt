//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: dashboard.proto

package gooseai;

@kotlin.jvm.JvmName("-initializemetrics")
public inline fun metrics(block: gooseai.MetricsKt.Dsl.() -> kotlin.Unit): gooseai.Dashboard.Metrics =
  gooseai.MetricsKt.Dsl._create(gooseai.Dashboard.Metrics.newBuilder()).apply { block() }._build()
public object MetricsKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: gooseai.Dashboard.Metrics.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: gooseai.Dashboard.Metrics.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): gooseai.Dashboard.Metrics = _builder.build()

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class MetricsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <code>repeated .gooseai.UsageMetric metrics = 1 [json_name = "metrics"];</code>
     */
     public val metrics: com.google.protobuf.kotlin.DslList<gooseai.Dashboard.UsageMetric, MetricsProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getMetricsList()
      )
    /**
     * <code>repeated .gooseai.UsageMetric metrics = 1 [json_name = "metrics"];</code>
     * @param value The metrics to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addMetrics")
    public fun com.google.protobuf.kotlin.DslList<gooseai.Dashboard.UsageMetric, MetricsProxy>.add(value: gooseai.Dashboard.UsageMetric) {
      _builder.addMetrics(value)
    }
    /**
     * <code>repeated .gooseai.UsageMetric metrics = 1 [json_name = "metrics"];</code>
     * @param value The metrics to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignMetrics")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<gooseai.Dashboard.UsageMetric, MetricsProxy>.plusAssign(value: gooseai.Dashboard.UsageMetric) {
      add(value)
    }
    /**
     * <code>repeated .gooseai.UsageMetric metrics = 1 [json_name = "metrics"];</code>
     * @param values The metrics to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllMetrics")
    public fun com.google.protobuf.kotlin.DslList<gooseai.Dashboard.UsageMetric, MetricsProxy>.addAll(values: kotlin.collections.Iterable<gooseai.Dashboard.UsageMetric>) {
      _builder.addAllMetrics(values)
    }
    /**
     * <code>repeated .gooseai.UsageMetric metrics = 1 [json_name = "metrics"];</code>
     * @param values The metrics to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllMetrics")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<gooseai.Dashboard.UsageMetric, MetricsProxy>.plusAssign(values: kotlin.collections.Iterable<gooseai.Dashboard.UsageMetric>) {
      addAll(values)
    }
    /**
     * <code>repeated .gooseai.UsageMetric metrics = 1 [json_name = "metrics"];</code>
     * @param index The index to set the value at.
     * @param value The metrics to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setMetrics")
    public operator fun com.google.protobuf.kotlin.DslList<gooseai.Dashboard.UsageMetric, MetricsProxy>.set(index: kotlin.Int, value: gooseai.Dashboard.UsageMetric) {
      _builder.setMetrics(index, value)
    }
    /**
     * <code>repeated .gooseai.UsageMetric metrics = 1 [json_name = "metrics"];</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearMetrics")
    public fun com.google.protobuf.kotlin.DslList<gooseai.Dashboard.UsageMetric, MetricsProxy>.clear() {
      _builder.clearMetrics()
    }


    /**
     * <code>.gooseai.TotalMetricsData total = 2 [json_name = "total"];</code>
     */
    public var total: gooseai.Dashboard.TotalMetricsData
      @JvmName("getTotal")
      get() = _builder.getTotal()
      @JvmName("setTotal")
      set(value) {
        _builder.setTotal(value)
      }
    /**
     * <code>.gooseai.TotalMetricsData total = 2 [json_name = "total"];</code>
     */
    public fun clearTotal() {
      _builder.clearTotal()
    }
    /**
     * <code>.gooseai.TotalMetricsData total = 2 [json_name = "total"];</code>
     * @return Whether the total field is set.
     */
    public fun hasTotal(): kotlin.Boolean {
      return _builder.hasTotal()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun gooseai.Dashboard.Metrics.copy(block: gooseai.MetricsKt.Dsl.() -> kotlin.Unit): gooseai.Dashboard.Metrics =
  gooseai.MetricsKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val gooseai.Dashboard.MetricsOrBuilder.totalOrNull: gooseai.Dashboard.TotalMetricsData?
  get() = if (hasTotal()) getTotal() else null

