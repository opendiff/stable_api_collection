//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: generation.proto

package gooseai;

@kotlin.jvm.JvmName("-initializetokens")
public inline fun tokens(block: gooseai.TokensKt.Dsl.() -> kotlin.Unit): gooseai.Generation.Tokens =
  gooseai.TokensKt.Dsl._create(gooseai.Generation.Tokens.newBuilder()).apply { block() }._build()
public object TokensKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: gooseai.Generation.Tokens.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: gooseai.Generation.Tokens.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): gooseai.Generation.Tokens = _builder.build()

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class TokensProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <code>repeated .gooseai.Token tokens = 1 [json_name = "tokens"];</code>
     */
     public val tokens: com.google.protobuf.kotlin.DslList<gooseai.Generation.Token, TokensProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getTokensList()
      )
    /**
     * <code>repeated .gooseai.Token tokens = 1 [json_name = "tokens"];</code>
     * @param value The tokens to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addTokens")
    public fun com.google.protobuf.kotlin.DslList<gooseai.Generation.Token, TokensProxy>.add(value: gooseai.Generation.Token) {
      _builder.addTokens(value)
    }
    /**
     * <code>repeated .gooseai.Token tokens = 1 [json_name = "tokens"];</code>
     * @param value The tokens to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignTokens")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<gooseai.Generation.Token, TokensProxy>.plusAssign(value: gooseai.Generation.Token) {
      add(value)
    }
    /**
     * <code>repeated .gooseai.Token tokens = 1 [json_name = "tokens"];</code>
     * @param values The tokens to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllTokens")
    public fun com.google.protobuf.kotlin.DslList<gooseai.Generation.Token, TokensProxy>.addAll(values: kotlin.collections.Iterable<gooseai.Generation.Token>) {
      _builder.addAllTokens(values)
    }
    /**
     * <code>repeated .gooseai.Token tokens = 1 [json_name = "tokens"];</code>
     * @param values The tokens to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllTokens")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<gooseai.Generation.Token, TokensProxy>.plusAssign(values: kotlin.collections.Iterable<gooseai.Generation.Token>) {
      addAll(values)
    }
    /**
     * <code>repeated .gooseai.Token tokens = 1 [json_name = "tokens"];</code>
     * @param index The index to set the value at.
     * @param value The tokens to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setTokens")
    public operator fun com.google.protobuf.kotlin.DslList<gooseai.Generation.Token, TokensProxy>.set(index: kotlin.Int, value: gooseai.Generation.Token) {
      _builder.setTokens(index, value)
    }
    /**
     * <code>repeated .gooseai.Token tokens = 1 [json_name = "tokens"];</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearTokens")
    public fun com.google.protobuf.kotlin.DslList<gooseai.Generation.Token, TokensProxy>.clear() {
      _builder.clearTokens()
    }


    /**
     * <code>optional string tokenizer_id = 2 [json_name = "tokenizerId"];</code>
     */
    public var tokenizerId: kotlin.String
      @JvmName("getTokenizerId")
      get() = _builder.getTokenizerId()
      @JvmName("setTokenizerId")
      set(value) {
        _builder.setTokenizerId(value)
      }
    /**
     * <code>optional string tokenizer_id = 2 [json_name = "tokenizerId"];</code>
     */
    public fun clearTokenizerId() {
      _builder.clearTokenizerId()
    }
    /**
     * <code>optional string tokenizer_id = 2 [json_name = "tokenizerId"];</code>
     * @return Whether the tokenizerId field is set.
     */
    public fun hasTokenizerId(): kotlin.Boolean {
      return _builder.hasTokenizerId()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun gooseai.Generation.Tokens.copy(block: gooseai.TokensKt.Dsl.() -> kotlin.Unit): gooseai.Generation.Tokens =
  gooseai.TokensKt.Dsl._create(this.toBuilder()).apply { block() }._build()

