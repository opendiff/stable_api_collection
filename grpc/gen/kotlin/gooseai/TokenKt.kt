//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: generation.proto

package gooseai;

@kotlin.jvm.JvmName("-initializetoken")
public inline fun token(block: gooseai.TokenKt.Dsl.() -> kotlin.Unit): gooseai.Generation.Token =
  gooseai.TokenKt.Dsl._create(gooseai.Generation.Token.newBuilder()).apply { block() }._build()
public object TokenKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: gooseai.Generation.Token.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: gooseai.Generation.Token.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): gooseai.Generation.Token = _builder.build()

    /**
     * <code>optional string text = 1 [json_name = "text"];</code>
     */
    public var text: kotlin.String
      @JvmName("getText")
      get() = _builder.getText()
      @JvmName("setText")
      set(value) {
        _builder.setText(value)
      }
    /**
     * <code>optional string text = 1 [json_name = "text"];</code>
     */
    public fun clearText() {
      _builder.clearText()
    }
    /**
     * <code>optional string text = 1 [json_name = "text"];</code>
     * @return Whether the text field is set.
     */
    public fun hasText(): kotlin.Boolean {
      return _builder.hasText()
    }

    /**
     * <code>uint32 id = 2 [json_name = "id"];</code>
     */
    public var id: kotlin.Int
      @JvmName("getId")
      get() = _builder.getId()
      @JvmName("setId")
      set(value) {
        _builder.setId(value)
      }
    /**
     * <code>uint32 id = 2 [json_name = "id"];</code>
     */
    public fun clearId() {
      _builder.clearId()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun gooseai.Generation.Token.copy(block: gooseai.TokenKt.Dsl.() -> kotlin.Unit): gooseai.Generation.Token =
  gooseai.TokenKt.Dsl._create(this.toBuilder()).apply { block() }._build()

