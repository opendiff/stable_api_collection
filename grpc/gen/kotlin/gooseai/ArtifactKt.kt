//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: generation.proto

package gooseai;

@kotlin.jvm.JvmName("-initializeartifact")
public inline fun artifact(block: gooseai.ArtifactKt.Dsl.() -> kotlin.Unit): gooseai.Generation.Artifact =
  gooseai.ArtifactKt.Dsl._create(gooseai.Generation.Artifact.newBuilder()).apply { block() }._build()
public object ArtifactKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: gooseai.Generation.Artifact.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: gooseai.Generation.Artifact.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): gooseai.Generation.Artifact = _builder.build()

    /**
     * <code>uint64 id = 1 [json_name = "id"];</code>
     */
    public var id: kotlin.Long
      @JvmName("getId")
      get() = _builder.getId()
      @JvmName("setId")
      set(value) {
        _builder.setId(value)
      }
    /**
     * <code>uint64 id = 1 [json_name = "id"];</code>
     */
    public fun clearId() {
      _builder.clearId()
    }

    /**
     * <code>.gooseai.ArtifactType type = 2 [json_name = "type"];</code>
     */
    public var type: gooseai.Generation.ArtifactType
      @JvmName("getType")
      get() = _builder.getType()
      @JvmName("setType")
      set(value) {
        _builder.setType(value)
      }
    /**
     * <code>.gooseai.ArtifactType type = 2 [json_name = "type"];</code>
     */
    public fun clearType() {
      _builder.clearType()
    }

    /**
     * <pre>
     * MIME type identifier, e.g. "image/png"
     * </pre>
     *
     * <code>string mime = 3 [json_name = "mime"];</code>
     */
    public var mime: kotlin.String
      @JvmName("getMime")
      get() = _builder.getMime()
      @JvmName("setMime")
      set(value) {
        _builder.setMime(value)
      }
    /**
     * <pre>
     * MIME type identifier, e.g. "image/png"
     * </pre>
     *
     * <code>string mime = 3 [json_name = "mime"];</code>
     */
    public fun clearMime() {
      _builder.clearMime()
    }

    /**
     * <pre>
     * Magic number, e.g. "PNG"
     * </pre>
     *
     * <code>optional string magic = 4 [json_name = "magic"];</code>
     */
    public var magic: kotlin.String
      @JvmName("getMagic")
      get() = _builder.getMagic()
      @JvmName("setMagic")
      set(value) {
        _builder.setMagic(value)
      }
    /**
     * <pre>
     * Magic number, e.g. "PNG"
     * </pre>
     *
     * <code>optional string magic = 4 [json_name = "magic"];</code>
     */
    public fun clearMagic() {
      _builder.clearMagic()
    }
    /**
     * <pre>
     * Magic number, e.g. "PNG"
     * </pre>
     *
     * <code>optional string magic = 4 [json_name = "magic"];</code>
     * @return Whether the magic field is set.
     */
    public fun hasMagic(): kotlin.Boolean {
      return _builder.hasMagic()
    }

    /**
     * <pre>
     * Binary data, e.g. PNG image
     * </pre>
     *
     * <code>bytes binary = 5 [json_name = "binary"];</code>
     */
    public var binary: com.google.protobuf.ByteString
      @JvmName("getBinary")
      get() = _builder.getBinary()
      @JvmName("setBinary")
      set(value) {
        _builder.setBinary(value)
      }
    /**
     * <pre>
     * Binary data, e.g. PNG image
     * </pre>
     *
     * <code>bytes binary = 5 [json_name = "binary"];</code>
     */
    public fun clearBinary() {
      _builder.clearBinary()
    }
    /**
     * <pre>
     * Binary data, e.g. PNG image
     * </pre>
     *
     * <code>bytes binary = 5 [json_name = "binary"];</code>
     * @return Whether the binary field is set.
     */
    public fun hasBinary(): kotlin.Boolean {
      return _builder.hasBinary()
    }

    /**
     * <pre>
     * Text data, e.g. text prompt
     * </pre>
     *
     * <code>string text = 6 [json_name = "text"];</code>
     */
    public var text: kotlin.String
      @JvmName("getText")
      get() = _builder.getText()
      @JvmName("setText")
      set(value) {
        _builder.setText(value)
      }
    /**
     * <pre>
     * Text data, e.g. text prompt
     * </pre>
     *
     * <code>string text = 6 [json_name = "text"];</code>
     */
    public fun clearText() {
      _builder.clearText()
    }
    /**
     * <pre>
     * Text data, e.g. text prompt
     * </pre>
     *
     * <code>string text = 6 [json_name = "text"];</code>
     * @return Whether the text field is set.
     */
    public fun hasText(): kotlin.Boolean {
      return _builder.hasText()
    }

    /**
     * <pre>
     * Tokenized text data, e.g. GPT tokens
     * </pre>
     *
     * <code>.gooseai.Tokens tokens = 7 [json_name = "tokens"];</code>
     */
    public var tokens: gooseai.Generation.Tokens
      @JvmName("getTokens")
      get() = _builder.getTokens()
      @JvmName("setTokens")
      set(value) {
        _builder.setTokens(value)
      }
    /**
     * <pre>
     * Tokenized text data, e.g. GPT tokens
     * </pre>
     *
     * <code>.gooseai.Tokens tokens = 7 [json_name = "tokens"];</code>
     */
    public fun clearTokens() {
      _builder.clearTokens()
    }
    /**
     * <pre>
     * Tokenized text data, e.g. GPT tokens
     * </pre>
     *
     * <code>.gooseai.Tokens tokens = 7 [json_name = "tokens"];</code>
     * @return Whether the tokens field is set.
     */
    public fun hasTokens(): kotlin.Boolean {
      return _builder.hasTokens()
    }

    /**
     * <code>.gooseai.ClassifierParameters classifier = 11 [json_name = "classifier"];</code>
     */
    public var classifier: gooseai.Generation.ClassifierParameters
      @JvmName("getClassifier")
      get() = _builder.getClassifier()
      @JvmName("setClassifier")
      set(value) {
        _builder.setClassifier(value)
      }
    /**
     * <code>.gooseai.ClassifierParameters classifier = 11 [json_name = "classifier"];</code>
     */
    public fun clearClassifier() {
      _builder.clearClassifier()
    }
    /**
     * <code>.gooseai.ClassifierParameters classifier = 11 [json_name = "classifier"];</code>
     * @return Whether the classifier field is set.
     */
    public fun hasClassifier(): kotlin.Boolean {
      return _builder.hasClassifier()
    }

    /**
     * <pre>
     * torch.Tensor:
     * </pre>
     *
     * <code>.tensors.Tensor tensor = 14 [json_name = "tensor"];</code>
     */
    public var tensor: tensors.Tensors.Tensor
      @JvmName("getTensor")
      get() = _builder.getTensor()
      @JvmName("setTensor")
      set(value) {
        _builder.setTensor(value)
      }
    /**
     * <pre>
     * torch.Tensor:
     * </pre>
     *
     * <code>.tensors.Tensor tensor = 14 [json_name = "tensor"];</code>
     */
    public fun clearTensor() {
      _builder.clearTensor()
    }
    /**
     * <pre>
     * torch.Tensor:
     * </pre>
     *
     * <code>.tensors.Tensor tensor = 14 [json_name = "tensor"];</code>
     * @return Whether the tensor field is set.
     */
    public fun hasTensor(): kotlin.Boolean {
      return _builder.hasTensor()
    }

    /**
     * <pre>
     * Index of this artifact in input/output list
     * </pre>
     *
     * <code>uint32 index = 8 [json_name = "index"];</code>
     */
    public var index: kotlin.Int
      @JvmName("getIndex")
      get() = _builder.getIndex()
      @JvmName("setIndex")
      set(value) {
        _builder.setIndex(value)
      }
    /**
     * <pre>
     * Index of this artifact in input/output list
     * </pre>
     *
     * <code>uint32 index = 8 [json_name = "index"];</code>
     */
    public fun clearIndex() {
      _builder.clearIndex()
    }

    /**
     * <pre>
     * Reason for finishing, if applicable
     * </pre>
     *
     * <code>.gooseai.FinishReason finish_reason = 9 [json_name = "finishReason"];</code>
     */
    public var finishReason: gooseai.Generation.FinishReason
      @JvmName("getFinishReason")
      get() = _builder.getFinishReason()
      @JvmName("setFinishReason")
      set(value) {
        _builder.setFinishReason(value)
      }
    /**
     * <pre>
     * Reason for finishing, if applicable
     * </pre>
     *
     * <code>.gooseai.FinishReason finish_reason = 9 [json_name = "finishReason"];</code>
     */
    public fun clearFinishReason() {
      _builder.clearFinishReason()
    }

    /**
     * <pre>
     * Seed used to generate this artifact
     * </pre>
     *
     * <code>uint32 seed = 10 [json_name = "seed"];</code>
     */
    public var seed: kotlin.Int
      @JvmName("getSeed")
      get() = _builder.getSeed()
      @JvmName("setSeed")
      set(value) {
        _builder.setSeed(value)
      }
    /**
     * <pre>
     * Seed used to generate this artifact
     * </pre>
     *
     * <code>uint32 seed = 10 [json_name = "seed"];</code>
     */
    public fun clearSeed() {
      _builder.clearSeed()
    }

    /**
     * <pre>
     * UUIDv4 of the artifact, used for asset lookup
     * </pre>
     *
     * <code>string uuid = 12 [json_name = "uuid"];</code>
     */
    public var uuid: kotlin.String
      @JvmName("getUuid")
      get() = _builder.getUuid()
      @JvmName("setUuid")
      set(value) {
        _builder.setUuid(value)
      }
    /**
     * <pre>
     * UUIDv4 of the artifact, used for asset lookup
     * </pre>
     *
     * <code>string uuid = 12 [json_name = "uuid"];</code>
     */
    public fun clearUuid() {
      _builder.clearUuid()
    }

    /**
     * <pre>
     * Size of the artifact in bytes
     * </pre>
     *
     * <code>uint64 size = 13 [json_name = "size"];</code>
     */
    public var size: kotlin.Long
      @JvmName("getSize")
      get() = _builder.getSize()
      @JvmName("setSize")
      set(value) {
        _builder.setSize(value)
      }
    /**
     * <pre>
     * Size of the artifact in bytes
     * </pre>
     *
     * <code>uint64 size = 13 [json_name = "size"];</code>
     */
    public fun clearSize() {
      _builder.clearSize()
    }
    public val dataCase: gooseai.Generation.Artifact.DataCase
      @JvmName("getDataCase")
      get() = _builder.getDataCase()

    public fun clearData() {
      _builder.clearData()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun gooseai.Generation.Artifact.copy(block: gooseai.ArtifactKt.Dsl.() -> kotlin.Unit): gooseai.Generation.Artifact =
  gooseai.ArtifactKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val gooseai.Generation.ArtifactOrBuilder.tokensOrNull: gooseai.Generation.Tokens?
  get() = if (hasTokens()) getTokens() else null

public val gooseai.Generation.ArtifactOrBuilder.classifierOrNull: gooseai.Generation.ClassifierParameters?
  get() = if (hasClassifier()) getClassifier() else null

public val gooseai.Generation.ArtifactOrBuilder.tensorOrNull: tensors.Tensors.Tensor?
  get() = if (hasTensor()) getTensor() else null

