/**
 * @fileoverview gRPC-Web generated client stub for gooseai
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v0.0.0
// source: dashboard.proto


/* eslint-disable */
// @ts-nocheck


goog.provide('proto.gooseai.DashboardServiceClient');
goog.provide('proto.gooseai.DashboardServicePromiseClient');

goog.require('grpc.web.MethodDescriptor');
goog.require('grpc.web.MethodType');
goog.require('grpc.web.GrpcWebClientBase');
goog.require('grpc.web.AbstractClientBase');
goog.require('grpc.web.ClientReadableStream');
goog.require('grpc.web.RpcError');
goog.require('proto.gooseai.APIKey');
goog.require('proto.gooseai.APIKeyFindRequest');
goog.require('proto.gooseai.APIKeyRequest');
goog.require('proto.gooseai.AutoChargeIntent');
goog.require('proto.gooseai.Charge');
goog.require('proto.gooseai.Charges');
goog.require('proto.gooseai.ClientSettings');
goog.require('proto.gooseai.CreateAutoChargeIntentRequest');
goog.require('proto.gooseai.CreateChargeRequest');
goog.require('proto.gooseai.EmptyRequest');
goog.require('proto.gooseai.GetAutoChargeRequest');
goog.require('proto.gooseai.GetChargesRequest');
goog.require('proto.gooseai.GetMetricsRequest');
goog.require('proto.gooseai.GetOrganizationRequest');
goog.require('proto.gooseai.Metrics');
goog.require('proto.gooseai.Organization');
goog.require('proto.gooseai.UpdateDefaultOrganizationRequest');
goog.require('proto.gooseai.UpdateUserInfoRequest');
goog.require('proto.gooseai.User');
goog.require('proto.gooseai.UserPasswordChangeTicket');

goog.requireType('grpc.web.ClientOptions');



goog.scope(function() {

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.gooseai.DashboardServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.gooseai.DashboardServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.gooseai.EmptyRequest,
 *   !proto.gooseai.User>}
 */
const methodDescriptor_DashboardService_GetMe = new grpc.web.MethodDescriptor(
  '/gooseai.DashboardService/GetMe',
  grpc.web.MethodType.UNARY,
  proto.gooseai.EmptyRequest,
  proto.gooseai.User,
  /**
   * @param {!proto.gooseai.EmptyRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.gooseai.User.deserializeBinary
);


/**
 * @param {!proto.gooseai.EmptyRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.gooseai.User)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.gooseai.User>|undefined}
 *     The XHR Node Readable Stream
 */
proto.gooseai.DashboardServiceClient.prototype.getMe =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/gooseai.DashboardService/GetMe',
      request,
      metadata || {},
      methodDescriptor_DashboardService_GetMe,
      callback);
};


/**
 * @param {!proto.gooseai.EmptyRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.gooseai.User>}
 *     Promise that resolves to the response
 */
proto.gooseai.DashboardServicePromiseClient.prototype.getMe =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/gooseai.DashboardService/GetMe',
      request,
      metadata || {},
      methodDescriptor_DashboardService_GetMe);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.gooseai.GetOrganizationRequest,
 *   !proto.gooseai.Organization>}
 */
const methodDescriptor_DashboardService_GetOrganization = new grpc.web.MethodDescriptor(
  '/gooseai.DashboardService/GetOrganization',
  grpc.web.MethodType.UNARY,
  proto.gooseai.GetOrganizationRequest,
  proto.gooseai.Organization,
  /**
   * @param {!proto.gooseai.GetOrganizationRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.gooseai.Organization.deserializeBinary
);


/**
 * @param {!proto.gooseai.GetOrganizationRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.gooseai.Organization)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.gooseai.Organization>|undefined}
 *     The XHR Node Readable Stream
 */
proto.gooseai.DashboardServiceClient.prototype.getOrganization =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/gooseai.DashboardService/GetOrganization',
      request,
      metadata || {},
      methodDescriptor_DashboardService_GetOrganization,
      callback);
};


/**
 * @param {!proto.gooseai.GetOrganizationRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.gooseai.Organization>}
 *     Promise that resolves to the response
 */
proto.gooseai.DashboardServicePromiseClient.prototype.getOrganization =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/gooseai.DashboardService/GetOrganization',
      request,
      metadata || {},
      methodDescriptor_DashboardService_GetOrganization);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.gooseai.GetMetricsRequest,
 *   !proto.gooseai.Metrics>}
 */
const methodDescriptor_DashboardService_GetMetrics = new grpc.web.MethodDescriptor(
  '/gooseai.DashboardService/GetMetrics',
  grpc.web.MethodType.UNARY,
  proto.gooseai.GetMetricsRequest,
  proto.gooseai.Metrics,
  /**
   * @param {!proto.gooseai.GetMetricsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.gooseai.Metrics.deserializeBinary
);


/**
 * @param {!proto.gooseai.GetMetricsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.gooseai.Metrics)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.gooseai.Metrics>|undefined}
 *     The XHR Node Readable Stream
 */
proto.gooseai.DashboardServiceClient.prototype.getMetrics =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/gooseai.DashboardService/GetMetrics',
      request,
      metadata || {},
      methodDescriptor_DashboardService_GetMetrics,
      callback);
};


/**
 * @param {!proto.gooseai.GetMetricsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.gooseai.Metrics>}
 *     Promise that resolves to the response
 */
proto.gooseai.DashboardServicePromiseClient.prototype.getMetrics =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/gooseai.DashboardService/GetMetrics',
      request,
      metadata || {},
      methodDescriptor_DashboardService_GetMetrics);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.gooseai.APIKeyRequest,
 *   !proto.gooseai.APIKey>}
 */
const methodDescriptor_DashboardService_CreateAPIKey = new grpc.web.MethodDescriptor(
  '/gooseai.DashboardService/CreateAPIKey',
  grpc.web.MethodType.UNARY,
  proto.gooseai.APIKeyRequest,
  proto.gooseai.APIKey,
  /**
   * @param {!proto.gooseai.APIKeyRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.gooseai.APIKey.deserializeBinary
);


/**
 * @param {!proto.gooseai.APIKeyRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.gooseai.APIKey)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.gooseai.APIKey>|undefined}
 *     The XHR Node Readable Stream
 */
proto.gooseai.DashboardServiceClient.prototype.createAPIKey =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/gooseai.DashboardService/CreateAPIKey',
      request,
      metadata || {},
      methodDescriptor_DashboardService_CreateAPIKey,
      callback);
};


/**
 * @param {!proto.gooseai.APIKeyRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.gooseai.APIKey>}
 *     Promise that resolves to the response
 */
proto.gooseai.DashboardServicePromiseClient.prototype.createAPIKey =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/gooseai.DashboardService/CreateAPIKey',
      request,
      metadata || {},
      methodDescriptor_DashboardService_CreateAPIKey);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.gooseai.APIKeyFindRequest,
 *   !proto.gooseai.APIKey>}
 */
const methodDescriptor_DashboardService_DeleteAPIKey = new grpc.web.MethodDescriptor(
  '/gooseai.DashboardService/DeleteAPIKey',
  grpc.web.MethodType.UNARY,
  proto.gooseai.APIKeyFindRequest,
  proto.gooseai.APIKey,
  /**
   * @param {!proto.gooseai.APIKeyFindRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.gooseai.APIKey.deserializeBinary
);


/**
 * @param {!proto.gooseai.APIKeyFindRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.gooseai.APIKey)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.gooseai.APIKey>|undefined}
 *     The XHR Node Readable Stream
 */
proto.gooseai.DashboardServiceClient.prototype.deleteAPIKey =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/gooseai.DashboardService/DeleteAPIKey',
      request,
      metadata || {},
      methodDescriptor_DashboardService_DeleteAPIKey,
      callback);
};


/**
 * @param {!proto.gooseai.APIKeyFindRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.gooseai.APIKey>}
 *     Promise that resolves to the response
 */
proto.gooseai.DashboardServicePromiseClient.prototype.deleteAPIKey =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/gooseai.DashboardService/DeleteAPIKey',
      request,
      metadata || {},
      methodDescriptor_DashboardService_DeleteAPIKey);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.gooseai.UpdateDefaultOrganizationRequest,
 *   !proto.gooseai.User>}
 */
const methodDescriptor_DashboardService_UpdateDefaultOrganization = new grpc.web.MethodDescriptor(
  '/gooseai.DashboardService/UpdateDefaultOrganization',
  grpc.web.MethodType.UNARY,
  proto.gooseai.UpdateDefaultOrganizationRequest,
  proto.gooseai.User,
  /**
   * @param {!proto.gooseai.UpdateDefaultOrganizationRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.gooseai.User.deserializeBinary
);


/**
 * @param {!proto.gooseai.UpdateDefaultOrganizationRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.gooseai.User)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.gooseai.User>|undefined}
 *     The XHR Node Readable Stream
 */
proto.gooseai.DashboardServiceClient.prototype.updateDefaultOrganization =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/gooseai.DashboardService/UpdateDefaultOrganization',
      request,
      metadata || {},
      methodDescriptor_DashboardService_UpdateDefaultOrganization,
      callback);
};


/**
 * @param {!proto.gooseai.UpdateDefaultOrganizationRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.gooseai.User>}
 *     Promise that resolves to the response
 */
proto.gooseai.DashboardServicePromiseClient.prototype.updateDefaultOrganization =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/gooseai.DashboardService/UpdateDefaultOrganization',
      request,
      metadata || {},
      methodDescriptor_DashboardService_UpdateDefaultOrganization);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.gooseai.EmptyRequest,
 *   !proto.gooseai.ClientSettings>}
 */
const methodDescriptor_DashboardService_GetClientSettings = new grpc.web.MethodDescriptor(
  '/gooseai.DashboardService/GetClientSettings',
  grpc.web.MethodType.UNARY,
  proto.gooseai.EmptyRequest,
  proto.gooseai.ClientSettings,
  /**
   * @param {!proto.gooseai.EmptyRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.gooseai.ClientSettings.deserializeBinary
);


/**
 * @param {!proto.gooseai.EmptyRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.gooseai.ClientSettings)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.gooseai.ClientSettings>|undefined}
 *     The XHR Node Readable Stream
 */
proto.gooseai.DashboardServiceClient.prototype.getClientSettings =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/gooseai.DashboardService/GetClientSettings',
      request,
      metadata || {},
      methodDescriptor_DashboardService_GetClientSettings,
      callback);
};


/**
 * @param {!proto.gooseai.EmptyRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.gooseai.ClientSettings>}
 *     Promise that resolves to the response
 */
proto.gooseai.DashboardServicePromiseClient.prototype.getClientSettings =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/gooseai.DashboardService/GetClientSettings',
      request,
      metadata || {},
      methodDescriptor_DashboardService_GetClientSettings);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.gooseai.ClientSettings,
 *   !proto.gooseai.ClientSettings>}
 */
const methodDescriptor_DashboardService_SetClientSettings = new grpc.web.MethodDescriptor(
  '/gooseai.DashboardService/SetClientSettings',
  grpc.web.MethodType.UNARY,
  proto.gooseai.ClientSettings,
  proto.gooseai.ClientSettings,
  /**
   * @param {!proto.gooseai.ClientSettings} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.gooseai.ClientSettings.deserializeBinary
);


/**
 * @param {!proto.gooseai.ClientSettings} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.gooseai.ClientSettings)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.gooseai.ClientSettings>|undefined}
 *     The XHR Node Readable Stream
 */
proto.gooseai.DashboardServiceClient.prototype.setClientSettings =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/gooseai.DashboardService/SetClientSettings',
      request,
      metadata || {},
      methodDescriptor_DashboardService_SetClientSettings,
      callback);
};


/**
 * @param {!proto.gooseai.ClientSettings} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.gooseai.ClientSettings>}
 *     Promise that resolves to the response
 */
proto.gooseai.DashboardServicePromiseClient.prototype.setClientSettings =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/gooseai.DashboardService/SetClientSettings',
      request,
      metadata || {},
      methodDescriptor_DashboardService_SetClientSettings);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.gooseai.UpdateUserInfoRequest,
 *   !proto.gooseai.User>}
 */
const methodDescriptor_DashboardService_UpdateUserInfo = new grpc.web.MethodDescriptor(
  '/gooseai.DashboardService/UpdateUserInfo',
  grpc.web.MethodType.UNARY,
  proto.gooseai.UpdateUserInfoRequest,
  proto.gooseai.User,
  /**
   * @param {!proto.gooseai.UpdateUserInfoRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.gooseai.User.deserializeBinary
);


/**
 * @param {!proto.gooseai.UpdateUserInfoRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.gooseai.User)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.gooseai.User>|undefined}
 *     The XHR Node Readable Stream
 */
proto.gooseai.DashboardServiceClient.prototype.updateUserInfo =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/gooseai.DashboardService/UpdateUserInfo',
      request,
      metadata || {},
      methodDescriptor_DashboardService_UpdateUserInfo,
      callback);
};


/**
 * @param {!proto.gooseai.UpdateUserInfoRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.gooseai.User>}
 *     Promise that resolves to the response
 */
proto.gooseai.DashboardServicePromiseClient.prototype.updateUserInfo =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/gooseai.DashboardService/UpdateUserInfo',
      request,
      metadata || {},
      methodDescriptor_DashboardService_UpdateUserInfo);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.gooseai.EmptyRequest,
 *   !proto.gooseai.UserPasswordChangeTicket>}
 */
const methodDescriptor_DashboardService_CreatePasswordChangeTicket = new grpc.web.MethodDescriptor(
  '/gooseai.DashboardService/CreatePasswordChangeTicket',
  grpc.web.MethodType.UNARY,
  proto.gooseai.EmptyRequest,
  proto.gooseai.UserPasswordChangeTicket,
  /**
   * @param {!proto.gooseai.EmptyRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.gooseai.UserPasswordChangeTicket.deserializeBinary
);


/**
 * @param {!proto.gooseai.EmptyRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.gooseai.UserPasswordChangeTicket)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.gooseai.UserPasswordChangeTicket>|undefined}
 *     The XHR Node Readable Stream
 */
proto.gooseai.DashboardServiceClient.prototype.createPasswordChangeTicket =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/gooseai.DashboardService/CreatePasswordChangeTicket',
      request,
      metadata || {},
      methodDescriptor_DashboardService_CreatePasswordChangeTicket,
      callback);
};


/**
 * @param {!proto.gooseai.EmptyRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.gooseai.UserPasswordChangeTicket>}
 *     Promise that resolves to the response
 */
proto.gooseai.DashboardServicePromiseClient.prototype.createPasswordChangeTicket =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/gooseai.DashboardService/CreatePasswordChangeTicket',
      request,
      metadata || {},
      methodDescriptor_DashboardService_CreatePasswordChangeTicket);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.gooseai.EmptyRequest,
 *   !proto.gooseai.User>}
 */
const methodDescriptor_DashboardService_DeleteAccount = new grpc.web.MethodDescriptor(
  '/gooseai.DashboardService/DeleteAccount',
  grpc.web.MethodType.UNARY,
  proto.gooseai.EmptyRequest,
  proto.gooseai.User,
  /**
   * @param {!proto.gooseai.EmptyRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.gooseai.User.deserializeBinary
);


/**
 * @param {!proto.gooseai.EmptyRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.gooseai.User)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.gooseai.User>|undefined}
 *     The XHR Node Readable Stream
 */
proto.gooseai.DashboardServiceClient.prototype.deleteAccount =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/gooseai.DashboardService/DeleteAccount',
      request,
      metadata || {},
      methodDescriptor_DashboardService_DeleteAccount,
      callback);
};


/**
 * @param {!proto.gooseai.EmptyRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.gooseai.User>}
 *     Promise that resolves to the response
 */
proto.gooseai.DashboardServicePromiseClient.prototype.deleteAccount =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/gooseai.DashboardService/DeleteAccount',
      request,
      metadata || {},
      methodDescriptor_DashboardService_DeleteAccount);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.gooseai.CreateChargeRequest,
 *   !proto.gooseai.Charge>}
 */
const methodDescriptor_DashboardService_CreateCharge = new grpc.web.MethodDescriptor(
  '/gooseai.DashboardService/CreateCharge',
  grpc.web.MethodType.UNARY,
  proto.gooseai.CreateChargeRequest,
  proto.gooseai.Charge,
  /**
   * @param {!proto.gooseai.CreateChargeRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.gooseai.Charge.deserializeBinary
);


/**
 * @param {!proto.gooseai.CreateChargeRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.gooseai.Charge)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.gooseai.Charge>|undefined}
 *     The XHR Node Readable Stream
 */
proto.gooseai.DashboardServiceClient.prototype.createCharge =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/gooseai.DashboardService/CreateCharge',
      request,
      metadata || {},
      methodDescriptor_DashboardService_CreateCharge,
      callback);
};


/**
 * @param {!proto.gooseai.CreateChargeRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.gooseai.Charge>}
 *     Promise that resolves to the response
 */
proto.gooseai.DashboardServicePromiseClient.prototype.createCharge =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/gooseai.DashboardService/CreateCharge',
      request,
      metadata || {},
      methodDescriptor_DashboardService_CreateCharge);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.gooseai.GetChargesRequest,
 *   !proto.gooseai.Charges>}
 */
const methodDescriptor_DashboardService_GetCharges = new grpc.web.MethodDescriptor(
  '/gooseai.DashboardService/GetCharges',
  grpc.web.MethodType.UNARY,
  proto.gooseai.GetChargesRequest,
  proto.gooseai.Charges,
  /**
   * @param {!proto.gooseai.GetChargesRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.gooseai.Charges.deserializeBinary
);


/**
 * @param {!proto.gooseai.GetChargesRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.gooseai.Charges)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.gooseai.Charges>|undefined}
 *     The XHR Node Readable Stream
 */
proto.gooseai.DashboardServiceClient.prototype.getCharges =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/gooseai.DashboardService/GetCharges',
      request,
      metadata || {},
      methodDescriptor_DashboardService_GetCharges,
      callback);
};


/**
 * @param {!proto.gooseai.GetChargesRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.gooseai.Charges>}
 *     Promise that resolves to the response
 */
proto.gooseai.DashboardServicePromiseClient.prototype.getCharges =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/gooseai.DashboardService/GetCharges',
      request,
      metadata || {},
      methodDescriptor_DashboardService_GetCharges);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.gooseai.CreateAutoChargeIntentRequest,
 *   !proto.gooseai.AutoChargeIntent>}
 */
const methodDescriptor_DashboardService_CreateAutoChargeIntent = new grpc.web.MethodDescriptor(
  '/gooseai.DashboardService/CreateAutoChargeIntent',
  grpc.web.MethodType.UNARY,
  proto.gooseai.CreateAutoChargeIntentRequest,
  proto.gooseai.AutoChargeIntent,
  /**
   * @param {!proto.gooseai.CreateAutoChargeIntentRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.gooseai.AutoChargeIntent.deserializeBinary
);


/**
 * @param {!proto.gooseai.CreateAutoChargeIntentRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.gooseai.AutoChargeIntent)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.gooseai.AutoChargeIntent>|undefined}
 *     The XHR Node Readable Stream
 */
proto.gooseai.DashboardServiceClient.prototype.createAutoChargeIntent =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/gooseai.DashboardService/CreateAutoChargeIntent',
      request,
      metadata || {},
      methodDescriptor_DashboardService_CreateAutoChargeIntent,
      callback);
};


/**
 * @param {!proto.gooseai.CreateAutoChargeIntentRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.gooseai.AutoChargeIntent>}
 *     Promise that resolves to the response
 */
proto.gooseai.DashboardServicePromiseClient.prototype.createAutoChargeIntent =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/gooseai.DashboardService/CreateAutoChargeIntent',
      request,
      metadata || {},
      methodDescriptor_DashboardService_CreateAutoChargeIntent);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.gooseai.CreateAutoChargeIntentRequest,
 *   !proto.gooseai.AutoChargeIntent>}
 */
const methodDescriptor_DashboardService_UpdateAutoChargeIntent = new grpc.web.MethodDescriptor(
  '/gooseai.DashboardService/UpdateAutoChargeIntent',
  grpc.web.MethodType.UNARY,
  proto.gooseai.CreateAutoChargeIntentRequest,
  proto.gooseai.AutoChargeIntent,
  /**
   * @param {!proto.gooseai.CreateAutoChargeIntentRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.gooseai.AutoChargeIntent.deserializeBinary
);


/**
 * @param {!proto.gooseai.CreateAutoChargeIntentRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.gooseai.AutoChargeIntent)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.gooseai.AutoChargeIntent>|undefined}
 *     The XHR Node Readable Stream
 */
proto.gooseai.DashboardServiceClient.prototype.updateAutoChargeIntent =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/gooseai.DashboardService/UpdateAutoChargeIntent',
      request,
      metadata || {},
      methodDescriptor_DashboardService_UpdateAutoChargeIntent,
      callback);
};


/**
 * @param {!proto.gooseai.CreateAutoChargeIntentRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.gooseai.AutoChargeIntent>}
 *     Promise that resolves to the response
 */
proto.gooseai.DashboardServicePromiseClient.prototype.updateAutoChargeIntent =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/gooseai.DashboardService/UpdateAutoChargeIntent',
      request,
      metadata || {},
      methodDescriptor_DashboardService_UpdateAutoChargeIntent);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.gooseai.GetAutoChargeRequest,
 *   !proto.gooseai.AutoChargeIntent>}
 */
const methodDescriptor_DashboardService_GetAutoChargeIntent = new grpc.web.MethodDescriptor(
  '/gooseai.DashboardService/GetAutoChargeIntent',
  grpc.web.MethodType.UNARY,
  proto.gooseai.GetAutoChargeRequest,
  proto.gooseai.AutoChargeIntent,
  /**
   * @param {!proto.gooseai.GetAutoChargeRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.gooseai.AutoChargeIntent.deserializeBinary
);


/**
 * @param {!proto.gooseai.GetAutoChargeRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.gooseai.AutoChargeIntent)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.gooseai.AutoChargeIntent>|undefined}
 *     The XHR Node Readable Stream
 */
proto.gooseai.DashboardServiceClient.prototype.getAutoChargeIntent =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/gooseai.DashboardService/GetAutoChargeIntent',
      request,
      metadata || {},
      methodDescriptor_DashboardService_GetAutoChargeIntent,
      callback);
};


/**
 * @param {!proto.gooseai.GetAutoChargeRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.gooseai.AutoChargeIntent>}
 *     Promise that resolves to the response
 */
proto.gooseai.DashboardServicePromiseClient.prototype.getAutoChargeIntent =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/gooseai.DashboardService/GetAutoChargeIntent',
      request,
      metadata || {},
      methodDescriptor_DashboardService_GetAutoChargeIntent);
};


}); // goog.scope

