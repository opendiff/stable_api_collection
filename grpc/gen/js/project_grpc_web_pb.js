/**
 * @fileoverview gRPC-Web generated client stub for gooseai
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v0.0.0
// source: project.proto


/* eslint-disable */
// @ts-nocheck


goog.provide('proto.gooseai.ProjectServiceClient');
goog.provide('proto.gooseai.ProjectServicePromiseClient');

goog.require('grpc.web.MethodDescriptor');
goog.require('grpc.web.MethodType');
goog.require('grpc.web.GrpcWebClientBase');
goog.require('grpc.web.AbstractClientBase');
goog.require('grpc.web.ClientReadableStream');
goog.require('grpc.web.RpcError');
goog.require('proto.gooseai.CreateProjectRequest');
goog.require('proto.gooseai.DeleteProjectRequest');
goog.require('proto.gooseai.GetProjectRequest');
goog.require('proto.gooseai.ListProjectRequest');
goog.require('proto.gooseai.Project');
goog.require('proto.gooseai.QueryAssetsRequest');
goog.require('proto.gooseai.QueryAssetsResponse');
goog.require('proto.gooseai.UpdateProjectRequest');

goog.requireType('grpc.web.ClientOptions');



goog.scope(function() {

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.gooseai.ProjectServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.gooseai.ProjectServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.gooseai.CreateProjectRequest,
 *   !proto.gooseai.Project>}
 */
const methodDescriptor_ProjectService_Create = new grpc.web.MethodDescriptor(
  '/gooseai.ProjectService/Create',
  grpc.web.MethodType.UNARY,
  proto.gooseai.CreateProjectRequest,
  proto.gooseai.Project,
  /**
   * @param {!proto.gooseai.CreateProjectRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.gooseai.Project.deserializeBinary
);


/**
 * @param {!proto.gooseai.CreateProjectRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.gooseai.Project)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.gooseai.Project>|undefined}
 *     The XHR Node Readable Stream
 */
proto.gooseai.ProjectServiceClient.prototype.create =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/gooseai.ProjectService/Create',
      request,
      metadata || {},
      methodDescriptor_ProjectService_Create,
      callback);
};


/**
 * @param {!proto.gooseai.CreateProjectRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.gooseai.Project>}
 *     Promise that resolves to the response
 */
proto.gooseai.ProjectServicePromiseClient.prototype.create =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/gooseai.ProjectService/Create',
      request,
      metadata || {},
      methodDescriptor_ProjectService_Create);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.gooseai.UpdateProjectRequest,
 *   !proto.gooseai.Project>}
 */
const methodDescriptor_ProjectService_Update = new grpc.web.MethodDescriptor(
  '/gooseai.ProjectService/Update',
  grpc.web.MethodType.UNARY,
  proto.gooseai.UpdateProjectRequest,
  proto.gooseai.Project,
  /**
   * @param {!proto.gooseai.UpdateProjectRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.gooseai.Project.deserializeBinary
);


/**
 * @param {!proto.gooseai.UpdateProjectRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.gooseai.Project)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.gooseai.Project>|undefined}
 *     The XHR Node Readable Stream
 */
proto.gooseai.ProjectServiceClient.prototype.update =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/gooseai.ProjectService/Update',
      request,
      metadata || {},
      methodDescriptor_ProjectService_Update,
      callback);
};


/**
 * @param {!proto.gooseai.UpdateProjectRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.gooseai.Project>}
 *     Promise that resolves to the response
 */
proto.gooseai.ProjectServicePromiseClient.prototype.update =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/gooseai.ProjectService/Update',
      request,
      metadata || {},
      methodDescriptor_ProjectService_Update);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.gooseai.ListProjectRequest,
 *   !proto.gooseai.Project>}
 */
const methodDescriptor_ProjectService_List = new grpc.web.MethodDescriptor(
  '/gooseai.ProjectService/List',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.gooseai.ListProjectRequest,
  proto.gooseai.Project,
  /**
   * @param {!proto.gooseai.ListProjectRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.gooseai.Project.deserializeBinary
);


/**
 * @param {!proto.gooseai.ListProjectRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.gooseai.Project>}
 *     The XHR Node Readable Stream
 */
proto.gooseai.ProjectServiceClient.prototype.list =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/gooseai.ProjectService/List',
      request,
      metadata || {},
      methodDescriptor_ProjectService_List);
};


/**
 * @param {!proto.gooseai.ListProjectRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.gooseai.Project>}
 *     The XHR Node Readable Stream
 */
proto.gooseai.ProjectServicePromiseClient.prototype.list =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/gooseai.ProjectService/List',
      request,
      metadata || {},
      methodDescriptor_ProjectService_List);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.gooseai.GetProjectRequest,
 *   !proto.gooseai.Project>}
 */
const methodDescriptor_ProjectService_Get = new grpc.web.MethodDescriptor(
  '/gooseai.ProjectService/Get',
  grpc.web.MethodType.UNARY,
  proto.gooseai.GetProjectRequest,
  proto.gooseai.Project,
  /**
   * @param {!proto.gooseai.GetProjectRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.gooseai.Project.deserializeBinary
);


/**
 * @param {!proto.gooseai.GetProjectRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.gooseai.Project)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.gooseai.Project>|undefined}
 *     The XHR Node Readable Stream
 */
proto.gooseai.ProjectServiceClient.prototype.get =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/gooseai.ProjectService/Get',
      request,
      metadata || {},
      methodDescriptor_ProjectService_Get,
      callback);
};


/**
 * @param {!proto.gooseai.GetProjectRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.gooseai.Project>}
 *     Promise that resolves to the response
 */
proto.gooseai.ProjectServicePromiseClient.prototype.get =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/gooseai.ProjectService/Get',
      request,
      metadata || {},
      methodDescriptor_ProjectService_Get);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.gooseai.DeleteProjectRequest,
 *   !proto.gooseai.Project>}
 */
const methodDescriptor_ProjectService_Delete = new grpc.web.MethodDescriptor(
  '/gooseai.ProjectService/Delete',
  grpc.web.MethodType.UNARY,
  proto.gooseai.DeleteProjectRequest,
  proto.gooseai.Project,
  /**
   * @param {!proto.gooseai.DeleteProjectRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.gooseai.Project.deserializeBinary
);


/**
 * @param {!proto.gooseai.DeleteProjectRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.gooseai.Project)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.gooseai.Project>|undefined}
 *     The XHR Node Readable Stream
 */
proto.gooseai.ProjectServiceClient.prototype.delete =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/gooseai.ProjectService/Delete',
      request,
      metadata || {},
      methodDescriptor_ProjectService_Delete,
      callback);
};


/**
 * @param {!proto.gooseai.DeleteProjectRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.gooseai.Project>}
 *     Promise that resolves to the response
 */
proto.gooseai.ProjectServicePromiseClient.prototype.delete =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/gooseai.ProjectService/Delete',
      request,
      metadata || {},
      methodDescriptor_ProjectService_Delete);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.gooseai.QueryAssetsRequest,
 *   !proto.gooseai.QueryAssetsResponse>}
 */
const methodDescriptor_ProjectService_QueryAssets = new grpc.web.MethodDescriptor(
  '/gooseai.ProjectService/QueryAssets',
  grpc.web.MethodType.UNARY,
  proto.gooseai.QueryAssetsRequest,
  proto.gooseai.QueryAssetsResponse,
  /**
   * @param {!proto.gooseai.QueryAssetsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.gooseai.QueryAssetsResponse.deserializeBinary
);


/**
 * @param {!proto.gooseai.QueryAssetsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.gooseai.QueryAssetsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.gooseai.QueryAssetsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.gooseai.ProjectServiceClient.prototype.queryAssets =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/gooseai.ProjectService/QueryAssets',
      request,
      metadata || {},
      methodDescriptor_ProjectService_QueryAssets,
      callback);
};


/**
 * @param {!proto.gooseai.QueryAssetsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.gooseai.QueryAssetsResponse>}
 *     Promise that resolves to the response
 */
proto.gooseai.ProjectServicePromiseClient.prototype.queryAssets =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/gooseai.ProjectService/QueryAssets',
      request,
      metadata || {},
      methodDescriptor_ProjectService_QueryAssets);
};


}); // goog.scope

