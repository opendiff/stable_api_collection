// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: engines.proto

#include "engines.pb.h"
#include "engines.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace gooseai {

static const char* EnginesService_method_names[] = {
  "/gooseai.EnginesService/ListEngines",
};

std::unique_ptr< EnginesService::Stub> EnginesService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< EnginesService::Stub> stub(new EnginesService::Stub(channel, options));
  return stub;
}

EnginesService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ListEngines_(EnginesService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status EnginesService::Stub::ListEngines(::grpc::ClientContext* context, const ::gooseai::ListEnginesRequest& request, ::gooseai::Engines* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gooseai::ListEnginesRequest, ::gooseai::Engines, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListEngines_, context, request, response);
}

void EnginesService::Stub::async::ListEngines(::grpc::ClientContext* context, const ::gooseai::ListEnginesRequest* request, ::gooseai::Engines* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gooseai::ListEnginesRequest, ::gooseai::Engines, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListEngines_, context, request, response, std::move(f));
}

void EnginesService::Stub::async::ListEngines(::grpc::ClientContext* context, const ::gooseai::ListEnginesRequest* request, ::gooseai::Engines* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListEngines_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gooseai::Engines>* EnginesService::Stub::PrepareAsyncListEnginesRaw(::grpc::ClientContext* context, const ::gooseai::ListEnginesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gooseai::Engines, ::gooseai::ListEnginesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListEngines_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gooseai::Engines>* EnginesService::Stub::AsyncListEnginesRaw(::grpc::ClientContext* context, const ::gooseai::ListEnginesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListEnginesRaw(context, request, cq);
  result->StartCall();
  return result;
}

EnginesService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EnginesService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EnginesService::Service, ::gooseai::ListEnginesRequest, ::gooseai::Engines, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EnginesService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gooseai::ListEnginesRequest* req,
             ::gooseai::Engines* resp) {
               return service->ListEngines(ctx, req, resp);
             }, this)));
}

EnginesService::Service::~Service() {
}

::grpc::Status EnginesService::Service::ListEngines(::grpc::ServerContext* context, const ::gooseai::ListEnginesRequest* request, ::gooseai::Engines* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace gooseai

