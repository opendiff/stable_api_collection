// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: dashboard.proto
#ifndef GRPC_dashboard_2eproto__INCLUDED
#define GRPC_dashboard_2eproto__INCLUDED

#include "dashboard.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace gooseai {

class DashboardService final {
 public:
  static constexpr char const* service_full_name() {
    return "gooseai.DashboardService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Get info
    virtual ::grpc::Status GetMe(::grpc::ClientContext* context, const ::gooseai::EmptyRequest& request, ::gooseai::User* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::User>> AsyncGetMe(::grpc::ClientContext* context, const ::gooseai::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::User>>(AsyncGetMeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::User>> PrepareAsyncGetMe(::grpc::ClientContext* context, const ::gooseai::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::User>>(PrepareAsyncGetMeRaw(context, request, cq));
    }
    virtual ::grpc::Status GetOrganization(::grpc::ClientContext* context, const ::gooseai::GetOrganizationRequest& request, ::gooseai::Organization* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::Organization>> AsyncGetOrganization(::grpc::ClientContext* context, const ::gooseai::GetOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::Organization>>(AsyncGetOrganizationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::Organization>> PrepareAsyncGetOrganization(::grpc::ClientContext* context, const ::gooseai::GetOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::Organization>>(PrepareAsyncGetOrganizationRaw(context, request, cq));
    }
    virtual ::grpc::Status GetMetrics(::grpc::ClientContext* context, const ::gooseai::GetMetricsRequest& request, ::gooseai::Metrics* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::Metrics>> AsyncGetMetrics(::grpc::ClientContext* context, const ::gooseai::GetMetricsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::Metrics>>(AsyncGetMetricsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::Metrics>> PrepareAsyncGetMetrics(::grpc::ClientContext* context, const ::gooseai::GetMetricsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::Metrics>>(PrepareAsyncGetMetricsRaw(context, request, cq));
    }
    // API key management
    virtual ::grpc::Status CreateAPIKey(::grpc::ClientContext* context, const ::gooseai::APIKeyRequest& request, ::gooseai::APIKey* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::APIKey>> AsyncCreateAPIKey(::grpc::ClientContext* context, const ::gooseai::APIKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::APIKey>>(AsyncCreateAPIKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::APIKey>> PrepareAsyncCreateAPIKey(::grpc::ClientContext* context, const ::gooseai::APIKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::APIKey>>(PrepareAsyncCreateAPIKeyRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteAPIKey(::grpc::ClientContext* context, const ::gooseai::APIKeyFindRequest& request, ::gooseai::APIKey* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::APIKey>> AsyncDeleteAPIKey(::grpc::ClientContext* context, const ::gooseai::APIKeyFindRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::APIKey>>(AsyncDeleteAPIKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::APIKey>> PrepareAsyncDeleteAPIKey(::grpc::ClientContext* context, const ::gooseai::APIKeyFindRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::APIKey>>(PrepareAsyncDeleteAPIKeyRaw(context, request, cq));
    }
    // User settings
    virtual ::grpc::Status UpdateDefaultOrganization(::grpc::ClientContext* context, const ::gooseai::UpdateDefaultOrganizationRequest& request, ::gooseai::User* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::User>> AsyncUpdateDefaultOrganization(::grpc::ClientContext* context, const ::gooseai::UpdateDefaultOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::User>>(AsyncUpdateDefaultOrganizationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::User>> PrepareAsyncUpdateDefaultOrganization(::grpc::ClientContext* context, const ::gooseai::UpdateDefaultOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::User>>(PrepareAsyncUpdateDefaultOrganizationRaw(context, request, cq));
    }
    virtual ::grpc::Status GetClientSettings(::grpc::ClientContext* context, const ::gooseai::EmptyRequest& request, ::gooseai::ClientSettings* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::ClientSettings>> AsyncGetClientSettings(::grpc::ClientContext* context, const ::gooseai::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::ClientSettings>>(AsyncGetClientSettingsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::ClientSettings>> PrepareAsyncGetClientSettings(::grpc::ClientContext* context, const ::gooseai::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::ClientSettings>>(PrepareAsyncGetClientSettingsRaw(context, request, cq));
    }
    virtual ::grpc::Status SetClientSettings(::grpc::ClientContext* context, const ::gooseai::ClientSettings& request, ::gooseai::ClientSettings* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::ClientSettings>> AsyncSetClientSettings(::grpc::ClientContext* context, const ::gooseai::ClientSettings& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::ClientSettings>>(AsyncSetClientSettingsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::ClientSettings>> PrepareAsyncSetClientSettings(::grpc::ClientContext* context, const ::gooseai::ClientSettings& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::ClientSettings>>(PrepareAsyncSetClientSettingsRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateUserInfo(::grpc::ClientContext* context, const ::gooseai::UpdateUserInfoRequest& request, ::gooseai::User* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::User>> AsyncUpdateUserInfo(::grpc::ClientContext* context, const ::gooseai::UpdateUserInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::User>>(AsyncUpdateUserInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::User>> PrepareAsyncUpdateUserInfo(::grpc::ClientContext* context, const ::gooseai::UpdateUserInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::User>>(PrepareAsyncUpdateUserInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status CreatePasswordChangeTicket(::grpc::ClientContext* context, const ::gooseai::EmptyRequest& request, ::gooseai::UserPasswordChangeTicket* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::UserPasswordChangeTicket>> AsyncCreatePasswordChangeTicket(::grpc::ClientContext* context, const ::gooseai::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::UserPasswordChangeTicket>>(AsyncCreatePasswordChangeTicketRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::UserPasswordChangeTicket>> PrepareAsyncCreatePasswordChangeTicket(::grpc::ClientContext* context, const ::gooseai::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::UserPasswordChangeTicket>>(PrepareAsyncCreatePasswordChangeTicketRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteAccount(::grpc::ClientContext* context, const ::gooseai::EmptyRequest& request, ::gooseai::User* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::User>> AsyncDeleteAccount(::grpc::ClientContext* context, const ::gooseai::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::User>>(AsyncDeleteAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::User>> PrepareAsyncDeleteAccount(::grpc::ClientContext* context, const ::gooseai::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::User>>(PrepareAsyncDeleteAccountRaw(context, request, cq));
    }
    // Payment functions
    virtual ::grpc::Status CreateCharge(::grpc::ClientContext* context, const ::gooseai::CreateChargeRequest& request, ::gooseai::Charge* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::Charge>> AsyncCreateCharge(::grpc::ClientContext* context, const ::gooseai::CreateChargeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::Charge>>(AsyncCreateChargeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::Charge>> PrepareAsyncCreateCharge(::grpc::ClientContext* context, const ::gooseai::CreateChargeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::Charge>>(PrepareAsyncCreateChargeRaw(context, request, cq));
    }
    virtual ::grpc::Status GetCharges(::grpc::ClientContext* context, const ::gooseai::GetChargesRequest& request, ::gooseai::Charges* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::Charges>> AsyncGetCharges(::grpc::ClientContext* context, const ::gooseai::GetChargesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::Charges>>(AsyncGetChargesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::Charges>> PrepareAsyncGetCharges(::grpc::ClientContext* context, const ::gooseai::GetChargesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::Charges>>(PrepareAsyncGetChargesRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateAutoChargeIntent(::grpc::ClientContext* context, const ::gooseai::CreateAutoChargeIntentRequest& request, ::gooseai::AutoChargeIntent* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::AutoChargeIntent>> AsyncCreateAutoChargeIntent(::grpc::ClientContext* context, const ::gooseai::CreateAutoChargeIntentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::AutoChargeIntent>>(AsyncCreateAutoChargeIntentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::AutoChargeIntent>> PrepareAsyncCreateAutoChargeIntent(::grpc::ClientContext* context, const ::gooseai::CreateAutoChargeIntentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::AutoChargeIntent>>(PrepareAsyncCreateAutoChargeIntentRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateAutoChargeIntent(::grpc::ClientContext* context, const ::gooseai::CreateAutoChargeIntentRequest& request, ::gooseai::AutoChargeIntent* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::AutoChargeIntent>> AsyncUpdateAutoChargeIntent(::grpc::ClientContext* context, const ::gooseai::CreateAutoChargeIntentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::AutoChargeIntent>>(AsyncUpdateAutoChargeIntentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::AutoChargeIntent>> PrepareAsyncUpdateAutoChargeIntent(::grpc::ClientContext* context, const ::gooseai::CreateAutoChargeIntentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::AutoChargeIntent>>(PrepareAsyncUpdateAutoChargeIntentRaw(context, request, cq));
    }
    virtual ::grpc::Status GetAutoChargeIntent(::grpc::ClientContext* context, const ::gooseai::GetAutoChargeRequest& request, ::gooseai::AutoChargeIntent* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::AutoChargeIntent>> AsyncGetAutoChargeIntent(::grpc::ClientContext* context, const ::gooseai::GetAutoChargeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::AutoChargeIntent>>(AsyncGetAutoChargeIntentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::AutoChargeIntent>> PrepareAsyncGetAutoChargeIntent(::grpc::ClientContext* context, const ::gooseai::GetAutoChargeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::AutoChargeIntent>>(PrepareAsyncGetAutoChargeIntentRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Get info
      virtual void GetMe(::grpc::ClientContext* context, const ::gooseai::EmptyRequest* request, ::gooseai::User* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMe(::grpc::ClientContext* context, const ::gooseai::EmptyRequest* request, ::gooseai::User* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetOrganization(::grpc::ClientContext* context, const ::gooseai::GetOrganizationRequest* request, ::gooseai::Organization* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetOrganization(::grpc::ClientContext* context, const ::gooseai::GetOrganizationRequest* request, ::gooseai::Organization* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetMetrics(::grpc::ClientContext* context, const ::gooseai::GetMetricsRequest* request, ::gooseai::Metrics* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMetrics(::grpc::ClientContext* context, const ::gooseai::GetMetricsRequest* request, ::gooseai::Metrics* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // API key management
      virtual void CreateAPIKey(::grpc::ClientContext* context, const ::gooseai::APIKeyRequest* request, ::gooseai::APIKey* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateAPIKey(::grpc::ClientContext* context, const ::gooseai::APIKeyRequest* request, ::gooseai::APIKey* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteAPIKey(::grpc::ClientContext* context, const ::gooseai::APIKeyFindRequest* request, ::gooseai::APIKey* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteAPIKey(::grpc::ClientContext* context, const ::gooseai::APIKeyFindRequest* request, ::gooseai::APIKey* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // User settings
      virtual void UpdateDefaultOrganization(::grpc::ClientContext* context, const ::gooseai::UpdateDefaultOrganizationRequest* request, ::gooseai::User* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateDefaultOrganization(::grpc::ClientContext* context, const ::gooseai::UpdateDefaultOrganizationRequest* request, ::gooseai::User* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetClientSettings(::grpc::ClientContext* context, const ::gooseai::EmptyRequest* request, ::gooseai::ClientSettings* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetClientSettings(::grpc::ClientContext* context, const ::gooseai::EmptyRequest* request, ::gooseai::ClientSettings* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SetClientSettings(::grpc::ClientContext* context, const ::gooseai::ClientSettings* request, ::gooseai::ClientSettings* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetClientSettings(::grpc::ClientContext* context, const ::gooseai::ClientSettings* request, ::gooseai::ClientSettings* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateUserInfo(::grpc::ClientContext* context, const ::gooseai::UpdateUserInfoRequest* request, ::gooseai::User* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateUserInfo(::grpc::ClientContext* context, const ::gooseai::UpdateUserInfoRequest* request, ::gooseai::User* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CreatePasswordChangeTicket(::grpc::ClientContext* context, const ::gooseai::EmptyRequest* request, ::gooseai::UserPasswordChangeTicket* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreatePasswordChangeTicket(::grpc::ClientContext* context, const ::gooseai::EmptyRequest* request, ::gooseai::UserPasswordChangeTicket* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteAccount(::grpc::ClientContext* context, const ::gooseai::EmptyRequest* request, ::gooseai::User* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteAccount(::grpc::ClientContext* context, const ::gooseai::EmptyRequest* request, ::gooseai::User* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Payment functions
      virtual void CreateCharge(::grpc::ClientContext* context, const ::gooseai::CreateChargeRequest* request, ::gooseai::Charge* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateCharge(::grpc::ClientContext* context, const ::gooseai::CreateChargeRequest* request, ::gooseai::Charge* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetCharges(::grpc::ClientContext* context, const ::gooseai::GetChargesRequest* request, ::gooseai::Charges* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCharges(::grpc::ClientContext* context, const ::gooseai::GetChargesRequest* request, ::gooseai::Charges* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CreateAutoChargeIntent(::grpc::ClientContext* context, const ::gooseai::CreateAutoChargeIntentRequest* request, ::gooseai::AutoChargeIntent* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateAutoChargeIntent(::grpc::ClientContext* context, const ::gooseai::CreateAutoChargeIntentRequest* request, ::gooseai::AutoChargeIntent* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateAutoChargeIntent(::grpc::ClientContext* context, const ::gooseai::CreateAutoChargeIntentRequest* request, ::gooseai::AutoChargeIntent* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateAutoChargeIntent(::grpc::ClientContext* context, const ::gooseai::CreateAutoChargeIntentRequest* request, ::gooseai::AutoChargeIntent* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetAutoChargeIntent(::grpc::ClientContext* context, const ::gooseai::GetAutoChargeRequest* request, ::gooseai::AutoChargeIntent* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAutoChargeIntent(::grpc::ClientContext* context, const ::gooseai::GetAutoChargeRequest* request, ::gooseai::AutoChargeIntent* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::User>* AsyncGetMeRaw(::grpc::ClientContext* context, const ::gooseai::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::User>* PrepareAsyncGetMeRaw(::grpc::ClientContext* context, const ::gooseai::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::Organization>* AsyncGetOrganizationRaw(::grpc::ClientContext* context, const ::gooseai::GetOrganizationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::Organization>* PrepareAsyncGetOrganizationRaw(::grpc::ClientContext* context, const ::gooseai::GetOrganizationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::Metrics>* AsyncGetMetricsRaw(::grpc::ClientContext* context, const ::gooseai::GetMetricsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::Metrics>* PrepareAsyncGetMetricsRaw(::grpc::ClientContext* context, const ::gooseai::GetMetricsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::APIKey>* AsyncCreateAPIKeyRaw(::grpc::ClientContext* context, const ::gooseai::APIKeyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::APIKey>* PrepareAsyncCreateAPIKeyRaw(::grpc::ClientContext* context, const ::gooseai::APIKeyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::APIKey>* AsyncDeleteAPIKeyRaw(::grpc::ClientContext* context, const ::gooseai::APIKeyFindRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::APIKey>* PrepareAsyncDeleteAPIKeyRaw(::grpc::ClientContext* context, const ::gooseai::APIKeyFindRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::User>* AsyncUpdateDefaultOrganizationRaw(::grpc::ClientContext* context, const ::gooseai::UpdateDefaultOrganizationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::User>* PrepareAsyncUpdateDefaultOrganizationRaw(::grpc::ClientContext* context, const ::gooseai::UpdateDefaultOrganizationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::ClientSettings>* AsyncGetClientSettingsRaw(::grpc::ClientContext* context, const ::gooseai::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::ClientSettings>* PrepareAsyncGetClientSettingsRaw(::grpc::ClientContext* context, const ::gooseai::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::ClientSettings>* AsyncSetClientSettingsRaw(::grpc::ClientContext* context, const ::gooseai::ClientSettings& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::ClientSettings>* PrepareAsyncSetClientSettingsRaw(::grpc::ClientContext* context, const ::gooseai::ClientSettings& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::User>* AsyncUpdateUserInfoRaw(::grpc::ClientContext* context, const ::gooseai::UpdateUserInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::User>* PrepareAsyncUpdateUserInfoRaw(::grpc::ClientContext* context, const ::gooseai::UpdateUserInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::UserPasswordChangeTicket>* AsyncCreatePasswordChangeTicketRaw(::grpc::ClientContext* context, const ::gooseai::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::UserPasswordChangeTicket>* PrepareAsyncCreatePasswordChangeTicketRaw(::grpc::ClientContext* context, const ::gooseai::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::User>* AsyncDeleteAccountRaw(::grpc::ClientContext* context, const ::gooseai::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::User>* PrepareAsyncDeleteAccountRaw(::grpc::ClientContext* context, const ::gooseai::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::Charge>* AsyncCreateChargeRaw(::grpc::ClientContext* context, const ::gooseai::CreateChargeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::Charge>* PrepareAsyncCreateChargeRaw(::grpc::ClientContext* context, const ::gooseai::CreateChargeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::Charges>* AsyncGetChargesRaw(::grpc::ClientContext* context, const ::gooseai::GetChargesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::Charges>* PrepareAsyncGetChargesRaw(::grpc::ClientContext* context, const ::gooseai::GetChargesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::AutoChargeIntent>* AsyncCreateAutoChargeIntentRaw(::grpc::ClientContext* context, const ::gooseai::CreateAutoChargeIntentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::AutoChargeIntent>* PrepareAsyncCreateAutoChargeIntentRaw(::grpc::ClientContext* context, const ::gooseai::CreateAutoChargeIntentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::AutoChargeIntent>* AsyncUpdateAutoChargeIntentRaw(::grpc::ClientContext* context, const ::gooseai::CreateAutoChargeIntentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::AutoChargeIntent>* PrepareAsyncUpdateAutoChargeIntentRaw(::grpc::ClientContext* context, const ::gooseai::CreateAutoChargeIntentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::AutoChargeIntent>* AsyncGetAutoChargeIntentRaw(::grpc::ClientContext* context, const ::gooseai::GetAutoChargeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::AutoChargeIntent>* PrepareAsyncGetAutoChargeIntentRaw(::grpc::ClientContext* context, const ::gooseai::GetAutoChargeRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetMe(::grpc::ClientContext* context, const ::gooseai::EmptyRequest& request, ::gooseai::User* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::User>> AsyncGetMe(::grpc::ClientContext* context, const ::gooseai::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::User>>(AsyncGetMeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::User>> PrepareAsyncGetMe(::grpc::ClientContext* context, const ::gooseai::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::User>>(PrepareAsyncGetMeRaw(context, request, cq));
    }
    ::grpc::Status GetOrganization(::grpc::ClientContext* context, const ::gooseai::GetOrganizationRequest& request, ::gooseai::Organization* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::Organization>> AsyncGetOrganization(::grpc::ClientContext* context, const ::gooseai::GetOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::Organization>>(AsyncGetOrganizationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::Organization>> PrepareAsyncGetOrganization(::grpc::ClientContext* context, const ::gooseai::GetOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::Organization>>(PrepareAsyncGetOrganizationRaw(context, request, cq));
    }
    ::grpc::Status GetMetrics(::grpc::ClientContext* context, const ::gooseai::GetMetricsRequest& request, ::gooseai::Metrics* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::Metrics>> AsyncGetMetrics(::grpc::ClientContext* context, const ::gooseai::GetMetricsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::Metrics>>(AsyncGetMetricsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::Metrics>> PrepareAsyncGetMetrics(::grpc::ClientContext* context, const ::gooseai::GetMetricsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::Metrics>>(PrepareAsyncGetMetricsRaw(context, request, cq));
    }
    ::grpc::Status CreateAPIKey(::grpc::ClientContext* context, const ::gooseai::APIKeyRequest& request, ::gooseai::APIKey* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::APIKey>> AsyncCreateAPIKey(::grpc::ClientContext* context, const ::gooseai::APIKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::APIKey>>(AsyncCreateAPIKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::APIKey>> PrepareAsyncCreateAPIKey(::grpc::ClientContext* context, const ::gooseai::APIKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::APIKey>>(PrepareAsyncCreateAPIKeyRaw(context, request, cq));
    }
    ::grpc::Status DeleteAPIKey(::grpc::ClientContext* context, const ::gooseai::APIKeyFindRequest& request, ::gooseai::APIKey* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::APIKey>> AsyncDeleteAPIKey(::grpc::ClientContext* context, const ::gooseai::APIKeyFindRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::APIKey>>(AsyncDeleteAPIKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::APIKey>> PrepareAsyncDeleteAPIKey(::grpc::ClientContext* context, const ::gooseai::APIKeyFindRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::APIKey>>(PrepareAsyncDeleteAPIKeyRaw(context, request, cq));
    }
    ::grpc::Status UpdateDefaultOrganization(::grpc::ClientContext* context, const ::gooseai::UpdateDefaultOrganizationRequest& request, ::gooseai::User* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::User>> AsyncUpdateDefaultOrganization(::grpc::ClientContext* context, const ::gooseai::UpdateDefaultOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::User>>(AsyncUpdateDefaultOrganizationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::User>> PrepareAsyncUpdateDefaultOrganization(::grpc::ClientContext* context, const ::gooseai::UpdateDefaultOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::User>>(PrepareAsyncUpdateDefaultOrganizationRaw(context, request, cq));
    }
    ::grpc::Status GetClientSettings(::grpc::ClientContext* context, const ::gooseai::EmptyRequest& request, ::gooseai::ClientSettings* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::ClientSettings>> AsyncGetClientSettings(::grpc::ClientContext* context, const ::gooseai::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::ClientSettings>>(AsyncGetClientSettingsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::ClientSettings>> PrepareAsyncGetClientSettings(::grpc::ClientContext* context, const ::gooseai::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::ClientSettings>>(PrepareAsyncGetClientSettingsRaw(context, request, cq));
    }
    ::grpc::Status SetClientSettings(::grpc::ClientContext* context, const ::gooseai::ClientSettings& request, ::gooseai::ClientSettings* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::ClientSettings>> AsyncSetClientSettings(::grpc::ClientContext* context, const ::gooseai::ClientSettings& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::ClientSettings>>(AsyncSetClientSettingsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::ClientSettings>> PrepareAsyncSetClientSettings(::grpc::ClientContext* context, const ::gooseai::ClientSettings& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::ClientSettings>>(PrepareAsyncSetClientSettingsRaw(context, request, cq));
    }
    ::grpc::Status UpdateUserInfo(::grpc::ClientContext* context, const ::gooseai::UpdateUserInfoRequest& request, ::gooseai::User* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::User>> AsyncUpdateUserInfo(::grpc::ClientContext* context, const ::gooseai::UpdateUserInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::User>>(AsyncUpdateUserInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::User>> PrepareAsyncUpdateUserInfo(::grpc::ClientContext* context, const ::gooseai::UpdateUserInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::User>>(PrepareAsyncUpdateUserInfoRaw(context, request, cq));
    }
    ::grpc::Status CreatePasswordChangeTicket(::grpc::ClientContext* context, const ::gooseai::EmptyRequest& request, ::gooseai::UserPasswordChangeTicket* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::UserPasswordChangeTicket>> AsyncCreatePasswordChangeTicket(::grpc::ClientContext* context, const ::gooseai::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::UserPasswordChangeTicket>>(AsyncCreatePasswordChangeTicketRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::UserPasswordChangeTicket>> PrepareAsyncCreatePasswordChangeTicket(::grpc::ClientContext* context, const ::gooseai::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::UserPasswordChangeTicket>>(PrepareAsyncCreatePasswordChangeTicketRaw(context, request, cq));
    }
    ::grpc::Status DeleteAccount(::grpc::ClientContext* context, const ::gooseai::EmptyRequest& request, ::gooseai::User* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::User>> AsyncDeleteAccount(::grpc::ClientContext* context, const ::gooseai::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::User>>(AsyncDeleteAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::User>> PrepareAsyncDeleteAccount(::grpc::ClientContext* context, const ::gooseai::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::User>>(PrepareAsyncDeleteAccountRaw(context, request, cq));
    }
    ::grpc::Status CreateCharge(::grpc::ClientContext* context, const ::gooseai::CreateChargeRequest& request, ::gooseai::Charge* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::Charge>> AsyncCreateCharge(::grpc::ClientContext* context, const ::gooseai::CreateChargeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::Charge>>(AsyncCreateChargeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::Charge>> PrepareAsyncCreateCharge(::grpc::ClientContext* context, const ::gooseai::CreateChargeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::Charge>>(PrepareAsyncCreateChargeRaw(context, request, cq));
    }
    ::grpc::Status GetCharges(::grpc::ClientContext* context, const ::gooseai::GetChargesRequest& request, ::gooseai::Charges* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::Charges>> AsyncGetCharges(::grpc::ClientContext* context, const ::gooseai::GetChargesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::Charges>>(AsyncGetChargesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::Charges>> PrepareAsyncGetCharges(::grpc::ClientContext* context, const ::gooseai::GetChargesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::Charges>>(PrepareAsyncGetChargesRaw(context, request, cq));
    }
    ::grpc::Status CreateAutoChargeIntent(::grpc::ClientContext* context, const ::gooseai::CreateAutoChargeIntentRequest& request, ::gooseai::AutoChargeIntent* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::AutoChargeIntent>> AsyncCreateAutoChargeIntent(::grpc::ClientContext* context, const ::gooseai::CreateAutoChargeIntentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::AutoChargeIntent>>(AsyncCreateAutoChargeIntentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::AutoChargeIntent>> PrepareAsyncCreateAutoChargeIntent(::grpc::ClientContext* context, const ::gooseai::CreateAutoChargeIntentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::AutoChargeIntent>>(PrepareAsyncCreateAutoChargeIntentRaw(context, request, cq));
    }
    ::grpc::Status UpdateAutoChargeIntent(::grpc::ClientContext* context, const ::gooseai::CreateAutoChargeIntentRequest& request, ::gooseai::AutoChargeIntent* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::AutoChargeIntent>> AsyncUpdateAutoChargeIntent(::grpc::ClientContext* context, const ::gooseai::CreateAutoChargeIntentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::AutoChargeIntent>>(AsyncUpdateAutoChargeIntentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::AutoChargeIntent>> PrepareAsyncUpdateAutoChargeIntent(::grpc::ClientContext* context, const ::gooseai::CreateAutoChargeIntentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::AutoChargeIntent>>(PrepareAsyncUpdateAutoChargeIntentRaw(context, request, cq));
    }
    ::grpc::Status GetAutoChargeIntent(::grpc::ClientContext* context, const ::gooseai::GetAutoChargeRequest& request, ::gooseai::AutoChargeIntent* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::AutoChargeIntent>> AsyncGetAutoChargeIntent(::grpc::ClientContext* context, const ::gooseai::GetAutoChargeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::AutoChargeIntent>>(AsyncGetAutoChargeIntentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::AutoChargeIntent>> PrepareAsyncGetAutoChargeIntent(::grpc::ClientContext* context, const ::gooseai::GetAutoChargeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::AutoChargeIntent>>(PrepareAsyncGetAutoChargeIntentRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetMe(::grpc::ClientContext* context, const ::gooseai::EmptyRequest* request, ::gooseai::User* response, std::function<void(::grpc::Status)>) override;
      void GetMe(::grpc::ClientContext* context, const ::gooseai::EmptyRequest* request, ::gooseai::User* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetOrganization(::grpc::ClientContext* context, const ::gooseai::GetOrganizationRequest* request, ::gooseai::Organization* response, std::function<void(::grpc::Status)>) override;
      void GetOrganization(::grpc::ClientContext* context, const ::gooseai::GetOrganizationRequest* request, ::gooseai::Organization* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetMetrics(::grpc::ClientContext* context, const ::gooseai::GetMetricsRequest* request, ::gooseai::Metrics* response, std::function<void(::grpc::Status)>) override;
      void GetMetrics(::grpc::ClientContext* context, const ::gooseai::GetMetricsRequest* request, ::gooseai::Metrics* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateAPIKey(::grpc::ClientContext* context, const ::gooseai::APIKeyRequest* request, ::gooseai::APIKey* response, std::function<void(::grpc::Status)>) override;
      void CreateAPIKey(::grpc::ClientContext* context, const ::gooseai::APIKeyRequest* request, ::gooseai::APIKey* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteAPIKey(::grpc::ClientContext* context, const ::gooseai::APIKeyFindRequest* request, ::gooseai::APIKey* response, std::function<void(::grpc::Status)>) override;
      void DeleteAPIKey(::grpc::ClientContext* context, const ::gooseai::APIKeyFindRequest* request, ::gooseai::APIKey* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateDefaultOrganization(::grpc::ClientContext* context, const ::gooseai::UpdateDefaultOrganizationRequest* request, ::gooseai::User* response, std::function<void(::grpc::Status)>) override;
      void UpdateDefaultOrganization(::grpc::ClientContext* context, const ::gooseai::UpdateDefaultOrganizationRequest* request, ::gooseai::User* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetClientSettings(::grpc::ClientContext* context, const ::gooseai::EmptyRequest* request, ::gooseai::ClientSettings* response, std::function<void(::grpc::Status)>) override;
      void GetClientSettings(::grpc::ClientContext* context, const ::gooseai::EmptyRequest* request, ::gooseai::ClientSettings* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetClientSettings(::grpc::ClientContext* context, const ::gooseai::ClientSettings* request, ::gooseai::ClientSettings* response, std::function<void(::grpc::Status)>) override;
      void SetClientSettings(::grpc::ClientContext* context, const ::gooseai::ClientSettings* request, ::gooseai::ClientSettings* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateUserInfo(::grpc::ClientContext* context, const ::gooseai::UpdateUserInfoRequest* request, ::gooseai::User* response, std::function<void(::grpc::Status)>) override;
      void UpdateUserInfo(::grpc::ClientContext* context, const ::gooseai::UpdateUserInfoRequest* request, ::gooseai::User* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreatePasswordChangeTicket(::grpc::ClientContext* context, const ::gooseai::EmptyRequest* request, ::gooseai::UserPasswordChangeTicket* response, std::function<void(::grpc::Status)>) override;
      void CreatePasswordChangeTicket(::grpc::ClientContext* context, const ::gooseai::EmptyRequest* request, ::gooseai::UserPasswordChangeTicket* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteAccount(::grpc::ClientContext* context, const ::gooseai::EmptyRequest* request, ::gooseai::User* response, std::function<void(::grpc::Status)>) override;
      void DeleteAccount(::grpc::ClientContext* context, const ::gooseai::EmptyRequest* request, ::gooseai::User* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateCharge(::grpc::ClientContext* context, const ::gooseai::CreateChargeRequest* request, ::gooseai::Charge* response, std::function<void(::grpc::Status)>) override;
      void CreateCharge(::grpc::ClientContext* context, const ::gooseai::CreateChargeRequest* request, ::gooseai::Charge* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetCharges(::grpc::ClientContext* context, const ::gooseai::GetChargesRequest* request, ::gooseai::Charges* response, std::function<void(::grpc::Status)>) override;
      void GetCharges(::grpc::ClientContext* context, const ::gooseai::GetChargesRequest* request, ::gooseai::Charges* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateAutoChargeIntent(::grpc::ClientContext* context, const ::gooseai::CreateAutoChargeIntentRequest* request, ::gooseai::AutoChargeIntent* response, std::function<void(::grpc::Status)>) override;
      void CreateAutoChargeIntent(::grpc::ClientContext* context, const ::gooseai::CreateAutoChargeIntentRequest* request, ::gooseai::AutoChargeIntent* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateAutoChargeIntent(::grpc::ClientContext* context, const ::gooseai::CreateAutoChargeIntentRequest* request, ::gooseai::AutoChargeIntent* response, std::function<void(::grpc::Status)>) override;
      void UpdateAutoChargeIntent(::grpc::ClientContext* context, const ::gooseai::CreateAutoChargeIntentRequest* request, ::gooseai::AutoChargeIntent* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetAutoChargeIntent(::grpc::ClientContext* context, const ::gooseai::GetAutoChargeRequest* request, ::gooseai::AutoChargeIntent* response, std::function<void(::grpc::Status)>) override;
      void GetAutoChargeIntent(::grpc::ClientContext* context, const ::gooseai::GetAutoChargeRequest* request, ::gooseai::AutoChargeIntent* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::gooseai::User>* AsyncGetMeRaw(::grpc::ClientContext* context, const ::gooseai::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gooseai::User>* PrepareAsyncGetMeRaw(::grpc::ClientContext* context, const ::gooseai::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gooseai::Organization>* AsyncGetOrganizationRaw(::grpc::ClientContext* context, const ::gooseai::GetOrganizationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gooseai::Organization>* PrepareAsyncGetOrganizationRaw(::grpc::ClientContext* context, const ::gooseai::GetOrganizationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gooseai::Metrics>* AsyncGetMetricsRaw(::grpc::ClientContext* context, const ::gooseai::GetMetricsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gooseai::Metrics>* PrepareAsyncGetMetricsRaw(::grpc::ClientContext* context, const ::gooseai::GetMetricsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gooseai::APIKey>* AsyncCreateAPIKeyRaw(::grpc::ClientContext* context, const ::gooseai::APIKeyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gooseai::APIKey>* PrepareAsyncCreateAPIKeyRaw(::grpc::ClientContext* context, const ::gooseai::APIKeyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gooseai::APIKey>* AsyncDeleteAPIKeyRaw(::grpc::ClientContext* context, const ::gooseai::APIKeyFindRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gooseai::APIKey>* PrepareAsyncDeleteAPIKeyRaw(::grpc::ClientContext* context, const ::gooseai::APIKeyFindRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gooseai::User>* AsyncUpdateDefaultOrganizationRaw(::grpc::ClientContext* context, const ::gooseai::UpdateDefaultOrganizationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gooseai::User>* PrepareAsyncUpdateDefaultOrganizationRaw(::grpc::ClientContext* context, const ::gooseai::UpdateDefaultOrganizationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gooseai::ClientSettings>* AsyncGetClientSettingsRaw(::grpc::ClientContext* context, const ::gooseai::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gooseai::ClientSettings>* PrepareAsyncGetClientSettingsRaw(::grpc::ClientContext* context, const ::gooseai::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gooseai::ClientSettings>* AsyncSetClientSettingsRaw(::grpc::ClientContext* context, const ::gooseai::ClientSettings& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gooseai::ClientSettings>* PrepareAsyncSetClientSettingsRaw(::grpc::ClientContext* context, const ::gooseai::ClientSettings& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gooseai::User>* AsyncUpdateUserInfoRaw(::grpc::ClientContext* context, const ::gooseai::UpdateUserInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gooseai::User>* PrepareAsyncUpdateUserInfoRaw(::grpc::ClientContext* context, const ::gooseai::UpdateUserInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gooseai::UserPasswordChangeTicket>* AsyncCreatePasswordChangeTicketRaw(::grpc::ClientContext* context, const ::gooseai::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gooseai::UserPasswordChangeTicket>* PrepareAsyncCreatePasswordChangeTicketRaw(::grpc::ClientContext* context, const ::gooseai::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gooseai::User>* AsyncDeleteAccountRaw(::grpc::ClientContext* context, const ::gooseai::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gooseai::User>* PrepareAsyncDeleteAccountRaw(::grpc::ClientContext* context, const ::gooseai::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gooseai::Charge>* AsyncCreateChargeRaw(::grpc::ClientContext* context, const ::gooseai::CreateChargeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gooseai::Charge>* PrepareAsyncCreateChargeRaw(::grpc::ClientContext* context, const ::gooseai::CreateChargeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gooseai::Charges>* AsyncGetChargesRaw(::grpc::ClientContext* context, const ::gooseai::GetChargesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gooseai::Charges>* PrepareAsyncGetChargesRaw(::grpc::ClientContext* context, const ::gooseai::GetChargesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gooseai::AutoChargeIntent>* AsyncCreateAutoChargeIntentRaw(::grpc::ClientContext* context, const ::gooseai::CreateAutoChargeIntentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gooseai::AutoChargeIntent>* PrepareAsyncCreateAutoChargeIntentRaw(::grpc::ClientContext* context, const ::gooseai::CreateAutoChargeIntentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gooseai::AutoChargeIntent>* AsyncUpdateAutoChargeIntentRaw(::grpc::ClientContext* context, const ::gooseai::CreateAutoChargeIntentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gooseai::AutoChargeIntent>* PrepareAsyncUpdateAutoChargeIntentRaw(::grpc::ClientContext* context, const ::gooseai::CreateAutoChargeIntentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gooseai::AutoChargeIntent>* AsyncGetAutoChargeIntentRaw(::grpc::ClientContext* context, const ::gooseai::GetAutoChargeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gooseai::AutoChargeIntent>* PrepareAsyncGetAutoChargeIntentRaw(::grpc::ClientContext* context, const ::gooseai::GetAutoChargeRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetMe_;
    const ::grpc::internal::RpcMethod rpcmethod_GetOrganization_;
    const ::grpc::internal::RpcMethod rpcmethod_GetMetrics_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateAPIKey_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteAPIKey_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateDefaultOrganization_;
    const ::grpc::internal::RpcMethod rpcmethod_GetClientSettings_;
    const ::grpc::internal::RpcMethod rpcmethod_SetClientSettings_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateUserInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_CreatePasswordChangeTicket_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteAccount_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateCharge_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCharges_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateAutoChargeIntent_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateAutoChargeIntent_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAutoChargeIntent_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Get info
    virtual ::grpc::Status GetMe(::grpc::ServerContext* context, const ::gooseai::EmptyRequest* request, ::gooseai::User* response);
    virtual ::grpc::Status GetOrganization(::grpc::ServerContext* context, const ::gooseai::GetOrganizationRequest* request, ::gooseai::Organization* response);
    virtual ::grpc::Status GetMetrics(::grpc::ServerContext* context, const ::gooseai::GetMetricsRequest* request, ::gooseai::Metrics* response);
    // API key management
    virtual ::grpc::Status CreateAPIKey(::grpc::ServerContext* context, const ::gooseai::APIKeyRequest* request, ::gooseai::APIKey* response);
    virtual ::grpc::Status DeleteAPIKey(::grpc::ServerContext* context, const ::gooseai::APIKeyFindRequest* request, ::gooseai::APIKey* response);
    // User settings
    virtual ::grpc::Status UpdateDefaultOrganization(::grpc::ServerContext* context, const ::gooseai::UpdateDefaultOrganizationRequest* request, ::gooseai::User* response);
    virtual ::grpc::Status GetClientSettings(::grpc::ServerContext* context, const ::gooseai::EmptyRequest* request, ::gooseai::ClientSettings* response);
    virtual ::grpc::Status SetClientSettings(::grpc::ServerContext* context, const ::gooseai::ClientSettings* request, ::gooseai::ClientSettings* response);
    virtual ::grpc::Status UpdateUserInfo(::grpc::ServerContext* context, const ::gooseai::UpdateUserInfoRequest* request, ::gooseai::User* response);
    virtual ::grpc::Status CreatePasswordChangeTicket(::grpc::ServerContext* context, const ::gooseai::EmptyRequest* request, ::gooseai::UserPasswordChangeTicket* response);
    virtual ::grpc::Status DeleteAccount(::grpc::ServerContext* context, const ::gooseai::EmptyRequest* request, ::gooseai::User* response);
    // Payment functions
    virtual ::grpc::Status CreateCharge(::grpc::ServerContext* context, const ::gooseai::CreateChargeRequest* request, ::gooseai::Charge* response);
    virtual ::grpc::Status GetCharges(::grpc::ServerContext* context, const ::gooseai::GetChargesRequest* request, ::gooseai::Charges* response);
    virtual ::grpc::Status CreateAutoChargeIntent(::grpc::ServerContext* context, const ::gooseai::CreateAutoChargeIntentRequest* request, ::gooseai::AutoChargeIntent* response);
    virtual ::grpc::Status UpdateAutoChargeIntent(::grpc::ServerContext* context, const ::gooseai::CreateAutoChargeIntentRequest* request, ::gooseai::AutoChargeIntent* response);
    virtual ::grpc::Status GetAutoChargeIntent(::grpc::ServerContext* context, const ::gooseai::GetAutoChargeRequest* request, ::gooseai::AutoChargeIntent* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetMe() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetMe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMe(::grpc::ServerContext* /*context*/, const ::gooseai::EmptyRequest* /*request*/, ::gooseai::User* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMe(::grpc::ServerContext* context, ::gooseai::EmptyRequest* request, ::grpc::ServerAsyncResponseWriter< ::gooseai::User>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetOrganization() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOrganization(::grpc::ServerContext* /*context*/, const ::gooseai::GetOrganizationRequest* /*request*/, ::gooseai::Organization* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOrganization(::grpc::ServerContext* context, ::gooseai::GetOrganizationRequest* request, ::grpc::ServerAsyncResponseWriter< ::gooseai::Organization>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetMetrics() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMetrics(::grpc::ServerContext* /*context*/, const ::gooseai::GetMetricsRequest* /*request*/, ::gooseai::Metrics* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMetrics(::grpc::ServerContext* context, ::gooseai::GetMetricsRequest* request, ::grpc::ServerAsyncResponseWriter< ::gooseai::Metrics>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateAPIKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateAPIKey() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_CreateAPIKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAPIKey(::grpc::ServerContext* /*context*/, const ::gooseai::APIKeyRequest* /*request*/, ::gooseai::APIKey* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateAPIKey(::grpc::ServerContext* context, ::gooseai::APIKeyRequest* request, ::grpc::ServerAsyncResponseWriter< ::gooseai::APIKey>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteAPIKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteAPIKey() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_DeleteAPIKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAPIKey(::grpc::ServerContext* /*context*/, const ::gooseai::APIKeyFindRequest* /*request*/, ::gooseai::APIKey* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteAPIKey(::grpc::ServerContext* context, ::gooseai::APIKeyFindRequest* request, ::grpc::ServerAsyncResponseWriter< ::gooseai::APIKey>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateDefaultOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateDefaultOrganization() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_UpdateDefaultOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDefaultOrganization(::grpc::ServerContext* /*context*/, const ::gooseai::UpdateDefaultOrganizationRequest* /*request*/, ::gooseai::User* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateDefaultOrganization(::grpc::ServerContext* context, ::gooseai::UpdateDefaultOrganizationRequest* request, ::grpc::ServerAsyncResponseWriter< ::gooseai::User>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetClientSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetClientSettings() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetClientSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetClientSettings(::grpc::ServerContext* /*context*/, const ::gooseai::EmptyRequest* /*request*/, ::gooseai::ClientSettings* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetClientSettings(::grpc::ServerContext* context, ::gooseai::EmptyRequest* request, ::grpc::ServerAsyncResponseWriter< ::gooseai::ClientSettings>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetClientSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetClientSettings() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_SetClientSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetClientSettings(::grpc::ServerContext* /*context*/, const ::gooseai::ClientSettings* /*request*/, ::gooseai::ClientSettings* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetClientSettings(::grpc::ServerContext* context, ::gooseai::ClientSettings* request, ::grpc::ServerAsyncResponseWriter< ::gooseai::ClientSettings>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateUserInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateUserInfo() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_UpdateUserInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUserInfo(::grpc::ServerContext* /*context*/, const ::gooseai::UpdateUserInfoRequest* /*request*/, ::gooseai::User* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateUserInfo(::grpc::ServerContext* context, ::gooseai::UpdateUserInfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::gooseai::User>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreatePasswordChangeTicket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreatePasswordChangeTicket() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_CreatePasswordChangeTicket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePasswordChangeTicket(::grpc::ServerContext* /*context*/, const ::gooseai::EmptyRequest* /*request*/, ::gooseai::UserPasswordChangeTicket* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreatePasswordChangeTicket(::grpc::ServerContext* context, ::gooseai::EmptyRequest* request, ::grpc::ServerAsyncResponseWriter< ::gooseai::UserPasswordChangeTicket>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteAccount() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_DeleteAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAccount(::grpc::ServerContext* /*context*/, const ::gooseai::EmptyRequest* /*request*/, ::gooseai::User* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteAccount(::grpc::ServerContext* context, ::gooseai::EmptyRequest* request, ::grpc::ServerAsyncResponseWriter< ::gooseai::User>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateCharge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateCharge() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_CreateCharge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCharge(::grpc::ServerContext* /*context*/, const ::gooseai::CreateChargeRequest* /*request*/, ::gooseai::Charge* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateCharge(::grpc::ServerContext* context, ::gooseai::CreateChargeRequest* request, ::grpc::ServerAsyncResponseWriter< ::gooseai::Charge>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCharges : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCharges() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_GetCharges() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCharges(::grpc::ServerContext* /*context*/, const ::gooseai::GetChargesRequest* /*request*/, ::gooseai::Charges* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCharges(::grpc::ServerContext* context, ::gooseai::GetChargesRequest* request, ::grpc::ServerAsyncResponseWriter< ::gooseai::Charges>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateAutoChargeIntent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateAutoChargeIntent() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_CreateAutoChargeIntent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAutoChargeIntent(::grpc::ServerContext* /*context*/, const ::gooseai::CreateAutoChargeIntentRequest* /*request*/, ::gooseai::AutoChargeIntent* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateAutoChargeIntent(::grpc::ServerContext* context, ::gooseai::CreateAutoChargeIntentRequest* request, ::grpc::ServerAsyncResponseWriter< ::gooseai::AutoChargeIntent>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateAutoChargeIntent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateAutoChargeIntent() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_UpdateAutoChargeIntent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateAutoChargeIntent(::grpc::ServerContext* /*context*/, const ::gooseai::CreateAutoChargeIntentRequest* /*request*/, ::gooseai::AutoChargeIntent* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateAutoChargeIntent(::grpc::ServerContext* context, ::gooseai::CreateAutoChargeIntentRequest* request, ::grpc::ServerAsyncResponseWriter< ::gooseai::AutoChargeIntent>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAutoChargeIntent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAutoChargeIntent() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_GetAutoChargeIntent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAutoChargeIntent(::grpc::ServerContext* /*context*/, const ::gooseai::GetAutoChargeRequest* /*request*/, ::gooseai::AutoChargeIntent* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAutoChargeIntent(::grpc::ServerContext* context, ::gooseai::GetAutoChargeRequest* request, ::grpc::ServerAsyncResponseWriter< ::gooseai::AutoChargeIntent>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetMe<WithAsyncMethod_GetOrganization<WithAsyncMethod_GetMetrics<WithAsyncMethod_CreateAPIKey<WithAsyncMethod_DeleteAPIKey<WithAsyncMethod_UpdateDefaultOrganization<WithAsyncMethod_GetClientSettings<WithAsyncMethod_SetClientSettings<WithAsyncMethod_UpdateUserInfo<WithAsyncMethod_CreatePasswordChangeTicket<WithAsyncMethod_DeleteAccount<WithAsyncMethod_CreateCharge<WithAsyncMethod_GetCharges<WithAsyncMethod_CreateAutoChargeIntent<WithAsyncMethod_UpdateAutoChargeIntent<WithAsyncMethod_GetAutoChargeIntent<Service > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetMe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetMe() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::gooseai::EmptyRequest, ::gooseai::User>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::gooseai::EmptyRequest* request, ::gooseai::User* response) { return this->GetMe(context, request, response); }));}
    void SetMessageAllocatorFor_GetMe(
        ::grpc::MessageAllocator< ::gooseai::EmptyRequest, ::gooseai::User>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gooseai::EmptyRequest, ::gooseai::User>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetMe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMe(::grpc::ServerContext* /*context*/, const ::gooseai::EmptyRequest* /*request*/, ::gooseai::User* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMe(
      ::grpc::CallbackServerContext* /*context*/, const ::gooseai::EmptyRequest* /*request*/, ::gooseai::User* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetOrganization() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::gooseai::GetOrganizationRequest, ::gooseai::Organization>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::gooseai::GetOrganizationRequest* request, ::gooseai::Organization* response) { return this->GetOrganization(context, request, response); }));}
    void SetMessageAllocatorFor_GetOrganization(
        ::grpc::MessageAllocator< ::gooseai::GetOrganizationRequest, ::gooseai::Organization>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gooseai::GetOrganizationRequest, ::gooseai::Organization>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOrganization(::grpc::ServerContext* /*context*/, const ::gooseai::GetOrganizationRequest* /*request*/, ::gooseai::Organization* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetOrganization(
      ::grpc::CallbackServerContext* /*context*/, const ::gooseai::GetOrganizationRequest* /*request*/, ::gooseai::Organization* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetMetrics() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::gooseai::GetMetricsRequest, ::gooseai::Metrics>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::gooseai::GetMetricsRequest* request, ::gooseai::Metrics* response) { return this->GetMetrics(context, request, response); }));}
    void SetMessageAllocatorFor_GetMetrics(
        ::grpc::MessageAllocator< ::gooseai::GetMetricsRequest, ::gooseai::Metrics>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gooseai::GetMetricsRequest, ::gooseai::Metrics>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMetrics(::grpc::ServerContext* /*context*/, const ::gooseai::GetMetricsRequest* /*request*/, ::gooseai::Metrics* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMetrics(
      ::grpc::CallbackServerContext* /*context*/, const ::gooseai::GetMetricsRequest* /*request*/, ::gooseai::Metrics* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateAPIKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateAPIKey() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::gooseai::APIKeyRequest, ::gooseai::APIKey>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::gooseai::APIKeyRequest* request, ::gooseai::APIKey* response) { return this->CreateAPIKey(context, request, response); }));}
    void SetMessageAllocatorFor_CreateAPIKey(
        ::grpc::MessageAllocator< ::gooseai::APIKeyRequest, ::gooseai::APIKey>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gooseai::APIKeyRequest, ::gooseai::APIKey>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateAPIKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAPIKey(::grpc::ServerContext* /*context*/, const ::gooseai::APIKeyRequest* /*request*/, ::gooseai::APIKey* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateAPIKey(
      ::grpc::CallbackServerContext* /*context*/, const ::gooseai::APIKeyRequest* /*request*/, ::gooseai::APIKey* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteAPIKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteAPIKey() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::gooseai::APIKeyFindRequest, ::gooseai::APIKey>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::gooseai::APIKeyFindRequest* request, ::gooseai::APIKey* response) { return this->DeleteAPIKey(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteAPIKey(
        ::grpc::MessageAllocator< ::gooseai::APIKeyFindRequest, ::gooseai::APIKey>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gooseai::APIKeyFindRequest, ::gooseai::APIKey>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteAPIKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAPIKey(::grpc::ServerContext* /*context*/, const ::gooseai::APIKeyFindRequest* /*request*/, ::gooseai::APIKey* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteAPIKey(
      ::grpc::CallbackServerContext* /*context*/, const ::gooseai::APIKeyFindRequest* /*request*/, ::gooseai::APIKey* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateDefaultOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateDefaultOrganization() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::gooseai::UpdateDefaultOrganizationRequest, ::gooseai::User>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::gooseai::UpdateDefaultOrganizationRequest* request, ::gooseai::User* response) { return this->UpdateDefaultOrganization(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateDefaultOrganization(
        ::grpc::MessageAllocator< ::gooseai::UpdateDefaultOrganizationRequest, ::gooseai::User>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gooseai::UpdateDefaultOrganizationRequest, ::gooseai::User>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateDefaultOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDefaultOrganization(::grpc::ServerContext* /*context*/, const ::gooseai::UpdateDefaultOrganizationRequest* /*request*/, ::gooseai::User* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateDefaultOrganization(
      ::grpc::CallbackServerContext* /*context*/, const ::gooseai::UpdateDefaultOrganizationRequest* /*request*/, ::gooseai::User* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetClientSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetClientSettings() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::gooseai::EmptyRequest, ::gooseai::ClientSettings>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::gooseai::EmptyRequest* request, ::gooseai::ClientSettings* response) { return this->GetClientSettings(context, request, response); }));}
    void SetMessageAllocatorFor_GetClientSettings(
        ::grpc::MessageAllocator< ::gooseai::EmptyRequest, ::gooseai::ClientSettings>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gooseai::EmptyRequest, ::gooseai::ClientSettings>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetClientSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetClientSettings(::grpc::ServerContext* /*context*/, const ::gooseai::EmptyRequest* /*request*/, ::gooseai::ClientSettings* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetClientSettings(
      ::grpc::CallbackServerContext* /*context*/, const ::gooseai::EmptyRequest* /*request*/, ::gooseai::ClientSettings* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetClientSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetClientSettings() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::gooseai::ClientSettings, ::gooseai::ClientSettings>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::gooseai::ClientSettings* request, ::gooseai::ClientSettings* response) { return this->SetClientSettings(context, request, response); }));}
    void SetMessageAllocatorFor_SetClientSettings(
        ::grpc::MessageAllocator< ::gooseai::ClientSettings, ::gooseai::ClientSettings>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gooseai::ClientSettings, ::gooseai::ClientSettings>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetClientSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetClientSettings(::grpc::ServerContext* /*context*/, const ::gooseai::ClientSettings* /*request*/, ::gooseai::ClientSettings* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetClientSettings(
      ::grpc::CallbackServerContext* /*context*/, const ::gooseai::ClientSettings* /*request*/, ::gooseai::ClientSettings* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateUserInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateUserInfo() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::gooseai::UpdateUserInfoRequest, ::gooseai::User>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::gooseai::UpdateUserInfoRequest* request, ::gooseai::User* response) { return this->UpdateUserInfo(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateUserInfo(
        ::grpc::MessageAllocator< ::gooseai::UpdateUserInfoRequest, ::gooseai::User>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gooseai::UpdateUserInfoRequest, ::gooseai::User>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateUserInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUserInfo(::grpc::ServerContext* /*context*/, const ::gooseai::UpdateUserInfoRequest* /*request*/, ::gooseai::User* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateUserInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::gooseai::UpdateUserInfoRequest* /*request*/, ::gooseai::User* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreatePasswordChangeTicket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreatePasswordChangeTicket() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::gooseai::EmptyRequest, ::gooseai::UserPasswordChangeTicket>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::gooseai::EmptyRequest* request, ::gooseai::UserPasswordChangeTicket* response) { return this->CreatePasswordChangeTicket(context, request, response); }));}
    void SetMessageAllocatorFor_CreatePasswordChangeTicket(
        ::grpc::MessageAllocator< ::gooseai::EmptyRequest, ::gooseai::UserPasswordChangeTicket>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gooseai::EmptyRequest, ::gooseai::UserPasswordChangeTicket>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreatePasswordChangeTicket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePasswordChangeTicket(::grpc::ServerContext* /*context*/, const ::gooseai::EmptyRequest* /*request*/, ::gooseai::UserPasswordChangeTicket* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreatePasswordChangeTicket(
      ::grpc::CallbackServerContext* /*context*/, const ::gooseai::EmptyRequest* /*request*/, ::gooseai::UserPasswordChangeTicket* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteAccount() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::gooseai::EmptyRequest, ::gooseai::User>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::gooseai::EmptyRequest* request, ::gooseai::User* response) { return this->DeleteAccount(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteAccount(
        ::grpc::MessageAllocator< ::gooseai::EmptyRequest, ::gooseai::User>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gooseai::EmptyRequest, ::gooseai::User>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAccount(::grpc::ServerContext* /*context*/, const ::gooseai::EmptyRequest* /*request*/, ::gooseai::User* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteAccount(
      ::grpc::CallbackServerContext* /*context*/, const ::gooseai::EmptyRequest* /*request*/, ::gooseai::User* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateCharge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateCharge() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::gooseai::CreateChargeRequest, ::gooseai::Charge>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::gooseai::CreateChargeRequest* request, ::gooseai::Charge* response) { return this->CreateCharge(context, request, response); }));}
    void SetMessageAllocatorFor_CreateCharge(
        ::grpc::MessageAllocator< ::gooseai::CreateChargeRequest, ::gooseai::Charge>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gooseai::CreateChargeRequest, ::gooseai::Charge>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateCharge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCharge(::grpc::ServerContext* /*context*/, const ::gooseai::CreateChargeRequest* /*request*/, ::gooseai::Charge* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateCharge(
      ::grpc::CallbackServerContext* /*context*/, const ::gooseai::CreateChargeRequest* /*request*/, ::gooseai::Charge* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetCharges : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetCharges() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::gooseai::GetChargesRequest, ::gooseai::Charges>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::gooseai::GetChargesRequest* request, ::gooseai::Charges* response) { return this->GetCharges(context, request, response); }));}
    void SetMessageAllocatorFor_GetCharges(
        ::grpc::MessageAllocator< ::gooseai::GetChargesRequest, ::gooseai::Charges>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gooseai::GetChargesRequest, ::gooseai::Charges>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetCharges() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCharges(::grpc::ServerContext* /*context*/, const ::gooseai::GetChargesRequest* /*request*/, ::gooseai::Charges* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCharges(
      ::grpc::CallbackServerContext* /*context*/, const ::gooseai::GetChargesRequest* /*request*/, ::gooseai::Charges* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateAutoChargeIntent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateAutoChargeIntent() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::gooseai::CreateAutoChargeIntentRequest, ::gooseai::AutoChargeIntent>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::gooseai::CreateAutoChargeIntentRequest* request, ::gooseai::AutoChargeIntent* response) { return this->CreateAutoChargeIntent(context, request, response); }));}
    void SetMessageAllocatorFor_CreateAutoChargeIntent(
        ::grpc::MessageAllocator< ::gooseai::CreateAutoChargeIntentRequest, ::gooseai::AutoChargeIntent>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gooseai::CreateAutoChargeIntentRequest, ::gooseai::AutoChargeIntent>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateAutoChargeIntent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAutoChargeIntent(::grpc::ServerContext* /*context*/, const ::gooseai::CreateAutoChargeIntentRequest* /*request*/, ::gooseai::AutoChargeIntent* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateAutoChargeIntent(
      ::grpc::CallbackServerContext* /*context*/, const ::gooseai::CreateAutoChargeIntentRequest* /*request*/, ::gooseai::AutoChargeIntent* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateAutoChargeIntent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateAutoChargeIntent() {
      ::grpc::Service::MarkMethodCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::gooseai::CreateAutoChargeIntentRequest, ::gooseai::AutoChargeIntent>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::gooseai::CreateAutoChargeIntentRequest* request, ::gooseai::AutoChargeIntent* response) { return this->UpdateAutoChargeIntent(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateAutoChargeIntent(
        ::grpc::MessageAllocator< ::gooseai::CreateAutoChargeIntentRequest, ::gooseai::AutoChargeIntent>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(14);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gooseai::CreateAutoChargeIntentRequest, ::gooseai::AutoChargeIntent>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateAutoChargeIntent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateAutoChargeIntent(::grpc::ServerContext* /*context*/, const ::gooseai::CreateAutoChargeIntentRequest* /*request*/, ::gooseai::AutoChargeIntent* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateAutoChargeIntent(
      ::grpc::CallbackServerContext* /*context*/, const ::gooseai::CreateAutoChargeIntentRequest* /*request*/, ::gooseai::AutoChargeIntent* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAutoChargeIntent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAutoChargeIntent() {
      ::grpc::Service::MarkMethodCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::gooseai::GetAutoChargeRequest, ::gooseai::AutoChargeIntent>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::gooseai::GetAutoChargeRequest* request, ::gooseai::AutoChargeIntent* response) { return this->GetAutoChargeIntent(context, request, response); }));}
    void SetMessageAllocatorFor_GetAutoChargeIntent(
        ::grpc::MessageAllocator< ::gooseai::GetAutoChargeRequest, ::gooseai::AutoChargeIntent>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(15);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gooseai::GetAutoChargeRequest, ::gooseai::AutoChargeIntent>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAutoChargeIntent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAutoChargeIntent(::grpc::ServerContext* /*context*/, const ::gooseai::GetAutoChargeRequest* /*request*/, ::gooseai::AutoChargeIntent* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAutoChargeIntent(
      ::grpc::CallbackServerContext* /*context*/, const ::gooseai::GetAutoChargeRequest* /*request*/, ::gooseai::AutoChargeIntent* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetMe<WithCallbackMethod_GetOrganization<WithCallbackMethod_GetMetrics<WithCallbackMethod_CreateAPIKey<WithCallbackMethod_DeleteAPIKey<WithCallbackMethod_UpdateDefaultOrganization<WithCallbackMethod_GetClientSettings<WithCallbackMethod_SetClientSettings<WithCallbackMethod_UpdateUserInfo<WithCallbackMethod_CreatePasswordChangeTicket<WithCallbackMethod_DeleteAccount<WithCallbackMethod_CreateCharge<WithCallbackMethod_GetCharges<WithCallbackMethod_CreateAutoChargeIntent<WithCallbackMethod_UpdateAutoChargeIntent<WithCallbackMethod_GetAutoChargeIntent<Service > > > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetMe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetMe() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetMe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMe(::grpc::ServerContext* /*context*/, const ::gooseai::EmptyRequest* /*request*/, ::gooseai::User* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetOrganization() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOrganization(::grpc::ServerContext* /*context*/, const ::gooseai::GetOrganizationRequest* /*request*/, ::gooseai::Organization* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetMetrics() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMetrics(::grpc::ServerContext* /*context*/, const ::gooseai::GetMetricsRequest* /*request*/, ::gooseai::Metrics* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateAPIKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateAPIKey() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_CreateAPIKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAPIKey(::grpc::ServerContext* /*context*/, const ::gooseai::APIKeyRequest* /*request*/, ::gooseai::APIKey* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteAPIKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteAPIKey() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_DeleteAPIKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAPIKey(::grpc::ServerContext* /*context*/, const ::gooseai::APIKeyFindRequest* /*request*/, ::gooseai::APIKey* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateDefaultOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateDefaultOrganization() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_UpdateDefaultOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDefaultOrganization(::grpc::ServerContext* /*context*/, const ::gooseai::UpdateDefaultOrganizationRequest* /*request*/, ::gooseai::User* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetClientSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetClientSettings() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetClientSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetClientSettings(::grpc::ServerContext* /*context*/, const ::gooseai::EmptyRequest* /*request*/, ::gooseai::ClientSettings* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetClientSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetClientSettings() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_SetClientSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetClientSettings(::grpc::ServerContext* /*context*/, const ::gooseai::ClientSettings* /*request*/, ::gooseai::ClientSettings* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateUserInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateUserInfo() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_UpdateUserInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUserInfo(::grpc::ServerContext* /*context*/, const ::gooseai::UpdateUserInfoRequest* /*request*/, ::gooseai::User* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreatePasswordChangeTicket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreatePasswordChangeTicket() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_CreatePasswordChangeTicket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePasswordChangeTicket(::grpc::ServerContext* /*context*/, const ::gooseai::EmptyRequest* /*request*/, ::gooseai::UserPasswordChangeTicket* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteAccount() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_DeleteAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAccount(::grpc::ServerContext* /*context*/, const ::gooseai::EmptyRequest* /*request*/, ::gooseai::User* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateCharge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateCharge() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_CreateCharge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCharge(::grpc::ServerContext* /*context*/, const ::gooseai::CreateChargeRequest* /*request*/, ::gooseai::Charge* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCharges : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCharges() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_GetCharges() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCharges(::grpc::ServerContext* /*context*/, const ::gooseai::GetChargesRequest* /*request*/, ::gooseai::Charges* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateAutoChargeIntent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateAutoChargeIntent() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_CreateAutoChargeIntent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAutoChargeIntent(::grpc::ServerContext* /*context*/, const ::gooseai::CreateAutoChargeIntentRequest* /*request*/, ::gooseai::AutoChargeIntent* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateAutoChargeIntent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateAutoChargeIntent() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_UpdateAutoChargeIntent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateAutoChargeIntent(::grpc::ServerContext* /*context*/, const ::gooseai::CreateAutoChargeIntentRequest* /*request*/, ::gooseai::AutoChargeIntent* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAutoChargeIntent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAutoChargeIntent() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_GetAutoChargeIntent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAutoChargeIntent(::grpc::ServerContext* /*context*/, const ::gooseai::GetAutoChargeRequest* /*request*/, ::gooseai::AutoChargeIntent* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetMe() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetMe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMe(::grpc::ServerContext* /*context*/, const ::gooseai::EmptyRequest* /*request*/, ::gooseai::User* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMe(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetOrganization() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOrganization(::grpc::ServerContext* /*context*/, const ::gooseai::GetOrganizationRequest* /*request*/, ::gooseai::Organization* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOrganization(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetMetrics() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMetrics(::grpc::ServerContext* /*context*/, const ::gooseai::GetMetricsRequest* /*request*/, ::gooseai::Metrics* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMetrics(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateAPIKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateAPIKey() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_CreateAPIKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAPIKey(::grpc::ServerContext* /*context*/, const ::gooseai::APIKeyRequest* /*request*/, ::gooseai::APIKey* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateAPIKey(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteAPIKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteAPIKey() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_DeleteAPIKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAPIKey(::grpc::ServerContext* /*context*/, const ::gooseai::APIKeyFindRequest* /*request*/, ::gooseai::APIKey* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteAPIKey(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateDefaultOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateDefaultOrganization() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_UpdateDefaultOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDefaultOrganization(::grpc::ServerContext* /*context*/, const ::gooseai::UpdateDefaultOrganizationRequest* /*request*/, ::gooseai::User* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateDefaultOrganization(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetClientSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetClientSettings() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_GetClientSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetClientSettings(::grpc::ServerContext* /*context*/, const ::gooseai::EmptyRequest* /*request*/, ::gooseai::ClientSettings* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetClientSettings(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetClientSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetClientSettings() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_SetClientSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetClientSettings(::grpc::ServerContext* /*context*/, const ::gooseai::ClientSettings* /*request*/, ::gooseai::ClientSettings* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetClientSettings(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateUserInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateUserInfo() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_UpdateUserInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUserInfo(::grpc::ServerContext* /*context*/, const ::gooseai::UpdateUserInfoRequest* /*request*/, ::gooseai::User* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateUserInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreatePasswordChangeTicket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreatePasswordChangeTicket() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_CreatePasswordChangeTicket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePasswordChangeTicket(::grpc::ServerContext* /*context*/, const ::gooseai::EmptyRequest* /*request*/, ::gooseai::UserPasswordChangeTicket* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreatePasswordChangeTicket(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteAccount() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_DeleteAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAccount(::grpc::ServerContext* /*context*/, const ::gooseai::EmptyRequest* /*request*/, ::gooseai::User* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteAccount(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateCharge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateCharge() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_CreateCharge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCharge(::grpc::ServerContext* /*context*/, const ::gooseai::CreateChargeRequest* /*request*/, ::gooseai::Charge* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateCharge(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCharges : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCharges() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_GetCharges() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCharges(::grpc::ServerContext* /*context*/, const ::gooseai::GetChargesRequest* /*request*/, ::gooseai::Charges* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCharges(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateAutoChargeIntent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateAutoChargeIntent() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_CreateAutoChargeIntent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAutoChargeIntent(::grpc::ServerContext* /*context*/, const ::gooseai::CreateAutoChargeIntentRequest* /*request*/, ::gooseai::AutoChargeIntent* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateAutoChargeIntent(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateAutoChargeIntent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateAutoChargeIntent() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_UpdateAutoChargeIntent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateAutoChargeIntent(::grpc::ServerContext* /*context*/, const ::gooseai::CreateAutoChargeIntentRequest* /*request*/, ::gooseai::AutoChargeIntent* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateAutoChargeIntent(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAutoChargeIntent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAutoChargeIntent() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_GetAutoChargeIntent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAutoChargeIntent(::grpc::ServerContext* /*context*/, const ::gooseai::GetAutoChargeRequest* /*request*/, ::gooseai::AutoChargeIntent* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAutoChargeIntent(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetMe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetMe() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetMe(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetMe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMe(::grpc::ServerContext* /*context*/, const ::gooseai::EmptyRequest* /*request*/, ::gooseai::User* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMe(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetOrganization() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetOrganization(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOrganization(::grpc::ServerContext* /*context*/, const ::gooseai::GetOrganizationRequest* /*request*/, ::gooseai::Organization* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetOrganization(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetMetrics() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetMetrics(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMetrics(::grpc::ServerContext* /*context*/, const ::gooseai::GetMetricsRequest* /*request*/, ::gooseai::Metrics* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMetrics(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateAPIKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateAPIKey() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateAPIKey(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateAPIKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAPIKey(::grpc::ServerContext* /*context*/, const ::gooseai::APIKeyRequest* /*request*/, ::gooseai::APIKey* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateAPIKey(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteAPIKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteAPIKey() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteAPIKey(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteAPIKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAPIKey(::grpc::ServerContext* /*context*/, const ::gooseai::APIKeyFindRequest* /*request*/, ::gooseai::APIKey* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteAPIKey(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateDefaultOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateDefaultOrganization() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateDefaultOrganization(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateDefaultOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDefaultOrganization(::grpc::ServerContext* /*context*/, const ::gooseai::UpdateDefaultOrganizationRequest* /*request*/, ::gooseai::User* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateDefaultOrganization(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetClientSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetClientSettings() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetClientSettings(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetClientSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetClientSettings(::grpc::ServerContext* /*context*/, const ::gooseai::EmptyRequest* /*request*/, ::gooseai::ClientSettings* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetClientSettings(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetClientSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetClientSettings() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetClientSettings(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetClientSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetClientSettings(::grpc::ServerContext* /*context*/, const ::gooseai::ClientSettings* /*request*/, ::gooseai::ClientSettings* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetClientSettings(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateUserInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateUserInfo() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateUserInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateUserInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUserInfo(::grpc::ServerContext* /*context*/, const ::gooseai::UpdateUserInfoRequest* /*request*/, ::gooseai::User* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateUserInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreatePasswordChangeTicket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreatePasswordChangeTicket() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreatePasswordChangeTicket(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreatePasswordChangeTicket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePasswordChangeTicket(::grpc::ServerContext* /*context*/, const ::gooseai::EmptyRequest* /*request*/, ::gooseai::UserPasswordChangeTicket* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreatePasswordChangeTicket(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteAccount() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteAccount(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteAccount(::grpc::ServerContext* /*context*/, const ::gooseai::EmptyRequest* /*request*/, ::gooseai::User* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteAccount(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateCharge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateCharge() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateCharge(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateCharge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCharge(::grpc::ServerContext* /*context*/, const ::gooseai::CreateChargeRequest* /*request*/, ::gooseai::Charge* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateCharge(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetCharges : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetCharges() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetCharges(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetCharges() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCharges(::grpc::ServerContext* /*context*/, const ::gooseai::GetChargesRequest* /*request*/, ::gooseai::Charges* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCharges(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateAutoChargeIntent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateAutoChargeIntent() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateAutoChargeIntent(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateAutoChargeIntent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAutoChargeIntent(::grpc::ServerContext* /*context*/, const ::gooseai::CreateAutoChargeIntentRequest* /*request*/, ::gooseai::AutoChargeIntent* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateAutoChargeIntent(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateAutoChargeIntent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateAutoChargeIntent() {
      ::grpc::Service::MarkMethodRawCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateAutoChargeIntent(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateAutoChargeIntent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateAutoChargeIntent(::grpc::ServerContext* /*context*/, const ::gooseai::CreateAutoChargeIntentRequest* /*request*/, ::gooseai::AutoChargeIntent* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateAutoChargeIntent(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAutoChargeIntent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAutoChargeIntent() {
      ::grpc::Service::MarkMethodRawCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAutoChargeIntent(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAutoChargeIntent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAutoChargeIntent(::grpc::ServerContext* /*context*/, const ::gooseai::GetAutoChargeRequest* /*request*/, ::gooseai::AutoChargeIntent* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAutoChargeIntent(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetMe() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gooseai::EmptyRequest, ::gooseai::User>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gooseai::EmptyRequest, ::gooseai::User>* streamer) {
                       return this->StreamedGetMe(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetMe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMe(::grpc::ServerContext* /*context*/, const ::gooseai::EmptyRequest* /*request*/, ::gooseai::User* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMe(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gooseai::EmptyRequest,::gooseai::User>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetOrganization() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gooseai::GetOrganizationRequest, ::gooseai::Organization>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gooseai::GetOrganizationRequest, ::gooseai::Organization>* streamer) {
                       return this->StreamedGetOrganization(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetOrganization(::grpc::ServerContext* /*context*/, const ::gooseai::GetOrganizationRequest* /*request*/, ::gooseai::Organization* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetOrganization(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gooseai::GetOrganizationRequest,::gooseai::Organization>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetMetrics() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gooseai::GetMetricsRequest, ::gooseai::Metrics>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gooseai::GetMetricsRequest, ::gooseai::Metrics>* streamer) {
                       return this->StreamedGetMetrics(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMetrics(::grpc::ServerContext* /*context*/, const ::gooseai::GetMetricsRequest* /*request*/, ::gooseai::Metrics* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMetrics(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gooseai::GetMetricsRequest,::gooseai::Metrics>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateAPIKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateAPIKey() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gooseai::APIKeyRequest, ::gooseai::APIKey>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gooseai::APIKeyRequest, ::gooseai::APIKey>* streamer) {
                       return this->StreamedCreateAPIKey(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateAPIKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateAPIKey(::grpc::ServerContext* /*context*/, const ::gooseai::APIKeyRequest* /*request*/, ::gooseai::APIKey* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateAPIKey(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gooseai::APIKeyRequest,::gooseai::APIKey>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteAPIKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteAPIKey() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gooseai::APIKeyFindRequest, ::gooseai::APIKey>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gooseai::APIKeyFindRequest, ::gooseai::APIKey>* streamer) {
                       return this->StreamedDeleteAPIKey(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteAPIKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteAPIKey(::grpc::ServerContext* /*context*/, const ::gooseai::APIKeyFindRequest* /*request*/, ::gooseai::APIKey* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteAPIKey(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gooseai::APIKeyFindRequest,::gooseai::APIKey>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateDefaultOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateDefaultOrganization() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gooseai::UpdateDefaultOrganizationRequest, ::gooseai::User>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gooseai::UpdateDefaultOrganizationRequest, ::gooseai::User>* streamer) {
                       return this->StreamedUpdateDefaultOrganization(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateDefaultOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateDefaultOrganization(::grpc::ServerContext* /*context*/, const ::gooseai::UpdateDefaultOrganizationRequest* /*request*/, ::gooseai::User* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateDefaultOrganization(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gooseai::UpdateDefaultOrganizationRequest,::gooseai::User>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetClientSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetClientSettings() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gooseai::EmptyRequest, ::gooseai::ClientSettings>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gooseai::EmptyRequest, ::gooseai::ClientSettings>* streamer) {
                       return this->StreamedGetClientSettings(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetClientSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetClientSettings(::grpc::ServerContext* /*context*/, const ::gooseai::EmptyRequest* /*request*/, ::gooseai::ClientSettings* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetClientSettings(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gooseai::EmptyRequest,::gooseai::ClientSettings>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetClientSettings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetClientSettings() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gooseai::ClientSettings, ::gooseai::ClientSettings>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gooseai::ClientSettings, ::gooseai::ClientSettings>* streamer) {
                       return this->StreamedSetClientSettings(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetClientSettings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetClientSettings(::grpc::ServerContext* /*context*/, const ::gooseai::ClientSettings* /*request*/, ::gooseai::ClientSettings* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetClientSettings(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gooseai::ClientSettings,::gooseai::ClientSettings>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateUserInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateUserInfo() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gooseai::UpdateUserInfoRequest, ::gooseai::User>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gooseai::UpdateUserInfoRequest, ::gooseai::User>* streamer) {
                       return this->StreamedUpdateUserInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateUserInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateUserInfo(::grpc::ServerContext* /*context*/, const ::gooseai::UpdateUserInfoRequest* /*request*/, ::gooseai::User* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateUserInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gooseai::UpdateUserInfoRequest,::gooseai::User>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreatePasswordChangeTicket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreatePasswordChangeTicket() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gooseai::EmptyRequest, ::gooseai::UserPasswordChangeTicket>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gooseai::EmptyRequest, ::gooseai::UserPasswordChangeTicket>* streamer) {
                       return this->StreamedCreatePasswordChangeTicket(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreatePasswordChangeTicket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreatePasswordChangeTicket(::grpc::ServerContext* /*context*/, const ::gooseai::EmptyRequest* /*request*/, ::gooseai::UserPasswordChangeTicket* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreatePasswordChangeTicket(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gooseai::EmptyRequest,::gooseai::UserPasswordChangeTicket>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteAccount() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gooseai::EmptyRequest, ::gooseai::User>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gooseai::EmptyRequest, ::gooseai::User>* streamer) {
                       return this->StreamedDeleteAccount(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteAccount(::grpc::ServerContext* /*context*/, const ::gooseai::EmptyRequest* /*request*/, ::gooseai::User* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteAccount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gooseai::EmptyRequest,::gooseai::User>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateCharge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateCharge() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gooseai::CreateChargeRequest, ::gooseai::Charge>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gooseai::CreateChargeRequest, ::gooseai::Charge>* streamer) {
                       return this->StreamedCreateCharge(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateCharge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateCharge(::grpc::ServerContext* /*context*/, const ::gooseai::CreateChargeRequest* /*request*/, ::gooseai::Charge* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateCharge(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gooseai::CreateChargeRequest,::gooseai::Charge>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCharges : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCharges() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gooseai::GetChargesRequest, ::gooseai::Charges>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gooseai::GetChargesRequest, ::gooseai::Charges>* streamer) {
                       return this->StreamedGetCharges(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetCharges() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCharges(::grpc::ServerContext* /*context*/, const ::gooseai::GetChargesRequest* /*request*/, ::gooseai::Charges* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCharges(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gooseai::GetChargesRequest,::gooseai::Charges>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateAutoChargeIntent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateAutoChargeIntent() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gooseai::CreateAutoChargeIntentRequest, ::gooseai::AutoChargeIntent>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gooseai::CreateAutoChargeIntentRequest, ::gooseai::AutoChargeIntent>* streamer) {
                       return this->StreamedCreateAutoChargeIntent(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateAutoChargeIntent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateAutoChargeIntent(::grpc::ServerContext* /*context*/, const ::gooseai::CreateAutoChargeIntentRequest* /*request*/, ::gooseai::AutoChargeIntent* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateAutoChargeIntent(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gooseai::CreateAutoChargeIntentRequest,::gooseai::AutoChargeIntent>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateAutoChargeIntent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateAutoChargeIntent() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gooseai::CreateAutoChargeIntentRequest, ::gooseai::AutoChargeIntent>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gooseai::CreateAutoChargeIntentRequest, ::gooseai::AutoChargeIntent>* streamer) {
                       return this->StreamedUpdateAutoChargeIntent(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateAutoChargeIntent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateAutoChargeIntent(::grpc::ServerContext* /*context*/, const ::gooseai::CreateAutoChargeIntentRequest* /*request*/, ::gooseai::AutoChargeIntent* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateAutoChargeIntent(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gooseai::CreateAutoChargeIntentRequest,::gooseai::AutoChargeIntent>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAutoChargeIntent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAutoChargeIntent() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gooseai::GetAutoChargeRequest, ::gooseai::AutoChargeIntent>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gooseai::GetAutoChargeRequest, ::gooseai::AutoChargeIntent>* streamer) {
                       return this->StreamedGetAutoChargeIntent(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAutoChargeIntent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAutoChargeIntent(::grpc::ServerContext* /*context*/, const ::gooseai::GetAutoChargeRequest* /*request*/, ::gooseai::AutoChargeIntent* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAutoChargeIntent(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gooseai::GetAutoChargeRequest,::gooseai::AutoChargeIntent>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetMe<WithStreamedUnaryMethod_GetOrganization<WithStreamedUnaryMethod_GetMetrics<WithStreamedUnaryMethod_CreateAPIKey<WithStreamedUnaryMethod_DeleteAPIKey<WithStreamedUnaryMethod_UpdateDefaultOrganization<WithStreamedUnaryMethod_GetClientSettings<WithStreamedUnaryMethod_SetClientSettings<WithStreamedUnaryMethod_UpdateUserInfo<WithStreamedUnaryMethod_CreatePasswordChangeTicket<WithStreamedUnaryMethod_DeleteAccount<WithStreamedUnaryMethod_CreateCharge<WithStreamedUnaryMethod_GetCharges<WithStreamedUnaryMethod_CreateAutoChargeIntent<WithStreamedUnaryMethod_UpdateAutoChargeIntent<WithStreamedUnaryMethod_GetAutoChargeIntent<Service > > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetMe<WithStreamedUnaryMethod_GetOrganization<WithStreamedUnaryMethod_GetMetrics<WithStreamedUnaryMethod_CreateAPIKey<WithStreamedUnaryMethod_DeleteAPIKey<WithStreamedUnaryMethod_UpdateDefaultOrganization<WithStreamedUnaryMethod_GetClientSettings<WithStreamedUnaryMethod_SetClientSettings<WithStreamedUnaryMethod_UpdateUserInfo<WithStreamedUnaryMethod_CreatePasswordChangeTicket<WithStreamedUnaryMethod_DeleteAccount<WithStreamedUnaryMethod_CreateCharge<WithStreamedUnaryMethod_GetCharges<WithStreamedUnaryMethod_CreateAutoChargeIntent<WithStreamedUnaryMethod_UpdateAutoChargeIntent<WithStreamedUnaryMethod_GetAutoChargeIntent<Service > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace gooseai


#endif  // GRPC_dashboard_2eproto__INCLUDED
