// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: dashboard.proto

#include "dashboard.pb.h"
#include "dashboard.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace gooseai {

static const char* DashboardService_method_names[] = {
  "/gooseai.DashboardService/GetMe",
  "/gooseai.DashboardService/GetOrganization",
  "/gooseai.DashboardService/GetMetrics",
  "/gooseai.DashboardService/CreateAPIKey",
  "/gooseai.DashboardService/DeleteAPIKey",
  "/gooseai.DashboardService/UpdateDefaultOrganization",
  "/gooseai.DashboardService/GetClientSettings",
  "/gooseai.DashboardService/SetClientSettings",
  "/gooseai.DashboardService/UpdateUserInfo",
  "/gooseai.DashboardService/CreatePasswordChangeTicket",
  "/gooseai.DashboardService/DeleteAccount",
  "/gooseai.DashboardService/CreateCharge",
  "/gooseai.DashboardService/GetCharges",
  "/gooseai.DashboardService/CreateAutoChargeIntent",
  "/gooseai.DashboardService/UpdateAutoChargeIntent",
  "/gooseai.DashboardService/GetAutoChargeIntent",
};

std::unique_ptr< DashboardService::Stub> DashboardService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DashboardService::Stub> stub(new DashboardService::Stub(channel, options));
  return stub;
}

DashboardService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetMe_(DashboardService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetOrganization_(DashboardService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMetrics_(DashboardService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateAPIKey_(DashboardService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteAPIKey_(DashboardService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateDefaultOrganization_(DashboardService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetClientSettings_(DashboardService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetClientSettings_(DashboardService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateUserInfo_(DashboardService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreatePasswordChangeTicket_(DashboardService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteAccount_(DashboardService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateCharge_(DashboardService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCharges_(DashboardService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateAutoChargeIntent_(DashboardService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateAutoChargeIntent_(DashboardService_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAutoChargeIntent_(DashboardService_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DashboardService::Stub::GetMe(::grpc::ClientContext* context, const ::gooseai::EmptyRequest& request, ::gooseai::User* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gooseai::EmptyRequest, ::gooseai::User, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetMe_, context, request, response);
}

void DashboardService::Stub::async::GetMe(::grpc::ClientContext* context, const ::gooseai::EmptyRequest* request, ::gooseai::User* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gooseai::EmptyRequest, ::gooseai::User, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMe_, context, request, response, std::move(f));
}

void DashboardService::Stub::async::GetMe(::grpc::ClientContext* context, const ::gooseai::EmptyRequest* request, ::gooseai::User* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMe_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gooseai::User>* DashboardService::Stub::PrepareAsyncGetMeRaw(::grpc::ClientContext* context, const ::gooseai::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gooseai::User, ::gooseai::EmptyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetMe_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gooseai::User>* DashboardService::Stub::AsyncGetMeRaw(::grpc::ClientContext* context, const ::gooseai::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetMeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DashboardService::Stub::GetOrganization(::grpc::ClientContext* context, const ::gooseai::GetOrganizationRequest& request, ::gooseai::Organization* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gooseai::GetOrganizationRequest, ::gooseai::Organization, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetOrganization_, context, request, response);
}

void DashboardService::Stub::async::GetOrganization(::grpc::ClientContext* context, const ::gooseai::GetOrganizationRequest* request, ::gooseai::Organization* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gooseai::GetOrganizationRequest, ::gooseai::Organization, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOrganization_, context, request, response, std::move(f));
}

void DashboardService::Stub::async::GetOrganization(::grpc::ClientContext* context, const ::gooseai::GetOrganizationRequest* request, ::gooseai::Organization* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOrganization_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gooseai::Organization>* DashboardService::Stub::PrepareAsyncGetOrganizationRaw(::grpc::ClientContext* context, const ::gooseai::GetOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gooseai::Organization, ::gooseai::GetOrganizationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetOrganization_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gooseai::Organization>* DashboardService::Stub::AsyncGetOrganizationRaw(::grpc::ClientContext* context, const ::gooseai::GetOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetOrganizationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DashboardService::Stub::GetMetrics(::grpc::ClientContext* context, const ::gooseai::GetMetricsRequest& request, ::gooseai::Metrics* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gooseai::GetMetricsRequest, ::gooseai::Metrics, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetMetrics_, context, request, response);
}

void DashboardService::Stub::async::GetMetrics(::grpc::ClientContext* context, const ::gooseai::GetMetricsRequest* request, ::gooseai::Metrics* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gooseai::GetMetricsRequest, ::gooseai::Metrics, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMetrics_, context, request, response, std::move(f));
}

void DashboardService::Stub::async::GetMetrics(::grpc::ClientContext* context, const ::gooseai::GetMetricsRequest* request, ::gooseai::Metrics* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMetrics_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gooseai::Metrics>* DashboardService::Stub::PrepareAsyncGetMetricsRaw(::grpc::ClientContext* context, const ::gooseai::GetMetricsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gooseai::Metrics, ::gooseai::GetMetricsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetMetrics_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gooseai::Metrics>* DashboardService::Stub::AsyncGetMetricsRaw(::grpc::ClientContext* context, const ::gooseai::GetMetricsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetMetricsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DashboardService::Stub::CreateAPIKey(::grpc::ClientContext* context, const ::gooseai::APIKeyRequest& request, ::gooseai::APIKey* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gooseai::APIKeyRequest, ::gooseai::APIKey, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateAPIKey_, context, request, response);
}

void DashboardService::Stub::async::CreateAPIKey(::grpc::ClientContext* context, const ::gooseai::APIKeyRequest* request, ::gooseai::APIKey* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gooseai::APIKeyRequest, ::gooseai::APIKey, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateAPIKey_, context, request, response, std::move(f));
}

void DashboardService::Stub::async::CreateAPIKey(::grpc::ClientContext* context, const ::gooseai::APIKeyRequest* request, ::gooseai::APIKey* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateAPIKey_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gooseai::APIKey>* DashboardService::Stub::PrepareAsyncCreateAPIKeyRaw(::grpc::ClientContext* context, const ::gooseai::APIKeyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gooseai::APIKey, ::gooseai::APIKeyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateAPIKey_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gooseai::APIKey>* DashboardService::Stub::AsyncCreateAPIKeyRaw(::grpc::ClientContext* context, const ::gooseai::APIKeyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateAPIKeyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DashboardService::Stub::DeleteAPIKey(::grpc::ClientContext* context, const ::gooseai::APIKeyFindRequest& request, ::gooseai::APIKey* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gooseai::APIKeyFindRequest, ::gooseai::APIKey, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteAPIKey_, context, request, response);
}

void DashboardService::Stub::async::DeleteAPIKey(::grpc::ClientContext* context, const ::gooseai::APIKeyFindRequest* request, ::gooseai::APIKey* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gooseai::APIKeyFindRequest, ::gooseai::APIKey, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteAPIKey_, context, request, response, std::move(f));
}

void DashboardService::Stub::async::DeleteAPIKey(::grpc::ClientContext* context, const ::gooseai::APIKeyFindRequest* request, ::gooseai::APIKey* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteAPIKey_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gooseai::APIKey>* DashboardService::Stub::PrepareAsyncDeleteAPIKeyRaw(::grpc::ClientContext* context, const ::gooseai::APIKeyFindRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gooseai::APIKey, ::gooseai::APIKeyFindRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteAPIKey_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gooseai::APIKey>* DashboardService::Stub::AsyncDeleteAPIKeyRaw(::grpc::ClientContext* context, const ::gooseai::APIKeyFindRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteAPIKeyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DashboardService::Stub::UpdateDefaultOrganization(::grpc::ClientContext* context, const ::gooseai::UpdateDefaultOrganizationRequest& request, ::gooseai::User* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gooseai::UpdateDefaultOrganizationRequest, ::gooseai::User, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateDefaultOrganization_, context, request, response);
}

void DashboardService::Stub::async::UpdateDefaultOrganization(::grpc::ClientContext* context, const ::gooseai::UpdateDefaultOrganizationRequest* request, ::gooseai::User* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gooseai::UpdateDefaultOrganizationRequest, ::gooseai::User, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateDefaultOrganization_, context, request, response, std::move(f));
}

void DashboardService::Stub::async::UpdateDefaultOrganization(::grpc::ClientContext* context, const ::gooseai::UpdateDefaultOrganizationRequest* request, ::gooseai::User* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateDefaultOrganization_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gooseai::User>* DashboardService::Stub::PrepareAsyncUpdateDefaultOrganizationRaw(::grpc::ClientContext* context, const ::gooseai::UpdateDefaultOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gooseai::User, ::gooseai::UpdateDefaultOrganizationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateDefaultOrganization_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gooseai::User>* DashboardService::Stub::AsyncUpdateDefaultOrganizationRaw(::grpc::ClientContext* context, const ::gooseai::UpdateDefaultOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateDefaultOrganizationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DashboardService::Stub::GetClientSettings(::grpc::ClientContext* context, const ::gooseai::EmptyRequest& request, ::gooseai::ClientSettings* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gooseai::EmptyRequest, ::gooseai::ClientSettings, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetClientSettings_, context, request, response);
}

void DashboardService::Stub::async::GetClientSettings(::grpc::ClientContext* context, const ::gooseai::EmptyRequest* request, ::gooseai::ClientSettings* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gooseai::EmptyRequest, ::gooseai::ClientSettings, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetClientSettings_, context, request, response, std::move(f));
}

void DashboardService::Stub::async::GetClientSettings(::grpc::ClientContext* context, const ::gooseai::EmptyRequest* request, ::gooseai::ClientSettings* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetClientSettings_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gooseai::ClientSettings>* DashboardService::Stub::PrepareAsyncGetClientSettingsRaw(::grpc::ClientContext* context, const ::gooseai::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gooseai::ClientSettings, ::gooseai::EmptyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetClientSettings_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gooseai::ClientSettings>* DashboardService::Stub::AsyncGetClientSettingsRaw(::grpc::ClientContext* context, const ::gooseai::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetClientSettingsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DashboardService::Stub::SetClientSettings(::grpc::ClientContext* context, const ::gooseai::ClientSettings& request, ::gooseai::ClientSettings* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gooseai::ClientSettings, ::gooseai::ClientSettings, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetClientSettings_, context, request, response);
}

void DashboardService::Stub::async::SetClientSettings(::grpc::ClientContext* context, const ::gooseai::ClientSettings* request, ::gooseai::ClientSettings* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gooseai::ClientSettings, ::gooseai::ClientSettings, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetClientSettings_, context, request, response, std::move(f));
}

void DashboardService::Stub::async::SetClientSettings(::grpc::ClientContext* context, const ::gooseai::ClientSettings* request, ::gooseai::ClientSettings* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetClientSettings_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gooseai::ClientSettings>* DashboardService::Stub::PrepareAsyncSetClientSettingsRaw(::grpc::ClientContext* context, const ::gooseai::ClientSettings& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gooseai::ClientSettings, ::gooseai::ClientSettings, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetClientSettings_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gooseai::ClientSettings>* DashboardService::Stub::AsyncSetClientSettingsRaw(::grpc::ClientContext* context, const ::gooseai::ClientSettings& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetClientSettingsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DashboardService::Stub::UpdateUserInfo(::grpc::ClientContext* context, const ::gooseai::UpdateUserInfoRequest& request, ::gooseai::User* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gooseai::UpdateUserInfoRequest, ::gooseai::User, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateUserInfo_, context, request, response);
}

void DashboardService::Stub::async::UpdateUserInfo(::grpc::ClientContext* context, const ::gooseai::UpdateUserInfoRequest* request, ::gooseai::User* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gooseai::UpdateUserInfoRequest, ::gooseai::User, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateUserInfo_, context, request, response, std::move(f));
}

void DashboardService::Stub::async::UpdateUserInfo(::grpc::ClientContext* context, const ::gooseai::UpdateUserInfoRequest* request, ::gooseai::User* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateUserInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gooseai::User>* DashboardService::Stub::PrepareAsyncUpdateUserInfoRaw(::grpc::ClientContext* context, const ::gooseai::UpdateUserInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gooseai::User, ::gooseai::UpdateUserInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateUserInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gooseai::User>* DashboardService::Stub::AsyncUpdateUserInfoRaw(::grpc::ClientContext* context, const ::gooseai::UpdateUserInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateUserInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DashboardService::Stub::CreatePasswordChangeTicket(::grpc::ClientContext* context, const ::gooseai::EmptyRequest& request, ::gooseai::UserPasswordChangeTicket* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gooseai::EmptyRequest, ::gooseai::UserPasswordChangeTicket, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreatePasswordChangeTicket_, context, request, response);
}

void DashboardService::Stub::async::CreatePasswordChangeTicket(::grpc::ClientContext* context, const ::gooseai::EmptyRequest* request, ::gooseai::UserPasswordChangeTicket* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gooseai::EmptyRequest, ::gooseai::UserPasswordChangeTicket, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreatePasswordChangeTicket_, context, request, response, std::move(f));
}

void DashboardService::Stub::async::CreatePasswordChangeTicket(::grpc::ClientContext* context, const ::gooseai::EmptyRequest* request, ::gooseai::UserPasswordChangeTicket* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreatePasswordChangeTicket_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gooseai::UserPasswordChangeTicket>* DashboardService::Stub::PrepareAsyncCreatePasswordChangeTicketRaw(::grpc::ClientContext* context, const ::gooseai::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gooseai::UserPasswordChangeTicket, ::gooseai::EmptyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreatePasswordChangeTicket_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gooseai::UserPasswordChangeTicket>* DashboardService::Stub::AsyncCreatePasswordChangeTicketRaw(::grpc::ClientContext* context, const ::gooseai::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreatePasswordChangeTicketRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DashboardService::Stub::DeleteAccount(::grpc::ClientContext* context, const ::gooseai::EmptyRequest& request, ::gooseai::User* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gooseai::EmptyRequest, ::gooseai::User, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteAccount_, context, request, response);
}

void DashboardService::Stub::async::DeleteAccount(::grpc::ClientContext* context, const ::gooseai::EmptyRequest* request, ::gooseai::User* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gooseai::EmptyRequest, ::gooseai::User, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteAccount_, context, request, response, std::move(f));
}

void DashboardService::Stub::async::DeleteAccount(::grpc::ClientContext* context, const ::gooseai::EmptyRequest* request, ::gooseai::User* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteAccount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gooseai::User>* DashboardService::Stub::PrepareAsyncDeleteAccountRaw(::grpc::ClientContext* context, const ::gooseai::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gooseai::User, ::gooseai::EmptyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteAccount_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gooseai::User>* DashboardService::Stub::AsyncDeleteAccountRaw(::grpc::ClientContext* context, const ::gooseai::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteAccountRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DashboardService::Stub::CreateCharge(::grpc::ClientContext* context, const ::gooseai::CreateChargeRequest& request, ::gooseai::Charge* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gooseai::CreateChargeRequest, ::gooseai::Charge, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateCharge_, context, request, response);
}

void DashboardService::Stub::async::CreateCharge(::grpc::ClientContext* context, const ::gooseai::CreateChargeRequest* request, ::gooseai::Charge* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gooseai::CreateChargeRequest, ::gooseai::Charge, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateCharge_, context, request, response, std::move(f));
}

void DashboardService::Stub::async::CreateCharge(::grpc::ClientContext* context, const ::gooseai::CreateChargeRequest* request, ::gooseai::Charge* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateCharge_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gooseai::Charge>* DashboardService::Stub::PrepareAsyncCreateChargeRaw(::grpc::ClientContext* context, const ::gooseai::CreateChargeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gooseai::Charge, ::gooseai::CreateChargeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateCharge_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gooseai::Charge>* DashboardService::Stub::AsyncCreateChargeRaw(::grpc::ClientContext* context, const ::gooseai::CreateChargeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateChargeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DashboardService::Stub::GetCharges(::grpc::ClientContext* context, const ::gooseai::GetChargesRequest& request, ::gooseai::Charges* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gooseai::GetChargesRequest, ::gooseai::Charges, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCharges_, context, request, response);
}

void DashboardService::Stub::async::GetCharges(::grpc::ClientContext* context, const ::gooseai::GetChargesRequest* request, ::gooseai::Charges* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gooseai::GetChargesRequest, ::gooseai::Charges, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCharges_, context, request, response, std::move(f));
}

void DashboardService::Stub::async::GetCharges(::grpc::ClientContext* context, const ::gooseai::GetChargesRequest* request, ::gooseai::Charges* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCharges_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gooseai::Charges>* DashboardService::Stub::PrepareAsyncGetChargesRaw(::grpc::ClientContext* context, const ::gooseai::GetChargesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gooseai::Charges, ::gooseai::GetChargesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCharges_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gooseai::Charges>* DashboardService::Stub::AsyncGetChargesRaw(::grpc::ClientContext* context, const ::gooseai::GetChargesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetChargesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DashboardService::Stub::CreateAutoChargeIntent(::grpc::ClientContext* context, const ::gooseai::CreateAutoChargeIntentRequest& request, ::gooseai::AutoChargeIntent* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gooseai::CreateAutoChargeIntentRequest, ::gooseai::AutoChargeIntent, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateAutoChargeIntent_, context, request, response);
}

void DashboardService::Stub::async::CreateAutoChargeIntent(::grpc::ClientContext* context, const ::gooseai::CreateAutoChargeIntentRequest* request, ::gooseai::AutoChargeIntent* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gooseai::CreateAutoChargeIntentRequest, ::gooseai::AutoChargeIntent, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateAutoChargeIntent_, context, request, response, std::move(f));
}

void DashboardService::Stub::async::CreateAutoChargeIntent(::grpc::ClientContext* context, const ::gooseai::CreateAutoChargeIntentRequest* request, ::gooseai::AutoChargeIntent* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateAutoChargeIntent_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gooseai::AutoChargeIntent>* DashboardService::Stub::PrepareAsyncCreateAutoChargeIntentRaw(::grpc::ClientContext* context, const ::gooseai::CreateAutoChargeIntentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gooseai::AutoChargeIntent, ::gooseai::CreateAutoChargeIntentRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateAutoChargeIntent_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gooseai::AutoChargeIntent>* DashboardService::Stub::AsyncCreateAutoChargeIntentRaw(::grpc::ClientContext* context, const ::gooseai::CreateAutoChargeIntentRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateAutoChargeIntentRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DashboardService::Stub::UpdateAutoChargeIntent(::grpc::ClientContext* context, const ::gooseai::CreateAutoChargeIntentRequest& request, ::gooseai::AutoChargeIntent* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gooseai::CreateAutoChargeIntentRequest, ::gooseai::AutoChargeIntent, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateAutoChargeIntent_, context, request, response);
}

void DashboardService::Stub::async::UpdateAutoChargeIntent(::grpc::ClientContext* context, const ::gooseai::CreateAutoChargeIntentRequest* request, ::gooseai::AutoChargeIntent* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gooseai::CreateAutoChargeIntentRequest, ::gooseai::AutoChargeIntent, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateAutoChargeIntent_, context, request, response, std::move(f));
}

void DashboardService::Stub::async::UpdateAutoChargeIntent(::grpc::ClientContext* context, const ::gooseai::CreateAutoChargeIntentRequest* request, ::gooseai::AutoChargeIntent* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateAutoChargeIntent_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gooseai::AutoChargeIntent>* DashboardService::Stub::PrepareAsyncUpdateAutoChargeIntentRaw(::grpc::ClientContext* context, const ::gooseai::CreateAutoChargeIntentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gooseai::AutoChargeIntent, ::gooseai::CreateAutoChargeIntentRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateAutoChargeIntent_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gooseai::AutoChargeIntent>* DashboardService::Stub::AsyncUpdateAutoChargeIntentRaw(::grpc::ClientContext* context, const ::gooseai::CreateAutoChargeIntentRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateAutoChargeIntentRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DashboardService::Stub::GetAutoChargeIntent(::grpc::ClientContext* context, const ::gooseai::GetAutoChargeRequest& request, ::gooseai::AutoChargeIntent* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gooseai::GetAutoChargeRequest, ::gooseai::AutoChargeIntent, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAutoChargeIntent_, context, request, response);
}

void DashboardService::Stub::async::GetAutoChargeIntent(::grpc::ClientContext* context, const ::gooseai::GetAutoChargeRequest* request, ::gooseai::AutoChargeIntent* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gooseai::GetAutoChargeRequest, ::gooseai::AutoChargeIntent, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAutoChargeIntent_, context, request, response, std::move(f));
}

void DashboardService::Stub::async::GetAutoChargeIntent(::grpc::ClientContext* context, const ::gooseai::GetAutoChargeRequest* request, ::gooseai::AutoChargeIntent* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAutoChargeIntent_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gooseai::AutoChargeIntent>* DashboardService::Stub::PrepareAsyncGetAutoChargeIntentRaw(::grpc::ClientContext* context, const ::gooseai::GetAutoChargeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gooseai::AutoChargeIntent, ::gooseai::GetAutoChargeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAutoChargeIntent_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gooseai::AutoChargeIntent>* DashboardService::Stub::AsyncGetAutoChargeIntentRaw(::grpc::ClientContext* context, const ::gooseai::GetAutoChargeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAutoChargeIntentRaw(context, request, cq);
  result->StartCall();
  return result;
}

DashboardService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DashboardService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DashboardService::Service, ::gooseai::EmptyRequest, ::gooseai::User, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DashboardService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gooseai::EmptyRequest* req,
             ::gooseai::User* resp) {
               return service->GetMe(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DashboardService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DashboardService::Service, ::gooseai::GetOrganizationRequest, ::gooseai::Organization, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DashboardService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gooseai::GetOrganizationRequest* req,
             ::gooseai::Organization* resp) {
               return service->GetOrganization(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DashboardService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DashboardService::Service, ::gooseai::GetMetricsRequest, ::gooseai::Metrics, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DashboardService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gooseai::GetMetricsRequest* req,
             ::gooseai::Metrics* resp) {
               return service->GetMetrics(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DashboardService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DashboardService::Service, ::gooseai::APIKeyRequest, ::gooseai::APIKey, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DashboardService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gooseai::APIKeyRequest* req,
             ::gooseai::APIKey* resp) {
               return service->CreateAPIKey(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DashboardService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DashboardService::Service, ::gooseai::APIKeyFindRequest, ::gooseai::APIKey, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DashboardService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gooseai::APIKeyFindRequest* req,
             ::gooseai::APIKey* resp) {
               return service->DeleteAPIKey(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DashboardService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DashboardService::Service, ::gooseai::UpdateDefaultOrganizationRequest, ::gooseai::User, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DashboardService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gooseai::UpdateDefaultOrganizationRequest* req,
             ::gooseai::User* resp) {
               return service->UpdateDefaultOrganization(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DashboardService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DashboardService::Service, ::gooseai::EmptyRequest, ::gooseai::ClientSettings, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DashboardService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gooseai::EmptyRequest* req,
             ::gooseai::ClientSettings* resp) {
               return service->GetClientSettings(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DashboardService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DashboardService::Service, ::gooseai::ClientSettings, ::gooseai::ClientSettings, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DashboardService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gooseai::ClientSettings* req,
             ::gooseai::ClientSettings* resp) {
               return service->SetClientSettings(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DashboardService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DashboardService::Service, ::gooseai::UpdateUserInfoRequest, ::gooseai::User, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DashboardService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gooseai::UpdateUserInfoRequest* req,
             ::gooseai::User* resp) {
               return service->UpdateUserInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DashboardService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DashboardService::Service, ::gooseai::EmptyRequest, ::gooseai::UserPasswordChangeTicket, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DashboardService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gooseai::EmptyRequest* req,
             ::gooseai::UserPasswordChangeTicket* resp) {
               return service->CreatePasswordChangeTicket(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DashboardService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DashboardService::Service, ::gooseai::EmptyRequest, ::gooseai::User, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DashboardService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gooseai::EmptyRequest* req,
             ::gooseai::User* resp) {
               return service->DeleteAccount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DashboardService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DashboardService::Service, ::gooseai::CreateChargeRequest, ::gooseai::Charge, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DashboardService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gooseai::CreateChargeRequest* req,
             ::gooseai::Charge* resp) {
               return service->CreateCharge(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DashboardService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DashboardService::Service, ::gooseai::GetChargesRequest, ::gooseai::Charges, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DashboardService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gooseai::GetChargesRequest* req,
             ::gooseai::Charges* resp) {
               return service->GetCharges(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DashboardService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DashboardService::Service, ::gooseai::CreateAutoChargeIntentRequest, ::gooseai::AutoChargeIntent, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DashboardService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gooseai::CreateAutoChargeIntentRequest* req,
             ::gooseai::AutoChargeIntent* resp) {
               return service->CreateAutoChargeIntent(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DashboardService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DashboardService::Service, ::gooseai::CreateAutoChargeIntentRequest, ::gooseai::AutoChargeIntent, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DashboardService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gooseai::CreateAutoChargeIntentRequest* req,
             ::gooseai::AutoChargeIntent* resp) {
               return service->UpdateAutoChargeIntent(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DashboardService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DashboardService::Service, ::gooseai::GetAutoChargeRequest, ::gooseai::AutoChargeIntent, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DashboardService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gooseai::GetAutoChargeRequest* req,
             ::gooseai::AutoChargeIntent* resp) {
               return service->GetAutoChargeIntent(ctx, req, resp);
             }, this)));
}

DashboardService::Service::~Service() {
}

::grpc::Status DashboardService::Service::GetMe(::grpc::ServerContext* context, const ::gooseai::EmptyRequest* request, ::gooseai::User* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DashboardService::Service::GetOrganization(::grpc::ServerContext* context, const ::gooseai::GetOrganizationRequest* request, ::gooseai::Organization* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DashboardService::Service::GetMetrics(::grpc::ServerContext* context, const ::gooseai::GetMetricsRequest* request, ::gooseai::Metrics* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DashboardService::Service::CreateAPIKey(::grpc::ServerContext* context, const ::gooseai::APIKeyRequest* request, ::gooseai::APIKey* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DashboardService::Service::DeleteAPIKey(::grpc::ServerContext* context, const ::gooseai::APIKeyFindRequest* request, ::gooseai::APIKey* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DashboardService::Service::UpdateDefaultOrganization(::grpc::ServerContext* context, const ::gooseai::UpdateDefaultOrganizationRequest* request, ::gooseai::User* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DashboardService::Service::GetClientSettings(::grpc::ServerContext* context, const ::gooseai::EmptyRequest* request, ::gooseai::ClientSettings* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DashboardService::Service::SetClientSettings(::grpc::ServerContext* context, const ::gooseai::ClientSettings* request, ::gooseai::ClientSettings* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DashboardService::Service::UpdateUserInfo(::grpc::ServerContext* context, const ::gooseai::UpdateUserInfoRequest* request, ::gooseai::User* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DashboardService::Service::CreatePasswordChangeTicket(::grpc::ServerContext* context, const ::gooseai::EmptyRequest* request, ::gooseai::UserPasswordChangeTicket* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DashboardService::Service::DeleteAccount(::grpc::ServerContext* context, const ::gooseai::EmptyRequest* request, ::gooseai::User* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DashboardService::Service::CreateCharge(::grpc::ServerContext* context, const ::gooseai::CreateChargeRequest* request, ::gooseai::Charge* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DashboardService::Service::GetCharges(::grpc::ServerContext* context, const ::gooseai::GetChargesRequest* request, ::gooseai::Charges* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DashboardService::Service::CreateAutoChargeIntent(::grpc::ServerContext* context, const ::gooseai::CreateAutoChargeIntentRequest* request, ::gooseai::AutoChargeIntent* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DashboardService::Service::UpdateAutoChargeIntent(::grpc::ServerContext* context, const ::gooseai::CreateAutoChargeIntentRequest* request, ::gooseai::AutoChargeIntent* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DashboardService::Service::GetAutoChargeIntent(::grpc::ServerContext* context, const ::gooseai::GetAutoChargeRequest* request, ::gooseai::AutoChargeIntent* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace gooseai

