// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: project.proto

#include "project.pb.h"
#include "project.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace gooseai {

static const char* ProjectService_method_names[] = {
  "/gooseai.ProjectService/Create",
  "/gooseai.ProjectService/Update",
  "/gooseai.ProjectService/List",
  "/gooseai.ProjectService/Get",
  "/gooseai.ProjectService/Delete",
  "/gooseai.ProjectService/QueryAssets",
};

std::unique_ptr< ProjectService::Stub> ProjectService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ProjectService::Stub> stub(new ProjectService::Stub(channel, options));
  return stub;
}

ProjectService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Create_(ProjectService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Update_(ProjectService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_List_(ProjectService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_Get_(ProjectService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Delete_(ProjectService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_QueryAssets_(ProjectService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ProjectService::Stub::Create(::grpc::ClientContext* context, const ::gooseai::CreateProjectRequest& request, ::gooseai::Project* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gooseai::CreateProjectRequest, ::gooseai::Project, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Create_, context, request, response);
}

void ProjectService::Stub::async::Create(::grpc::ClientContext* context, const ::gooseai::CreateProjectRequest* request, ::gooseai::Project* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gooseai::CreateProjectRequest, ::gooseai::Project, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, std::move(f));
}

void ProjectService::Stub::async::Create(::grpc::ClientContext* context, const ::gooseai::CreateProjectRequest* request, ::gooseai::Project* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gooseai::Project>* ProjectService::Stub::PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::gooseai::CreateProjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gooseai::Project, ::gooseai::CreateProjectRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Create_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gooseai::Project>* ProjectService::Stub::AsyncCreateRaw(::grpc::ClientContext* context, const ::gooseai::CreateProjectRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProjectService::Stub::Update(::grpc::ClientContext* context, const ::gooseai::UpdateProjectRequest& request, ::gooseai::Project* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gooseai::UpdateProjectRequest, ::gooseai::Project, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Update_, context, request, response);
}

void ProjectService::Stub::async::Update(::grpc::ClientContext* context, const ::gooseai::UpdateProjectRequest* request, ::gooseai::Project* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gooseai::UpdateProjectRequest, ::gooseai::Project, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Update_, context, request, response, std::move(f));
}

void ProjectService::Stub::async::Update(::grpc::ClientContext* context, const ::gooseai::UpdateProjectRequest* request, ::gooseai::Project* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Update_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gooseai::Project>* ProjectService::Stub::PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::gooseai::UpdateProjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gooseai::Project, ::gooseai::UpdateProjectRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Update_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gooseai::Project>* ProjectService::Stub::AsyncUpdateRaw(::grpc::ClientContext* context, const ::gooseai::UpdateProjectRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::gooseai::Project>* ProjectService::Stub::ListRaw(::grpc::ClientContext* context, const ::gooseai::ListProjectRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::gooseai::Project>::Create(channel_.get(), rpcmethod_List_, context, request);
}

void ProjectService::Stub::async::List(::grpc::ClientContext* context, const ::gooseai::ListProjectRequest* request, ::grpc::ClientReadReactor< ::gooseai::Project>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::gooseai::Project>::Create(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::gooseai::Project>* ProjectService::Stub::AsyncListRaw(::grpc::ClientContext* context, const ::gooseai::ListProjectRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::gooseai::Project>::Create(channel_.get(), cq, rpcmethod_List_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::gooseai::Project>* ProjectService::Stub::PrepareAsyncListRaw(::grpc::ClientContext* context, const ::gooseai::ListProjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::gooseai::Project>::Create(channel_.get(), cq, rpcmethod_List_, context, request, false, nullptr);
}

::grpc::Status ProjectService::Stub::Get(::grpc::ClientContext* context, const ::gooseai::GetProjectRequest& request, ::gooseai::Project* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gooseai::GetProjectRequest, ::gooseai::Project, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Get_, context, request, response);
}

void ProjectService::Stub::async::Get(::grpc::ClientContext* context, const ::gooseai::GetProjectRequest* request, ::gooseai::Project* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gooseai::GetProjectRequest, ::gooseai::Project, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, std::move(f));
}

void ProjectService::Stub::async::Get(::grpc::ClientContext* context, const ::gooseai::GetProjectRequest* request, ::gooseai::Project* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gooseai::Project>* ProjectService::Stub::PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::gooseai::GetProjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gooseai::Project, ::gooseai::GetProjectRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Get_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gooseai::Project>* ProjectService::Stub::AsyncGetRaw(::grpc::ClientContext* context, const ::gooseai::GetProjectRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProjectService::Stub::Delete(::grpc::ClientContext* context, const ::gooseai::DeleteProjectRequest& request, ::gooseai::Project* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gooseai::DeleteProjectRequest, ::gooseai::Project, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Delete_, context, request, response);
}

void ProjectService::Stub::async::Delete(::grpc::ClientContext* context, const ::gooseai::DeleteProjectRequest* request, ::gooseai::Project* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gooseai::DeleteProjectRequest, ::gooseai::Project, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, std::move(f));
}

void ProjectService::Stub::async::Delete(::grpc::ClientContext* context, const ::gooseai::DeleteProjectRequest* request, ::gooseai::Project* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gooseai::Project>* ProjectService::Stub::PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::gooseai::DeleteProjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gooseai::Project, ::gooseai::DeleteProjectRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Delete_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gooseai::Project>* ProjectService::Stub::AsyncDeleteRaw(::grpc::ClientContext* context, const ::gooseai::DeleteProjectRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProjectService::Stub::QueryAssets(::grpc::ClientContext* context, const ::gooseai::QueryAssetsRequest& request, ::gooseai::QueryAssetsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gooseai::QueryAssetsRequest, ::gooseai::QueryAssetsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_QueryAssets_, context, request, response);
}

void ProjectService::Stub::async::QueryAssets(::grpc::ClientContext* context, const ::gooseai::QueryAssetsRequest* request, ::gooseai::QueryAssetsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gooseai::QueryAssetsRequest, ::gooseai::QueryAssetsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryAssets_, context, request, response, std::move(f));
}

void ProjectService::Stub::async::QueryAssets(::grpc::ClientContext* context, const ::gooseai::QueryAssetsRequest* request, ::gooseai::QueryAssetsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryAssets_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gooseai::QueryAssetsResponse>* ProjectService::Stub::PrepareAsyncQueryAssetsRaw(::grpc::ClientContext* context, const ::gooseai::QueryAssetsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gooseai::QueryAssetsResponse, ::gooseai::QueryAssetsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_QueryAssets_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gooseai::QueryAssetsResponse>* ProjectService::Stub::AsyncQueryAssetsRaw(::grpc::ClientContext* context, const ::gooseai::QueryAssetsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncQueryAssetsRaw(context, request, cq);
  result->StartCall();
  return result;
}

ProjectService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProjectService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProjectService::Service, ::gooseai::CreateProjectRequest, ::gooseai::Project, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProjectService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gooseai::CreateProjectRequest* req,
             ::gooseai::Project* resp) {
               return service->Create(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProjectService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProjectService::Service, ::gooseai::UpdateProjectRequest, ::gooseai::Project, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProjectService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gooseai::UpdateProjectRequest* req,
             ::gooseai::Project* resp) {
               return service->Update(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProjectService_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ProjectService::Service, ::gooseai::ListProjectRequest, ::gooseai::Project>(
          [](ProjectService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gooseai::ListProjectRequest* req,
             ::grpc::ServerWriter<::gooseai::Project>* writer) {
               return service->List(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProjectService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProjectService::Service, ::gooseai::GetProjectRequest, ::gooseai::Project, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProjectService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gooseai::GetProjectRequest* req,
             ::gooseai::Project* resp) {
               return service->Get(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProjectService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProjectService::Service, ::gooseai::DeleteProjectRequest, ::gooseai::Project, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProjectService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gooseai::DeleteProjectRequest* req,
             ::gooseai::Project* resp) {
               return service->Delete(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProjectService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProjectService::Service, ::gooseai::QueryAssetsRequest, ::gooseai::QueryAssetsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProjectService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gooseai::QueryAssetsRequest* req,
             ::gooseai::QueryAssetsResponse* resp) {
               return service->QueryAssets(ctx, req, resp);
             }, this)));
}

ProjectService::Service::~Service() {
}

::grpc::Status ProjectService::Service::Create(::grpc::ServerContext* context, const ::gooseai::CreateProjectRequest* request, ::gooseai::Project* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProjectService::Service::Update(::grpc::ServerContext* context, const ::gooseai::UpdateProjectRequest* request, ::gooseai::Project* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProjectService::Service::List(::grpc::ServerContext* context, const ::gooseai::ListProjectRequest* request, ::grpc::ServerWriter< ::gooseai::Project>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProjectService::Service::Get(::grpc::ServerContext* context, const ::gooseai::GetProjectRequest* request, ::gooseai::Project* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProjectService::Service::Delete(::grpc::ServerContext* context, const ::gooseai::DeleteProjectRequest* request, ::gooseai::Project* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProjectService::Service::QueryAssets(::grpc::ServerContext* context, const ::gooseai::QueryAssetsRequest* request, ::gooseai::QueryAssetsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace gooseai

