// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: generation.proto
#ifndef GRPC_generation_2eproto__INCLUDED
#define GRPC_generation_2eproto__INCLUDED

#include "generation.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace gooseai {

//
// gRPC services
//
class GenerationService final {
 public:
  static constexpr char const* service_full_name() {
    return "gooseai.GenerationService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderInterface< ::gooseai::Answer>> Generate(::grpc::ClientContext* context, const ::gooseai::Request& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::gooseai::Answer>>(GenerateRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::gooseai::Answer>> AsyncGenerate(::grpc::ClientContext* context, const ::gooseai::Request& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::gooseai::Answer>>(AsyncGenerateRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::gooseai::Answer>> PrepareAsyncGenerate(::grpc::ClientContext* context, const ::gooseai::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::gooseai::Answer>>(PrepareAsyncGenerateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::gooseai::Answer>> ChainGenerate(::grpc::ClientContext* context, const ::gooseai::ChainRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::gooseai::Answer>>(ChainGenerateRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::gooseai::Answer>> AsyncChainGenerate(::grpc::ClientContext* context, const ::gooseai::ChainRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::gooseai::Answer>>(AsyncChainGenerateRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::gooseai::Answer>> PrepareAsyncChainGenerate(::grpc::ClientContext* context, const ::gooseai::ChainRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::gooseai::Answer>>(PrepareAsyncChainGenerateRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Generate(::grpc::ClientContext* context, const ::gooseai::Request* request, ::grpc::ClientReadReactor< ::gooseai::Answer>* reactor) = 0;
      virtual void ChainGenerate(::grpc::ClientContext* context, const ::gooseai::ChainRequest* request, ::grpc::ClientReadReactor< ::gooseai::Answer>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderInterface< ::gooseai::Answer>* GenerateRaw(::grpc::ClientContext* context, const ::gooseai::Request& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::gooseai::Answer>* AsyncGenerateRaw(::grpc::ClientContext* context, const ::gooseai::Request& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::gooseai::Answer>* PrepareAsyncGenerateRaw(::grpc::ClientContext* context, const ::gooseai::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::gooseai::Answer>* ChainGenerateRaw(::grpc::ClientContext* context, const ::gooseai::ChainRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::gooseai::Answer>* AsyncChainGenerateRaw(::grpc::ClientContext* context, const ::gooseai::ChainRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::gooseai::Answer>* PrepareAsyncChainGenerateRaw(::grpc::ClientContext* context, const ::gooseai::ChainRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReader< ::gooseai::Answer>> Generate(::grpc::ClientContext* context, const ::gooseai::Request& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::gooseai::Answer>>(GenerateRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::gooseai::Answer>> AsyncGenerate(::grpc::ClientContext* context, const ::gooseai::Request& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::gooseai::Answer>>(AsyncGenerateRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::gooseai::Answer>> PrepareAsyncGenerate(::grpc::ClientContext* context, const ::gooseai::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::gooseai::Answer>>(PrepareAsyncGenerateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::gooseai::Answer>> ChainGenerate(::grpc::ClientContext* context, const ::gooseai::ChainRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::gooseai::Answer>>(ChainGenerateRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::gooseai::Answer>> AsyncChainGenerate(::grpc::ClientContext* context, const ::gooseai::ChainRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::gooseai::Answer>>(AsyncChainGenerateRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::gooseai::Answer>> PrepareAsyncChainGenerate(::grpc::ClientContext* context, const ::gooseai::ChainRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::gooseai::Answer>>(PrepareAsyncChainGenerateRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Generate(::grpc::ClientContext* context, const ::gooseai::Request* request, ::grpc::ClientReadReactor< ::gooseai::Answer>* reactor) override;
      void ChainGenerate(::grpc::ClientContext* context, const ::gooseai::ChainRequest* request, ::grpc::ClientReadReactor< ::gooseai::Answer>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReader< ::gooseai::Answer>* GenerateRaw(::grpc::ClientContext* context, const ::gooseai::Request& request) override;
    ::grpc::ClientAsyncReader< ::gooseai::Answer>* AsyncGenerateRaw(::grpc::ClientContext* context, const ::gooseai::Request& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::gooseai::Answer>* PrepareAsyncGenerateRaw(::grpc::ClientContext* context, const ::gooseai::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::gooseai::Answer>* ChainGenerateRaw(::grpc::ClientContext* context, const ::gooseai::ChainRequest& request) override;
    ::grpc::ClientAsyncReader< ::gooseai::Answer>* AsyncChainGenerateRaw(::grpc::ClientContext* context, const ::gooseai::ChainRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::gooseai::Answer>* PrepareAsyncChainGenerateRaw(::grpc::ClientContext* context, const ::gooseai::ChainRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Generate_;
    const ::grpc::internal::RpcMethod rpcmethod_ChainGenerate_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Generate(::grpc::ServerContext* context, const ::gooseai::Request* request, ::grpc::ServerWriter< ::gooseai::Answer>* writer);
    virtual ::grpc::Status ChainGenerate(::grpc::ServerContext* context, const ::gooseai::ChainRequest* request, ::grpc::ServerWriter< ::gooseai::Answer>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_Generate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Generate() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Generate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Generate(::grpc::ServerContext* /*context*/, const ::gooseai::Request* /*request*/, ::grpc::ServerWriter< ::gooseai::Answer>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGenerate(::grpc::ServerContext* context, ::gooseai::Request* request, ::grpc::ServerAsyncWriter< ::gooseai::Answer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ChainGenerate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ChainGenerate() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ChainGenerate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChainGenerate(::grpc::ServerContext* /*context*/, const ::gooseai::ChainRequest* /*request*/, ::grpc::ServerWriter< ::gooseai::Answer>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestChainGenerate(::grpc::ServerContext* context, ::gooseai::ChainRequest* request, ::grpc::ServerAsyncWriter< ::gooseai::Answer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Generate<WithAsyncMethod_ChainGenerate<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Generate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Generate() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::gooseai::Request, ::gooseai::Answer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::gooseai::Request* request) { return this->Generate(context, request); }));
    }
    ~WithCallbackMethod_Generate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Generate(::grpc::ServerContext* /*context*/, const ::gooseai::Request* /*request*/, ::grpc::ServerWriter< ::gooseai::Answer>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::gooseai::Answer>* Generate(
      ::grpc::CallbackServerContext* /*context*/, const ::gooseai::Request* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ChainGenerate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ChainGenerate() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::gooseai::ChainRequest, ::gooseai::Answer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::gooseai::ChainRequest* request) { return this->ChainGenerate(context, request); }));
    }
    ~WithCallbackMethod_ChainGenerate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChainGenerate(::grpc::ServerContext* /*context*/, const ::gooseai::ChainRequest* /*request*/, ::grpc::ServerWriter< ::gooseai::Answer>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::gooseai::Answer>* ChainGenerate(
      ::grpc::CallbackServerContext* /*context*/, const ::gooseai::ChainRequest* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Generate<WithCallbackMethod_ChainGenerate<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Generate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Generate() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Generate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Generate(::grpc::ServerContext* /*context*/, const ::gooseai::Request* /*request*/, ::grpc::ServerWriter< ::gooseai::Answer>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ChainGenerate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ChainGenerate() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ChainGenerate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChainGenerate(::grpc::ServerContext* /*context*/, const ::gooseai::ChainRequest* /*request*/, ::grpc::ServerWriter< ::gooseai::Answer>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Generate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Generate() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Generate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Generate(::grpc::ServerContext* /*context*/, const ::gooseai::Request* /*request*/, ::grpc::ServerWriter< ::gooseai::Answer>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGenerate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ChainGenerate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ChainGenerate() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ChainGenerate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChainGenerate(::grpc::ServerContext* /*context*/, const ::gooseai::ChainRequest* /*request*/, ::grpc::ServerWriter< ::gooseai::Answer>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestChainGenerate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Generate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Generate() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->Generate(context, request); }));
    }
    ~WithRawCallbackMethod_Generate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Generate(::grpc::ServerContext* /*context*/, const ::gooseai::Request* /*request*/, ::grpc::ServerWriter< ::gooseai::Answer>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* Generate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ChainGenerate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ChainGenerate() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->ChainGenerate(context, request); }));
    }
    ~WithRawCallbackMethod_ChainGenerate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChainGenerate(::grpc::ServerContext* /*context*/, const ::gooseai::ChainRequest* /*request*/, ::grpc::ServerWriter< ::gooseai::Answer>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* ChainGenerate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  typedef Service StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Generate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_Generate() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::gooseai::Request, ::gooseai::Answer>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::gooseai::Request, ::gooseai::Answer>* streamer) {
                       return this->StreamedGenerate(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_Generate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Generate(::grpc::ServerContext* /*context*/, const ::gooseai::Request* /*request*/, ::grpc::ServerWriter< ::gooseai::Answer>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGenerate(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::gooseai::Request,::gooseai::Answer>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_ChainGenerate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_ChainGenerate() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::gooseai::ChainRequest, ::gooseai::Answer>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::gooseai::ChainRequest, ::gooseai::Answer>* streamer) {
                       return this->StreamedChainGenerate(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_ChainGenerate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ChainGenerate(::grpc::ServerContext* /*context*/, const ::gooseai::ChainRequest* /*request*/, ::grpc::ServerWriter< ::gooseai::Answer>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedChainGenerate(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::gooseai::ChainRequest,::gooseai::Answer>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_Generate<WithSplitStreamingMethod_ChainGenerate<Service > > SplitStreamedService;
  typedef WithSplitStreamingMethod_Generate<WithSplitStreamingMethod_ChainGenerate<Service > > StreamedService;
};

}  // namespace gooseai


#endif  // GRPC_generation_2eproto__INCLUDED
