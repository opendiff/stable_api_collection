// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: project.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_project_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_project_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "generation.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_project_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_project_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_project_2eproto;
namespace gooseai {
class CreateProjectRequest;
struct CreateProjectRequestDefaultTypeInternal;
extern CreateProjectRequestDefaultTypeInternal _CreateProjectRequest_default_instance_;
class DeleteProjectRequest;
struct DeleteProjectRequestDefaultTypeInternal;
extern DeleteProjectRequestDefaultTypeInternal _DeleteProjectRequest_default_instance_;
class GetProjectRequest;
struct GetProjectRequestDefaultTypeInternal;
extern GetProjectRequestDefaultTypeInternal _GetProjectRequest_default_instance_;
class ListProjectRequest;
struct ListProjectRequestDefaultTypeInternal;
extern ListProjectRequestDefaultTypeInternal _ListProjectRequest_default_instance_;
class Project;
struct ProjectDefaultTypeInternal;
extern ProjectDefaultTypeInternal _Project_default_instance_;
class ProjectAsset;
struct ProjectAssetDefaultTypeInternal;
extern ProjectAssetDefaultTypeInternal _ProjectAsset_default_instance_;
class QueryAssetsRequest;
struct QueryAssetsRequestDefaultTypeInternal;
extern QueryAssetsRequestDefaultTypeInternal _QueryAssetsRequest_default_instance_;
class QueryAssetsResponse;
struct QueryAssetsResponseDefaultTypeInternal;
extern QueryAssetsResponseDefaultTypeInternal _QueryAssetsResponse_default_instance_;
class UpdateProjectRequest;
struct UpdateProjectRequestDefaultTypeInternal;
extern UpdateProjectRequestDefaultTypeInternal _UpdateProjectRequest_default_instance_;
}  // namespace gooseai
PROTOBUF_NAMESPACE_OPEN
template<> ::gooseai::CreateProjectRequest* Arena::CreateMaybeMessage<::gooseai::CreateProjectRequest>(Arena*);
template<> ::gooseai::DeleteProjectRequest* Arena::CreateMaybeMessage<::gooseai::DeleteProjectRequest>(Arena*);
template<> ::gooseai::GetProjectRequest* Arena::CreateMaybeMessage<::gooseai::GetProjectRequest>(Arena*);
template<> ::gooseai::ListProjectRequest* Arena::CreateMaybeMessage<::gooseai::ListProjectRequest>(Arena*);
template<> ::gooseai::Project* Arena::CreateMaybeMessage<::gooseai::Project>(Arena*);
template<> ::gooseai::ProjectAsset* Arena::CreateMaybeMessage<::gooseai::ProjectAsset>(Arena*);
template<> ::gooseai::QueryAssetsRequest* Arena::CreateMaybeMessage<::gooseai::QueryAssetsRequest>(Arena*);
template<> ::gooseai::QueryAssetsResponse* Arena::CreateMaybeMessage<::gooseai::QueryAssetsResponse>(Arena*);
template<> ::gooseai::UpdateProjectRequest* Arena::CreateMaybeMessage<::gooseai::UpdateProjectRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gooseai {

enum ProjectAccess : int {
  PROJECT_ACCESS_PRIVATE = 0,
  PROJECT_ACCESS_PUBLIC = 1,
  ProjectAccess_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ProjectAccess_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ProjectAccess_IsValid(int value);
constexpr ProjectAccess ProjectAccess_MIN = PROJECT_ACCESS_PRIVATE;
constexpr ProjectAccess ProjectAccess_MAX = PROJECT_ACCESS_PUBLIC;
constexpr int ProjectAccess_ARRAYSIZE = ProjectAccess_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProjectAccess_descriptor();
template<typename T>
inline const std::string& ProjectAccess_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ProjectAccess>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ProjectAccess_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ProjectAccess_descriptor(), enum_t_value);
}
inline bool ProjectAccess_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ProjectAccess* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ProjectAccess>(
    ProjectAccess_descriptor(), name, value);
}
enum ProjectStatus : int {
  PROJECT_STATUS_INACTIVE = 0,
  PROJECT_STATUS_ACTIVE = 1,
  PROJECT_STATUS_DELETED = 2,
  ProjectStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ProjectStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ProjectStatus_IsValid(int value);
constexpr ProjectStatus ProjectStatus_MIN = PROJECT_STATUS_INACTIVE;
constexpr ProjectStatus ProjectStatus_MAX = PROJECT_STATUS_DELETED;
constexpr int ProjectStatus_ARRAYSIZE = ProjectStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProjectStatus_descriptor();
template<typename T>
inline const std::string& ProjectStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ProjectStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ProjectStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ProjectStatus_descriptor(), enum_t_value);
}
inline bool ProjectStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ProjectStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ProjectStatus>(
    ProjectStatus_descriptor(), name, value);
}
enum ProjectAssetUse : int {
  PROJECT_ASSET_USE_UNDEFINED = 0,
  PROJECT_ASSET_USE_INPUT = 1,
  PROJECT_ASSET_USE_OUTPUT = 2,
  PROJECT_ASSET_USE_INTERMEDIATE = 3,
  PROJECT_ASSET_USE_PROJECT = 4,
  ProjectAssetUse_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ProjectAssetUse_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ProjectAssetUse_IsValid(int value);
constexpr ProjectAssetUse ProjectAssetUse_MIN = PROJECT_ASSET_USE_UNDEFINED;
constexpr ProjectAssetUse ProjectAssetUse_MAX = PROJECT_ASSET_USE_PROJECT;
constexpr int ProjectAssetUse_ARRAYSIZE = ProjectAssetUse_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProjectAssetUse_descriptor();
template<typename T>
inline const std::string& ProjectAssetUse_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ProjectAssetUse>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ProjectAssetUse_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ProjectAssetUse_descriptor(), enum_t_value);
}
inline bool ProjectAssetUse_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ProjectAssetUse* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ProjectAssetUse>(
    ProjectAssetUse_descriptor(), name, value);
}
enum ProjectSortDir : int {
  PROJECT_SORT_DIR_UNSPECIFIED = 0,
  PROJECT_SORT_DIR_ASC = 1,
  PROJECT_SORT_DIR_DESC = 2,
  ProjectSortDir_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ProjectSortDir_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ProjectSortDir_IsValid(int value);
constexpr ProjectSortDir ProjectSortDir_MIN = PROJECT_SORT_DIR_UNSPECIFIED;
constexpr ProjectSortDir ProjectSortDir_MAX = PROJECT_SORT_DIR_DESC;
constexpr int ProjectSortDir_ARRAYSIZE = ProjectSortDir_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProjectSortDir_descriptor();
template<typename T>
inline const std::string& ProjectSortDir_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ProjectSortDir>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ProjectSortDir_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ProjectSortDir_descriptor(), enum_t_value);
}
inline bool ProjectSortDir_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ProjectSortDir* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ProjectSortDir>(
    ProjectSortDir_descriptor(), name, value);
}
// ===================================================================

class ProjectAsset final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gooseai.ProjectAsset) */ {
 public:
  inline ProjectAsset() : ProjectAsset(nullptr) {}
  ~ProjectAsset() override;
  explicit PROTOBUF_CONSTEXPR ProjectAsset(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProjectAsset(const ProjectAsset& from);
  ProjectAsset(ProjectAsset&& from) noexcept
    : ProjectAsset() {
    *this = ::std::move(from);
  }

  inline ProjectAsset& operator=(const ProjectAsset& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProjectAsset& operator=(ProjectAsset&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProjectAsset& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProjectAsset* internal_default_instance() {
    return reinterpret_cast<const ProjectAsset*>(
               &_ProjectAsset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProjectAsset& a, ProjectAsset& b) {
    a.Swap(&b);
  }
  inline void Swap(ProjectAsset* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProjectAsset* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProjectAsset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProjectAsset>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProjectAsset& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProjectAsset& from) {
    ProjectAsset::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProjectAsset* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gooseai.ProjectAsset";
  }
  protected:
  explicit ProjectAsset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kUriFieldNumber = 2,
    kNameFieldNumber = 4,
    kRequestFieldNumber = 8,
    kSizeFieldNumber = 5,
    kCreatedAtFieldNumber = 6,
    kUpdatedAtFieldNumber = 7,
    kUseFieldNumber = 3,
  };
  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string uri = 2 [json_name = "uri"];
  void clear_uri();
  const std::string& uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uri();
  PROTOBUF_NODISCARD std::string* release_uri();
  void set_allocated_uri(std::string* uri);
  private:
  const std::string& _internal_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uri(const std::string& value);
  std::string* _internal_mutable_uri();
  public:

  // string name = 4 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .gooseai.Request request = 8 [json_name = "request"];
  bool has_request() const;
  private:
  bool _internal_has_request() const;
  public:
  void clear_request();
  const ::gooseai::Request& request() const;
  PROTOBUF_NODISCARD ::gooseai::Request* release_request();
  ::gooseai::Request* mutable_request();
  void set_allocated_request(::gooseai::Request* request);
  private:
  const ::gooseai::Request& _internal_request() const;
  ::gooseai::Request* _internal_mutable_request();
  public:
  void unsafe_arena_set_allocated_request(
      ::gooseai::Request* request);
  ::gooseai::Request* unsafe_arena_release_request();

  // uint64 size = 5 [json_name = "size"];
  void clear_size();
  uint64_t size() const;
  void set_size(uint64_t value);
  private:
  uint64_t _internal_size() const;
  void _internal_set_size(uint64_t value);
  public:

  // uint64 created_at = 6 [json_name = "createdAt"];
  void clear_created_at();
  uint64_t created_at() const;
  void set_created_at(uint64_t value);
  private:
  uint64_t _internal_created_at() const;
  void _internal_set_created_at(uint64_t value);
  public:

  // uint64 updated_at = 7 [json_name = "updatedAt"];
  void clear_updated_at();
  uint64_t updated_at() const;
  void set_updated_at(uint64_t value);
  private:
  uint64_t _internal_updated_at() const;
  void _internal_set_updated_at(uint64_t value);
  public:

  // .gooseai.ProjectAssetUse use = 3 [json_name = "use"];
  void clear_use();
  ::gooseai::ProjectAssetUse use() const;
  void set_use(::gooseai::ProjectAssetUse value);
  private:
  ::gooseai::ProjectAssetUse _internal_use() const;
  void _internal_set_use(::gooseai::ProjectAssetUse value);
  public:

  // @@protoc_insertion_point(class_scope:gooseai.ProjectAsset)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::gooseai::Request* request_;
    uint64_t size_;
    uint64_t created_at_;
    uint64_t updated_at_;
    int use_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_project_2eproto;
};
// -------------------------------------------------------------------

class Project final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gooseai.Project) */ {
 public:
  inline Project() : Project(nullptr) {}
  ~Project() override;
  explicit PROTOBUF_CONSTEXPR Project(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Project(const Project& from);
  Project(Project&& from) noexcept
    : Project() {
    *this = ::std::move(from);
  }

  inline Project& operator=(const Project& from) {
    CopyFrom(from);
    return *this;
  }
  inline Project& operator=(Project&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Project& default_instance() {
    return *internal_default_instance();
  }
  static inline const Project* internal_default_instance() {
    return reinterpret_cast<const Project*>(
               &_Project_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Project& a, Project& b) {
    a.Swap(&b);
  }
  inline void Swap(Project* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Project* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Project* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Project>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Project& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Project& from) {
    Project::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Project* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gooseai.Project";
  }
  protected:
  explicit Project(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssetsFieldNumber = 10,
    kIdFieldNumber = 1,
    kTitleFieldNumber = 2,
    kOwnerIdFieldNumber = 3,
    kFileFieldNumber = 7,
    kAccessFieldNumber = 4,
    kStatusFieldNumber = 5,
    kSizeFieldNumber = 6,
    kCreatedAtFieldNumber = 8,
    kUpdatedAtFieldNumber = 9,
  };
  // repeated .gooseai.ProjectAsset assets = 10 [json_name = "assets"];
  int assets_size() const;
  private:
  int _internal_assets_size() const;
  public:
  void clear_assets();
  ::gooseai::ProjectAsset* mutable_assets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gooseai::ProjectAsset >*
      mutable_assets();
  private:
  const ::gooseai::ProjectAsset& _internal_assets(int index) const;
  ::gooseai::ProjectAsset* _internal_add_assets();
  public:
  const ::gooseai::ProjectAsset& assets(int index) const;
  ::gooseai::ProjectAsset* add_assets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gooseai::ProjectAsset >&
      assets() const;

  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string title = 2 [json_name = "title"];
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string owner_id = 3 [json_name = "ownerId"];
  void clear_owner_id();
  const std::string& owner_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner_id();
  PROTOBUF_NODISCARD std::string* release_owner_id();
  void set_allocated_owner_id(std::string* owner_id);
  private:
  const std::string& _internal_owner_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner_id(const std::string& value);
  std::string* _internal_mutable_owner_id();
  public:

  // .gooseai.ProjectAsset file = 7 [json_name = "file"];
  bool has_file() const;
  private:
  bool _internal_has_file() const;
  public:
  void clear_file();
  const ::gooseai::ProjectAsset& file() const;
  PROTOBUF_NODISCARD ::gooseai::ProjectAsset* release_file();
  ::gooseai::ProjectAsset* mutable_file();
  void set_allocated_file(::gooseai::ProjectAsset* file);
  private:
  const ::gooseai::ProjectAsset& _internal_file() const;
  ::gooseai::ProjectAsset* _internal_mutable_file();
  public:
  void unsafe_arena_set_allocated_file(
      ::gooseai::ProjectAsset* file);
  ::gooseai::ProjectAsset* unsafe_arena_release_file();

  // .gooseai.ProjectAccess access = 4 [json_name = "access"];
  void clear_access();
  ::gooseai::ProjectAccess access() const;
  void set_access(::gooseai::ProjectAccess value);
  private:
  ::gooseai::ProjectAccess _internal_access() const;
  void _internal_set_access(::gooseai::ProjectAccess value);
  public:

  // .gooseai.ProjectStatus status = 5 [json_name = "status"];
  void clear_status();
  ::gooseai::ProjectStatus status() const;
  void set_status(::gooseai::ProjectStatus value);
  private:
  ::gooseai::ProjectStatus _internal_status() const;
  void _internal_set_status(::gooseai::ProjectStatus value);
  public:

  // uint64 size = 6 [json_name = "size"];
  void clear_size();
  uint64_t size() const;
  void set_size(uint64_t value);
  private:
  uint64_t _internal_size() const;
  void _internal_set_size(uint64_t value);
  public:

  // uint64 created_at = 8 [json_name = "createdAt"];
  void clear_created_at();
  uint64_t created_at() const;
  void set_created_at(uint64_t value);
  private:
  uint64_t _internal_created_at() const;
  void _internal_set_created_at(uint64_t value);
  public:

  // uint64 updated_at = 9 [json_name = "updatedAt"];
  void clear_updated_at();
  uint64_t updated_at() const;
  void set_updated_at(uint64_t value);
  private:
  uint64_t _internal_updated_at() const;
  void _internal_set_updated_at(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:gooseai.Project)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gooseai::ProjectAsset > assets_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_id_;
    ::gooseai::ProjectAsset* file_;
    int access_;
    int status_;
    uint64_t size_;
    uint64_t created_at_;
    uint64_t updated_at_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_project_2eproto;
};
// -------------------------------------------------------------------

class CreateProjectRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gooseai.CreateProjectRequest) */ {
 public:
  inline CreateProjectRequest() : CreateProjectRequest(nullptr) {}
  ~CreateProjectRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateProjectRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateProjectRequest(const CreateProjectRequest& from);
  CreateProjectRequest(CreateProjectRequest&& from) noexcept
    : CreateProjectRequest() {
    *this = ::std::move(from);
  }

  inline CreateProjectRequest& operator=(const CreateProjectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateProjectRequest& operator=(CreateProjectRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateProjectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateProjectRequest* internal_default_instance() {
    return reinterpret_cast<const CreateProjectRequest*>(
               &_CreateProjectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CreateProjectRequest& a, CreateProjectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateProjectRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateProjectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateProjectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateProjectRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateProjectRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateProjectRequest& from) {
    CreateProjectRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateProjectRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gooseai.CreateProjectRequest";
  }
  protected:
  explicit CreateProjectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 1,
    kOwnerIdFieldNumber = 2,
    kFileFieldNumber = 5,
    kAccessFieldNumber = 3,
    kStatusFieldNumber = 4,
  };
  // string title = 1 [json_name = "title"];
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // optional string owner_id = 2 [json_name = "ownerId"];
  bool has_owner_id() const;
  private:
  bool _internal_has_owner_id() const;
  public:
  void clear_owner_id();
  const std::string& owner_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner_id();
  PROTOBUF_NODISCARD std::string* release_owner_id();
  void set_allocated_owner_id(std::string* owner_id);
  private:
  const std::string& _internal_owner_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner_id(const std::string& value);
  std::string* _internal_mutable_owner_id();
  public:

  // optional .gooseai.ProjectAsset file = 5 [json_name = "file"];
  bool has_file() const;
  private:
  bool _internal_has_file() const;
  public:
  void clear_file();
  const ::gooseai::ProjectAsset& file() const;
  PROTOBUF_NODISCARD ::gooseai::ProjectAsset* release_file();
  ::gooseai::ProjectAsset* mutable_file();
  void set_allocated_file(::gooseai::ProjectAsset* file);
  private:
  const ::gooseai::ProjectAsset& _internal_file() const;
  ::gooseai::ProjectAsset* _internal_mutable_file();
  public:
  void unsafe_arena_set_allocated_file(
      ::gooseai::ProjectAsset* file);
  ::gooseai::ProjectAsset* unsafe_arena_release_file();

  // .gooseai.ProjectAccess access = 3 [json_name = "access"];
  void clear_access();
  ::gooseai::ProjectAccess access() const;
  void set_access(::gooseai::ProjectAccess value);
  private:
  ::gooseai::ProjectAccess _internal_access() const;
  void _internal_set_access(::gooseai::ProjectAccess value);
  public:

  // .gooseai.ProjectStatus status = 4 [json_name = "status"];
  void clear_status();
  ::gooseai::ProjectStatus status() const;
  void set_status(::gooseai::ProjectStatus value);
  private:
  ::gooseai::ProjectStatus _internal_status() const;
  void _internal_set_status(::gooseai::ProjectStatus value);
  public:

  // @@protoc_insertion_point(class_scope:gooseai.CreateProjectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_id_;
    ::gooseai::ProjectAsset* file_;
    int access_;
    int status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_project_2eproto;
};
// -------------------------------------------------------------------

class UpdateProjectRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gooseai.UpdateProjectRequest) */ {
 public:
  inline UpdateProjectRequest() : UpdateProjectRequest(nullptr) {}
  ~UpdateProjectRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateProjectRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateProjectRequest(const UpdateProjectRequest& from);
  UpdateProjectRequest(UpdateProjectRequest&& from) noexcept
    : UpdateProjectRequest() {
    *this = ::std::move(from);
  }

  inline UpdateProjectRequest& operator=(const UpdateProjectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateProjectRequest& operator=(UpdateProjectRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateProjectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateProjectRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateProjectRequest*>(
               &_UpdateProjectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UpdateProjectRequest& a, UpdateProjectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateProjectRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateProjectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateProjectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateProjectRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateProjectRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateProjectRequest& from) {
    UpdateProjectRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateProjectRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gooseai.UpdateProjectRequest";
  }
  protected:
  explicit UpdateProjectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kOwnerIdFieldNumber = 2,
    kTitleFieldNumber = 3,
    kFileFieldNumber = 6,
    kAccessFieldNumber = 4,
    kStatusFieldNumber = 5,
  };
  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional string owner_id = 2 [json_name = "ownerId"];
  bool has_owner_id() const;
  private:
  bool _internal_has_owner_id() const;
  public:
  void clear_owner_id();
  const std::string& owner_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner_id();
  PROTOBUF_NODISCARD std::string* release_owner_id();
  void set_allocated_owner_id(std::string* owner_id);
  private:
  const std::string& _internal_owner_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner_id(const std::string& value);
  std::string* _internal_mutable_owner_id();
  public:

  // optional string title = 3 [json_name = "title"];
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // optional .gooseai.ProjectAsset file = 6 [json_name = "file"];
  bool has_file() const;
  private:
  bool _internal_has_file() const;
  public:
  void clear_file();
  const ::gooseai::ProjectAsset& file() const;
  PROTOBUF_NODISCARD ::gooseai::ProjectAsset* release_file();
  ::gooseai::ProjectAsset* mutable_file();
  void set_allocated_file(::gooseai::ProjectAsset* file);
  private:
  const ::gooseai::ProjectAsset& _internal_file() const;
  ::gooseai::ProjectAsset* _internal_mutable_file();
  public:
  void unsafe_arena_set_allocated_file(
      ::gooseai::ProjectAsset* file);
  ::gooseai::ProjectAsset* unsafe_arena_release_file();

  // optional .gooseai.ProjectAccess access = 4 [json_name = "access"];
  bool has_access() const;
  private:
  bool _internal_has_access() const;
  public:
  void clear_access();
  ::gooseai::ProjectAccess access() const;
  void set_access(::gooseai::ProjectAccess value);
  private:
  ::gooseai::ProjectAccess _internal_access() const;
  void _internal_set_access(::gooseai::ProjectAccess value);
  public:

  // optional .gooseai.ProjectStatus status = 5 [json_name = "status"];
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::gooseai::ProjectStatus status() const;
  void set_status(::gooseai::ProjectStatus value);
  private:
  ::gooseai::ProjectStatus _internal_status() const;
  void _internal_set_status(::gooseai::ProjectStatus value);
  public:

  // @@protoc_insertion_point(class_scope:gooseai.UpdateProjectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::gooseai::ProjectAsset* file_;
    int access_;
    int status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_project_2eproto;
};
// -------------------------------------------------------------------

class ListProjectRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gooseai.ListProjectRequest) */ {
 public:
  inline ListProjectRequest() : ListProjectRequest(nullptr) {}
  ~ListProjectRequest() override;
  explicit PROTOBUF_CONSTEXPR ListProjectRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListProjectRequest(const ListProjectRequest& from);
  ListProjectRequest(ListProjectRequest&& from) noexcept
    : ListProjectRequest() {
    *this = ::std::move(from);
  }

  inline ListProjectRequest& operator=(const ListProjectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListProjectRequest& operator=(ListProjectRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListProjectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListProjectRequest* internal_default_instance() {
    return reinterpret_cast<const ListProjectRequest*>(
               &_ListProjectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ListProjectRequest& a, ListProjectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListProjectRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListProjectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListProjectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListProjectRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListProjectRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListProjectRequest& from) {
    ListProjectRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListProjectRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gooseai.ListProjectRequest";
  }
  protected:
  explicit ListProjectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerIdFieldNumber = 1,
  };
  // optional string owner_id = 1 [json_name = "ownerId"];
  bool has_owner_id() const;
  private:
  bool _internal_has_owner_id() const;
  public:
  void clear_owner_id();
  const std::string& owner_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner_id();
  PROTOBUF_NODISCARD std::string* release_owner_id();
  void set_allocated_owner_id(std::string* owner_id);
  private:
  const std::string& _internal_owner_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner_id(const std::string& value);
  std::string* _internal_mutable_owner_id();
  public:

  // @@protoc_insertion_point(class_scope:gooseai.ListProjectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_project_2eproto;
};
// -------------------------------------------------------------------

class GetProjectRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gooseai.GetProjectRequest) */ {
 public:
  inline GetProjectRequest() : GetProjectRequest(nullptr) {}
  ~GetProjectRequest() override;
  explicit PROTOBUF_CONSTEXPR GetProjectRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetProjectRequest(const GetProjectRequest& from);
  GetProjectRequest(GetProjectRequest&& from) noexcept
    : GetProjectRequest() {
    *this = ::std::move(from);
  }

  inline GetProjectRequest& operator=(const GetProjectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetProjectRequest& operator=(GetProjectRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetProjectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetProjectRequest* internal_default_instance() {
    return reinterpret_cast<const GetProjectRequest*>(
               &_GetProjectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetProjectRequest& a, GetProjectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetProjectRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetProjectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetProjectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetProjectRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetProjectRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetProjectRequest& from) {
    GetProjectRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetProjectRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gooseai.GetProjectRequest";
  }
  protected:
  explicit GetProjectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kOwnerIdFieldNumber = 2,
  };
  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional string owner_id = 2 [json_name = "ownerId"];
  bool has_owner_id() const;
  private:
  bool _internal_has_owner_id() const;
  public:
  void clear_owner_id();
  const std::string& owner_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner_id();
  PROTOBUF_NODISCARD std::string* release_owner_id();
  void set_allocated_owner_id(std::string* owner_id);
  private:
  const std::string& _internal_owner_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner_id(const std::string& value);
  std::string* _internal_mutable_owner_id();
  public:

  // @@protoc_insertion_point(class_scope:gooseai.GetProjectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_project_2eproto;
};
// -------------------------------------------------------------------

class DeleteProjectRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gooseai.DeleteProjectRequest) */ {
 public:
  inline DeleteProjectRequest() : DeleteProjectRequest(nullptr) {}
  ~DeleteProjectRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteProjectRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteProjectRequest(const DeleteProjectRequest& from);
  DeleteProjectRequest(DeleteProjectRequest&& from) noexcept
    : DeleteProjectRequest() {
    *this = ::std::move(from);
  }

  inline DeleteProjectRequest& operator=(const DeleteProjectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteProjectRequest& operator=(DeleteProjectRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteProjectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteProjectRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteProjectRequest*>(
               &_DeleteProjectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DeleteProjectRequest& a, DeleteProjectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteProjectRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteProjectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteProjectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteProjectRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteProjectRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteProjectRequest& from) {
    DeleteProjectRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteProjectRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gooseai.DeleteProjectRequest";
  }
  protected:
  explicit DeleteProjectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kOwnerIdFieldNumber = 2,
  };
  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional string owner_id = 2 [json_name = "ownerId"];
  bool has_owner_id() const;
  private:
  bool _internal_has_owner_id() const;
  public:
  void clear_owner_id();
  const std::string& owner_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner_id();
  PROTOBUF_NODISCARD std::string* release_owner_id();
  void set_allocated_owner_id(std::string* owner_id);
  private:
  const std::string& _internal_owner_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner_id(const std::string& value);
  std::string* _internal_mutable_owner_id();
  public:

  // @@protoc_insertion_point(class_scope:gooseai.DeleteProjectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_project_2eproto;
};
// -------------------------------------------------------------------

class QueryAssetsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gooseai.QueryAssetsRequest) */ {
 public:
  inline QueryAssetsRequest() : QueryAssetsRequest(nullptr) {}
  ~QueryAssetsRequest() override;
  explicit PROTOBUF_CONSTEXPR QueryAssetsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryAssetsRequest(const QueryAssetsRequest& from);
  QueryAssetsRequest(QueryAssetsRequest&& from) noexcept
    : QueryAssetsRequest() {
    *this = ::std::move(from);
  }

  inline QueryAssetsRequest& operator=(const QueryAssetsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryAssetsRequest& operator=(QueryAssetsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryAssetsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryAssetsRequest* internal_default_instance() {
    return reinterpret_cast<const QueryAssetsRequest*>(
               &_QueryAssetsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(QueryAssetsRequest& a, QueryAssetsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryAssetsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryAssetsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryAssetsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryAssetsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryAssetsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryAssetsRequest& from) {
    QueryAssetsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryAssetsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gooseai.QueryAssetsRequest";
  }
  protected:
  explicit QueryAssetsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUseFieldNumber = 7,
    kIdFieldNumber = 1,
    kOwnerIdFieldNumber = 2,
    kStartKeyFieldNumber = 6,
    kSinceFieldNumber = 3,
    kUntilFieldNumber = 4,
    kLimitFieldNumber = 5,
    kSortDirFieldNumber = 8,
  };
  // repeated .gooseai.ProjectAssetUse use = 7 [json_name = "use"];
  int use_size() const;
  private:
  int _internal_use_size() const;
  public:
  void clear_use();
  private:
  ::gooseai::ProjectAssetUse _internal_use(int index) const;
  void _internal_add_use(::gooseai::ProjectAssetUse value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_use();
  public:
  ::gooseai::ProjectAssetUse use(int index) const;
  void set_use(int index, ::gooseai::ProjectAssetUse value);
  void add_use(::gooseai::ProjectAssetUse value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& use() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_use();

  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional string owner_id = 2 [json_name = "ownerId"];
  bool has_owner_id() const;
  private:
  bool _internal_has_owner_id() const;
  public:
  void clear_owner_id();
  const std::string& owner_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner_id();
  PROTOBUF_NODISCARD std::string* release_owner_id();
  void set_allocated_owner_id(std::string* owner_id);
  private:
  const std::string& _internal_owner_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner_id(const std::string& value);
  std::string* _internal_mutable_owner_id();
  public:

  // optional string start_key = 6 [json_name = "startKey"];
  bool has_start_key() const;
  private:
  bool _internal_has_start_key() const;
  public:
  void clear_start_key();
  const std::string& start_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_start_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_start_key();
  PROTOBUF_NODISCARD std::string* release_start_key();
  void set_allocated_start_key(std::string* start_key);
  private:
  const std::string& _internal_start_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_start_key(const std::string& value);
  std::string* _internal_mutable_start_key();
  public:

  // optional uint64 since = 3 [json_name = "since"];
  bool has_since() const;
  private:
  bool _internal_has_since() const;
  public:
  void clear_since();
  uint64_t since() const;
  void set_since(uint64_t value);
  private:
  uint64_t _internal_since() const;
  void _internal_set_since(uint64_t value);
  public:

  // optional uint64 until = 4 [json_name = "until"];
  bool has_until() const;
  private:
  bool _internal_has_until() const;
  public:
  void clear_until();
  uint64_t until() const;
  void set_until(uint64_t value);
  private:
  uint64_t _internal_until() const;
  void _internal_set_until(uint64_t value);
  public:

  // optional uint64 limit = 5 [json_name = "limit"];
  bool has_limit() const;
  private:
  bool _internal_has_limit() const;
  public:
  void clear_limit();
  uint64_t limit() const;
  void set_limit(uint64_t value);
  private:
  uint64_t _internal_limit() const;
  void _internal_set_limit(uint64_t value);
  public:

  // .gooseai.ProjectSortDir sort_dir = 8 [json_name = "sortDir"];
  void clear_sort_dir();
  ::gooseai::ProjectSortDir sort_dir() const;
  void set_sort_dir(::gooseai::ProjectSortDir value);
  private:
  ::gooseai::ProjectSortDir _internal_sort_dir() const;
  void _internal_set_sort_dir(::gooseai::ProjectSortDir value);
  public:

  // @@protoc_insertion_point(class_scope:gooseai.QueryAssetsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> use_;
    mutable std::atomic<int> _use_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_key_;
    uint64_t since_;
    uint64_t until_;
    uint64_t limit_;
    int sort_dir_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_project_2eproto;
};
// -------------------------------------------------------------------

class QueryAssetsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gooseai.QueryAssetsResponse) */ {
 public:
  inline QueryAssetsResponse() : QueryAssetsResponse(nullptr) {}
  ~QueryAssetsResponse() override;
  explicit PROTOBUF_CONSTEXPR QueryAssetsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryAssetsResponse(const QueryAssetsResponse& from);
  QueryAssetsResponse(QueryAssetsResponse&& from) noexcept
    : QueryAssetsResponse() {
    *this = ::std::move(from);
  }

  inline QueryAssetsResponse& operator=(const QueryAssetsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryAssetsResponse& operator=(QueryAssetsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryAssetsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryAssetsResponse* internal_default_instance() {
    return reinterpret_cast<const QueryAssetsResponse*>(
               &_QueryAssetsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(QueryAssetsResponse& a, QueryAssetsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryAssetsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryAssetsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryAssetsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryAssetsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryAssetsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryAssetsResponse& from) {
    QueryAssetsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryAssetsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gooseai.QueryAssetsResponse";
  }
  protected:
  explicit QueryAssetsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssetsFieldNumber = 1,
    kLastKeyFieldNumber = 2,
  };
  // repeated .gooseai.ProjectAsset assets = 1 [json_name = "assets"];
  int assets_size() const;
  private:
  int _internal_assets_size() const;
  public:
  void clear_assets();
  ::gooseai::ProjectAsset* mutable_assets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gooseai::ProjectAsset >*
      mutable_assets();
  private:
  const ::gooseai::ProjectAsset& _internal_assets(int index) const;
  ::gooseai::ProjectAsset* _internal_add_assets();
  public:
  const ::gooseai::ProjectAsset& assets(int index) const;
  ::gooseai::ProjectAsset* add_assets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gooseai::ProjectAsset >&
      assets() const;

  // optional string last_key = 2 [json_name = "lastKey"];
  bool has_last_key() const;
  private:
  bool _internal_has_last_key() const;
  public:
  void clear_last_key();
  const std::string& last_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_last_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_last_key();
  PROTOBUF_NODISCARD std::string* release_last_key();
  void set_allocated_last_key(std::string* last_key);
  private:
  const std::string& _internal_last_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_key(const std::string& value);
  std::string* _internal_mutable_last_key();
  public:

  // @@protoc_insertion_point(class_scope:gooseai.QueryAssetsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gooseai::ProjectAsset > assets_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_key_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_project_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProjectAsset

// string id = 1 [json_name = "id"];
inline void ProjectAsset::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& ProjectAsset::id() const {
  // @@protoc_insertion_point(field_get:gooseai.ProjectAsset.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProjectAsset::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gooseai.ProjectAsset.id)
}
inline std::string* ProjectAsset::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:gooseai.ProjectAsset.id)
  return _s;
}
inline const std::string& ProjectAsset::_internal_id() const {
  return _impl_.id_.Get();
}
inline void ProjectAsset::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* ProjectAsset::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* ProjectAsset::release_id() {
  // @@protoc_insertion_point(field_release:gooseai.ProjectAsset.id)
  return _impl_.id_.Release();
}
inline void ProjectAsset::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gooseai.ProjectAsset.id)
}

// string uri = 2 [json_name = "uri"];
inline void ProjectAsset::clear_uri() {
  _impl_.uri_.ClearToEmpty();
}
inline const std::string& ProjectAsset::uri() const {
  // @@protoc_insertion_point(field_get:gooseai.ProjectAsset.uri)
  return _internal_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProjectAsset::set_uri(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uri_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gooseai.ProjectAsset.uri)
}
inline std::string* ProjectAsset::mutable_uri() {
  std::string* _s = _internal_mutable_uri();
  // @@protoc_insertion_point(field_mutable:gooseai.ProjectAsset.uri)
  return _s;
}
inline const std::string& ProjectAsset::_internal_uri() const {
  return _impl_.uri_.Get();
}
inline void ProjectAsset::_internal_set_uri(const std::string& value) {
  
  _impl_.uri_.Set(value, GetArenaForAllocation());
}
inline std::string* ProjectAsset::_internal_mutable_uri() {
  
  return _impl_.uri_.Mutable(GetArenaForAllocation());
}
inline std::string* ProjectAsset::release_uri() {
  // @@protoc_insertion_point(field_release:gooseai.ProjectAsset.uri)
  return _impl_.uri_.Release();
}
inline void ProjectAsset::set_allocated_uri(std::string* uri) {
  if (uri != nullptr) {
    
  } else {
    
  }
  _impl_.uri_.SetAllocated(uri, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uri_.IsDefault()) {
    _impl_.uri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gooseai.ProjectAsset.uri)
}

// .gooseai.ProjectAssetUse use = 3 [json_name = "use"];
inline void ProjectAsset::clear_use() {
  _impl_.use_ = 0;
}
inline ::gooseai::ProjectAssetUse ProjectAsset::_internal_use() const {
  return static_cast< ::gooseai::ProjectAssetUse >(_impl_.use_);
}
inline ::gooseai::ProjectAssetUse ProjectAsset::use() const {
  // @@protoc_insertion_point(field_get:gooseai.ProjectAsset.use)
  return _internal_use();
}
inline void ProjectAsset::_internal_set_use(::gooseai::ProjectAssetUse value) {
  
  _impl_.use_ = value;
}
inline void ProjectAsset::set_use(::gooseai::ProjectAssetUse value) {
  _internal_set_use(value);
  // @@protoc_insertion_point(field_set:gooseai.ProjectAsset.use)
}

// string name = 4 [json_name = "name"];
inline void ProjectAsset::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ProjectAsset::name() const {
  // @@protoc_insertion_point(field_get:gooseai.ProjectAsset.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProjectAsset::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gooseai.ProjectAsset.name)
}
inline std::string* ProjectAsset::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:gooseai.ProjectAsset.name)
  return _s;
}
inline const std::string& ProjectAsset::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ProjectAsset::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ProjectAsset::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ProjectAsset::release_name() {
  // @@protoc_insertion_point(field_release:gooseai.ProjectAsset.name)
  return _impl_.name_.Release();
}
inline void ProjectAsset::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gooseai.ProjectAsset.name)
}

// uint64 size = 5 [json_name = "size"];
inline void ProjectAsset::clear_size() {
  _impl_.size_ = uint64_t{0u};
}
inline uint64_t ProjectAsset::_internal_size() const {
  return _impl_.size_;
}
inline uint64_t ProjectAsset::size() const {
  // @@protoc_insertion_point(field_get:gooseai.ProjectAsset.size)
  return _internal_size();
}
inline void ProjectAsset::_internal_set_size(uint64_t value) {
  
  _impl_.size_ = value;
}
inline void ProjectAsset::set_size(uint64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:gooseai.ProjectAsset.size)
}

// uint64 created_at = 6 [json_name = "createdAt"];
inline void ProjectAsset::clear_created_at() {
  _impl_.created_at_ = uint64_t{0u};
}
inline uint64_t ProjectAsset::_internal_created_at() const {
  return _impl_.created_at_;
}
inline uint64_t ProjectAsset::created_at() const {
  // @@protoc_insertion_point(field_get:gooseai.ProjectAsset.created_at)
  return _internal_created_at();
}
inline void ProjectAsset::_internal_set_created_at(uint64_t value) {
  
  _impl_.created_at_ = value;
}
inline void ProjectAsset::set_created_at(uint64_t value) {
  _internal_set_created_at(value);
  // @@protoc_insertion_point(field_set:gooseai.ProjectAsset.created_at)
}

// uint64 updated_at = 7 [json_name = "updatedAt"];
inline void ProjectAsset::clear_updated_at() {
  _impl_.updated_at_ = uint64_t{0u};
}
inline uint64_t ProjectAsset::_internal_updated_at() const {
  return _impl_.updated_at_;
}
inline uint64_t ProjectAsset::updated_at() const {
  // @@protoc_insertion_point(field_get:gooseai.ProjectAsset.updated_at)
  return _internal_updated_at();
}
inline void ProjectAsset::_internal_set_updated_at(uint64_t value) {
  
  _impl_.updated_at_ = value;
}
inline void ProjectAsset::set_updated_at(uint64_t value) {
  _internal_set_updated_at(value);
  // @@protoc_insertion_point(field_set:gooseai.ProjectAsset.updated_at)
}

// .gooseai.Request request = 8 [json_name = "request"];
inline bool ProjectAsset::_internal_has_request() const {
  return this != internal_default_instance() && _impl_.request_ != nullptr;
}
inline bool ProjectAsset::has_request() const {
  return _internal_has_request();
}
inline const ::gooseai::Request& ProjectAsset::_internal_request() const {
  const ::gooseai::Request* p = _impl_.request_;
  return p != nullptr ? *p : reinterpret_cast<const ::gooseai::Request&>(
      ::gooseai::_Request_default_instance_);
}
inline const ::gooseai::Request& ProjectAsset::request() const {
  // @@protoc_insertion_point(field_get:gooseai.ProjectAsset.request)
  return _internal_request();
}
inline void ProjectAsset::unsafe_arena_set_allocated_request(
    ::gooseai::Request* request) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.request_);
  }
  _impl_.request_ = request;
  if (request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gooseai.ProjectAsset.request)
}
inline ::gooseai::Request* ProjectAsset::release_request() {
  
  ::gooseai::Request* temp = _impl_.request_;
  _impl_.request_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gooseai::Request* ProjectAsset::unsafe_arena_release_request() {
  // @@protoc_insertion_point(field_release:gooseai.ProjectAsset.request)
  
  ::gooseai::Request* temp = _impl_.request_;
  _impl_.request_ = nullptr;
  return temp;
}
inline ::gooseai::Request* ProjectAsset::_internal_mutable_request() {
  
  if (_impl_.request_ == nullptr) {
    auto* p = CreateMaybeMessage<::gooseai::Request>(GetArenaForAllocation());
    _impl_.request_ = p;
  }
  return _impl_.request_;
}
inline ::gooseai::Request* ProjectAsset::mutable_request() {
  ::gooseai::Request* _msg = _internal_mutable_request();
  // @@protoc_insertion_point(field_mutable:gooseai.ProjectAsset.request)
  return _msg;
}
inline void ProjectAsset::set_allocated_request(::gooseai::Request* request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.request_);
  }
  if (request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request));
    if (message_arena != submessage_arena) {
      request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.request_ = request;
  // @@protoc_insertion_point(field_set_allocated:gooseai.ProjectAsset.request)
}

// -------------------------------------------------------------------

// Project

// string id = 1 [json_name = "id"];
inline void Project::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& Project::id() const {
  // @@protoc_insertion_point(field_get:gooseai.Project.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Project::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gooseai.Project.id)
}
inline std::string* Project::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:gooseai.Project.id)
  return _s;
}
inline const std::string& Project::_internal_id() const {
  return _impl_.id_.Get();
}
inline void Project::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* Project::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* Project::release_id() {
  // @@protoc_insertion_point(field_release:gooseai.Project.id)
  return _impl_.id_.Release();
}
inline void Project::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gooseai.Project.id)
}

// string title = 2 [json_name = "title"];
inline void Project::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& Project::title() const {
  // @@protoc_insertion_point(field_get:gooseai.Project.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Project::set_title(ArgT0&& arg0, ArgT... args) {
 
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gooseai.Project.title)
}
inline std::string* Project::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:gooseai.Project.title)
  return _s;
}
inline const std::string& Project::_internal_title() const {
  return _impl_.title_.Get();
}
inline void Project::_internal_set_title(const std::string& value) {
  
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* Project::_internal_mutable_title() {
  
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* Project::release_title() {
  // @@protoc_insertion_point(field_release:gooseai.Project.title)
  return _impl_.title_.Release();
}
inline void Project::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gooseai.Project.title)
}

// string owner_id = 3 [json_name = "ownerId"];
inline void Project::clear_owner_id() {
  _impl_.owner_id_.ClearToEmpty();
}
inline const std::string& Project::owner_id() const {
  // @@protoc_insertion_point(field_get:gooseai.Project.owner_id)
  return _internal_owner_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Project::set_owner_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.owner_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gooseai.Project.owner_id)
}
inline std::string* Project::mutable_owner_id() {
  std::string* _s = _internal_mutable_owner_id();
  // @@protoc_insertion_point(field_mutable:gooseai.Project.owner_id)
  return _s;
}
inline const std::string& Project::_internal_owner_id() const {
  return _impl_.owner_id_.Get();
}
inline void Project::_internal_set_owner_id(const std::string& value) {
  
  _impl_.owner_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Project::_internal_mutable_owner_id() {
  
  return _impl_.owner_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Project::release_owner_id() {
  // @@protoc_insertion_point(field_release:gooseai.Project.owner_id)
  return _impl_.owner_id_.Release();
}
inline void Project::set_allocated_owner_id(std::string* owner_id) {
  if (owner_id != nullptr) {
    
  } else {
    
  }
  _impl_.owner_id_.SetAllocated(owner_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.owner_id_.IsDefault()) {
    _impl_.owner_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gooseai.Project.owner_id)
}

// .gooseai.ProjectAccess access = 4 [json_name = "access"];
inline void Project::clear_access() {
  _impl_.access_ = 0;
}
inline ::gooseai::ProjectAccess Project::_internal_access() const {
  return static_cast< ::gooseai::ProjectAccess >(_impl_.access_);
}
inline ::gooseai::ProjectAccess Project::access() const {
  // @@protoc_insertion_point(field_get:gooseai.Project.access)
  return _internal_access();
}
inline void Project::_internal_set_access(::gooseai::ProjectAccess value) {
  
  _impl_.access_ = value;
}
inline void Project::set_access(::gooseai::ProjectAccess value) {
  _internal_set_access(value);
  // @@protoc_insertion_point(field_set:gooseai.Project.access)
}

// .gooseai.ProjectStatus status = 5 [json_name = "status"];
inline void Project::clear_status() {
  _impl_.status_ = 0;
}
inline ::gooseai::ProjectStatus Project::_internal_status() const {
  return static_cast< ::gooseai::ProjectStatus >(_impl_.status_);
}
inline ::gooseai::ProjectStatus Project::status() const {
  // @@protoc_insertion_point(field_get:gooseai.Project.status)
  return _internal_status();
}
inline void Project::_internal_set_status(::gooseai::ProjectStatus value) {
  
  _impl_.status_ = value;
}
inline void Project::set_status(::gooseai::ProjectStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:gooseai.Project.status)
}

// uint64 size = 6 [json_name = "size"];
inline void Project::clear_size() {
  _impl_.size_ = uint64_t{0u};
}
inline uint64_t Project::_internal_size() const {
  return _impl_.size_;
}
inline uint64_t Project::size() const {
  // @@protoc_insertion_point(field_get:gooseai.Project.size)
  return _internal_size();
}
inline void Project::_internal_set_size(uint64_t value) {
  
  _impl_.size_ = value;
}
inline void Project::set_size(uint64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:gooseai.Project.size)
}

// .gooseai.ProjectAsset file = 7 [json_name = "file"];
inline bool Project::_internal_has_file() const {
  return this != internal_default_instance() && _impl_.file_ != nullptr;
}
inline bool Project::has_file() const {
  return _internal_has_file();
}
inline void Project::clear_file() {
  if (GetArenaForAllocation() == nullptr && _impl_.file_ != nullptr) {
    delete _impl_.file_;
  }
  _impl_.file_ = nullptr;
}
inline const ::gooseai::ProjectAsset& Project::_internal_file() const {
  const ::gooseai::ProjectAsset* p = _impl_.file_;
  return p != nullptr ? *p : reinterpret_cast<const ::gooseai::ProjectAsset&>(
      ::gooseai::_ProjectAsset_default_instance_);
}
inline const ::gooseai::ProjectAsset& Project::file() const {
  // @@protoc_insertion_point(field_get:gooseai.Project.file)
  return _internal_file();
}
inline void Project::unsafe_arena_set_allocated_file(
    ::gooseai::ProjectAsset* file) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.file_);
  }
  _impl_.file_ = file;
  if (file) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gooseai.Project.file)
}
inline ::gooseai::ProjectAsset* Project::release_file() {
  
  ::gooseai::ProjectAsset* temp = _impl_.file_;
  _impl_.file_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gooseai::ProjectAsset* Project::unsafe_arena_release_file() {
  // @@protoc_insertion_point(field_release:gooseai.Project.file)
  
  ::gooseai::ProjectAsset* temp = _impl_.file_;
  _impl_.file_ = nullptr;
  return temp;
}
inline ::gooseai::ProjectAsset* Project::_internal_mutable_file() {
  
  if (_impl_.file_ == nullptr) {
    auto* p = CreateMaybeMessage<::gooseai::ProjectAsset>(GetArenaForAllocation());
    _impl_.file_ = p;
  }
  return _impl_.file_;
}
inline ::gooseai::ProjectAsset* Project::mutable_file() {
  ::gooseai::ProjectAsset* _msg = _internal_mutable_file();
  // @@protoc_insertion_point(field_mutable:gooseai.Project.file)
  return _msg;
}
inline void Project::set_allocated_file(::gooseai::ProjectAsset* file) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.file_;
  }
  if (file) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(file);
    if (message_arena != submessage_arena) {
      file = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, file, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.file_ = file;
  // @@protoc_insertion_point(field_set_allocated:gooseai.Project.file)
}

// uint64 created_at = 8 [json_name = "createdAt"];
inline void Project::clear_created_at() {
  _impl_.created_at_ = uint64_t{0u};
}
inline uint64_t Project::_internal_created_at() const {
  return _impl_.created_at_;
}
inline uint64_t Project::created_at() const {
  // @@protoc_insertion_point(field_get:gooseai.Project.created_at)
  return _internal_created_at();
}
inline void Project::_internal_set_created_at(uint64_t value) {
  
  _impl_.created_at_ = value;
}
inline void Project::set_created_at(uint64_t value) {
  _internal_set_created_at(value);
  // @@protoc_insertion_point(field_set:gooseai.Project.created_at)
}

// uint64 updated_at = 9 [json_name = "updatedAt"];
inline void Project::clear_updated_at() {
  _impl_.updated_at_ = uint64_t{0u};
}
inline uint64_t Project::_internal_updated_at() const {
  return _impl_.updated_at_;
}
inline uint64_t Project::updated_at() const {
  // @@protoc_insertion_point(field_get:gooseai.Project.updated_at)
  return _internal_updated_at();
}
inline void Project::_internal_set_updated_at(uint64_t value) {
  
  _impl_.updated_at_ = value;
}
inline void Project::set_updated_at(uint64_t value) {
  _internal_set_updated_at(value);
  // @@protoc_insertion_point(field_set:gooseai.Project.updated_at)
}

// repeated .gooseai.ProjectAsset assets = 10 [json_name = "assets"];
inline int Project::_internal_assets_size() const {
  return _impl_.assets_.size();
}
inline int Project::assets_size() const {
  return _internal_assets_size();
}
inline void Project::clear_assets() {
  _impl_.assets_.Clear();
}
inline ::gooseai::ProjectAsset* Project::mutable_assets(int index) {
  // @@protoc_insertion_point(field_mutable:gooseai.Project.assets)
  return _impl_.assets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gooseai::ProjectAsset >*
Project::mutable_assets() {
  // @@protoc_insertion_point(field_mutable_list:gooseai.Project.assets)
  return &_impl_.assets_;
}
inline const ::gooseai::ProjectAsset& Project::_internal_assets(int index) const {
  return _impl_.assets_.Get(index);
}
inline const ::gooseai::ProjectAsset& Project::assets(int index) const {
  // @@protoc_insertion_point(field_get:gooseai.Project.assets)
  return _internal_assets(index);
}
inline ::gooseai::ProjectAsset* Project::_internal_add_assets() {
  return _impl_.assets_.Add();
}
inline ::gooseai::ProjectAsset* Project::add_assets() {
  ::gooseai::ProjectAsset* _add = _internal_add_assets();
  // @@protoc_insertion_point(field_add:gooseai.Project.assets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gooseai::ProjectAsset >&
Project::assets() const {
  // @@protoc_insertion_point(field_list:gooseai.Project.assets)
  return _impl_.assets_;
}

// -------------------------------------------------------------------

// CreateProjectRequest

// string title = 1 [json_name = "title"];
inline void CreateProjectRequest::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& CreateProjectRequest::title() const {
  // @@protoc_insertion_point(field_get:gooseai.CreateProjectRequest.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateProjectRequest::set_title(ArgT0&& arg0, ArgT... args) {
 
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gooseai.CreateProjectRequest.title)
}
inline std::string* CreateProjectRequest::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:gooseai.CreateProjectRequest.title)
  return _s;
}
inline const std::string& CreateProjectRequest::_internal_title() const {
  return _impl_.title_.Get();
}
inline void CreateProjectRequest::_internal_set_title(const std::string& value) {
  
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateProjectRequest::_internal_mutable_title() {
  
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateProjectRequest::release_title() {
  // @@protoc_insertion_point(field_release:gooseai.CreateProjectRequest.title)
  return _impl_.title_.Release();
}
inline void CreateProjectRequest::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gooseai.CreateProjectRequest.title)
}

// optional string owner_id = 2 [json_name = "ownerId"];
inline bool CreateProjectRequest::_internal_has_owner_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CreateProjectRequest::has_owner_id() const {
  return _internal_has_owner_id();
}
inline void CreateProjectRequest::clear_owner_id() {
  _impl_.owner_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CreateProjectRequest::owner_id() const {
  // @@protoc_insertion_point(field_get:gooseai.CreateProjectRequest.owner_id)
  return _internal_owner_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateProjectRequest::set_owner_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.owner_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gooseai.CreateProjectRequest.owner_id)
}
inline std::string* CreateProjectRequest::mutable_owner_id() {
  std::string* _s = _internal_mutable_owner_id();
  // @@protoc_insertion_point(field_mutable:gooseai.CreateProjectRequest.owner_id)
  return _s;
}
inline const std::string& CreateProjectRequest::_internal_owner_id() const {
  return _impl_.owner_id_.Get();
}
inline void CreateProjectRequest::_internal_set_owner_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.owner_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateProjectRequest::_internal_mutable_owner_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.owner_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateProjectRequest::release_owner_id() {
  // @@protoc_insertion_point(field_release:gooseai.CreateProjectRequest.owner_id)
  if (!_internal_has_owner_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.owner_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.owner_id_.IsDefault()) {
    _impl_.owner_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CreateProjectRequest::set_allocated_owner_id(std::string* owner_id) {
  if (owner_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.owner_id_.SetAllocated(owner_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.owner_id_.IsDefault()) {
    _impl_.owner_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gooseai.CreateProjectRequest.owner_id)
}

// .gooseai.ProjectAccess access = 3 [json_name = "access"];
inline void CreateProjectRequest::clear_access() {
  _impl_.access_ = 0;
}
inline ::gooseai::ProjectAccess CreateProjectRequest::_internal_access() const {
  return static_cast< ::gooseai::ProjectAccess >(_impl_.access_);
}
inline ::gooseai::ProjectAccess CreateProjectRequest::access() const {
  // @@protoc_insertion_point(field_get:gooseai.CreateProjectRequest.access)
  return _internal_access();
}
inline void CreateProjectRequest::_internal_set_access(::gooseai::ProjectAccess value) {
  
  _impl_.access_ = value;
}
inline void CreateProjectRequest::set_access(::gooseai::ProjectAccess value) {
  _internal_set_access(value);
  // @@protoc_insertion_point(field_set:gooseai.CreateProjectRequest.access)
}

// .gooseai.ProjectStatus status = 4 [json_name = "status"];
inline void CreateProjectRequest::clear_status() {
  _impl_.status_ = 0;
}
inline ::gooseai::ProjectStatus CreateProjectRequest::_internal_status() const {
  return static_cast< ::gooseai::ProjectStatus >(_impl_.status_);
}
inline ::gooseai::ProjectStatus CreateProjectRequest::status() const {
  // @@protoc_insertion_point(field_get:gooseai.CreateProjectRequest.status)
  return _internal_status();
}
inline void CreateProjectRequest::_internal_set_status(::gooseai::ProjectStatus value) {
  
  _impl_.status_ = value;
}
inline void CreateProjectRequest::set_status(::gooseai::ProjectStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:gooseai.CreateProjectRequest.status)
}

// optional .gooseai.ProjectAsset file = 5 [json_name = "file"];
inline bool CreateProjectRequest::_internal_has_file() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.file_ != nullptr);
  return value;
}
inline bool CreateProjectRequest::has_file() const {
  return _internal_has_file();
}
inline void CreateProjectRequest::clear_file() {
  if (_impl_.file_ != nullptr) _impl_.file_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::gooseai::ProjectAsset& CreateProjectRequest::_internal_file() const {
  const ::gooseai::ProjectAsset* p = _impl_.file_;
  return p != nullptr ? *p : reinterpret_cast<const ::gooseai::ProjectAsset&>(
      ::gooseai::_ProjectAsset_default_instance_);
}
inline const ::gooseai::ProjectAsset& CreateProjectRequest::file() const {
  // @@protoc_insertion_point(field_get:gooseai.CreateProjectRequest.file)
  return _internal_file();
}
inline void CreateProjectRequest::unsafe_arena_set_allocated_file(
    ::gooseai::ProjectAsset* file) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.file_);
  }
  _impl_.file_ = file;
  if (file) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gooseai.CreateProjectRequest.file)
}
inline ::gooseai::ProjectAsset* CreateProjectRequest::release_file() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::gooseai::ProjectAsset* temp = _impl_.file_;
  _impl_.file_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gooseai::ProjectAsset* CreateProjectRequest::unsafe_arena_release_file() {
  // @@protoc_insertion_point(field_release:gooseai.CreateProjectRequest.file)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::gooseai::ProjectAsset* temp = _impl_.file_;
  _impl_.file_ = nullptr;
  return temp;
}
inline ::gooseai::ProjectAsset* CreateProjectRequest::_internal_mutable_file() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.file_ == nullptr) {
    auto* p = CreateMaybeMessage<::gooseai::ProjectAsset>(GetArenaForAllocation());
    _impl_.file_ = p;
  }
  return _impl_.file_;
}
inline ::gooseai::ProjectAsset* CreateProjectRequest::mutable_file() {
  ::gooseai::ProjectAsset* _msg = _internal_mutable_file();
  // @@protoc_insertion_point(field_mutable:gooseai.CreateProjectRequest.file)
  return _msg;
}
inline void CreateProjectRequest::set_allocated_file(::gooseai::ProjectAsset* file) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.file_;
  }
  if (file) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(file);
    if (message_arena != submessage_arena) {
      file = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, file, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.file_ = file;
  // @@protoc_insertion_point(field_set_allocated:gooseai.CreateProjectRequest.file)
}

// -------------------------------------------------------------------

// UpdateProjectRequest

// string id = 1 [json_name = "id"];
inline void UpdateProjectRequest::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& UpdateProjectRequest::id() const {
  // @@protoc_insertion_point(field_get:gooseai.UpdateProjectRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateProjectRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gooseai.UpdateProjectRequest.id)
}
inline std::string* UpdateProjectRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:gooseai.UpdateProjectRequest.id)
  return _s;
}
inline const std::string& UpdateProjectRequest::_internal_id() const {
  return _impl_.id_.Get();
}
inline void UpdateProjectRequest::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateProjectRequest::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdateProjectRequest::release_id() {
  // @@protoc_insertion_point(field_release:gooseai.UpdateProjectRequest.id)
  return _impl_.id_.Release();
}
inline void UpdateProjectRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gooseai.UpdateProjectRequest.id)
}

// optional string owner_id = 2 [json_name = "ownerId"];
inline bool UpdateProjectRequest::_internal_has_owner_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UpdateProjectRequest::has_owner_id() const {
  return _internal_has_owner_id();
}
inline void UpdateProjectRequest::clear_owner_id() {
  _impl_.owner_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UpdateProjectRequest::owner_id() const {
  // @@protoc_insertion_point(field_get:gooseai.UpdateProjectRequest.owner_id)
  return _internal_owner_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateProjectRequest::set_owner_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.owner_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gooseai.UpdateProjectRequest.owner_id)
}
inline std::string* UpdateProjectRequest::mutable_owner_id() {
  std::string* _s = _internal_mutable_owner_id();
  // @@protoc_insertion_point(field_mutable:gooseai.UpdateProjectRequest.owner_id)
  return _s;
}
inline const std::string& UpdateProjectRequest::_internal_owner_id() const {
  return _impl_.owner_id_.Get();
}
inline void UpdateProjectRequest::_internal_set_owner_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.owner_id_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateProjectRequest::_internal_mutable_owner_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.owner_id_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdateProjectRequest::release_owner_id() {
  // @@protoc_insertion_point(field_release:gooseai.UpdateProjectRequest.owner_id)
  if (!_internal_has_owner_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.owner_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.owner_id_.IsDefault()) {
    _impl_.owner_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UpdateProjectRequest::set_allocated_owner_id(std::string* owner_id) {
  if (owner_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.owner_id_.SetAllocated(owner_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.owner_id_.IsDefault()) {
    _impl_.owner_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gooseai.UpdateProjectRequest.owner_id)
}

// optional string title = 3 [json_name = "title"];
inline bool UpdateProjectRequest::_internal_has_title() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UpdateProjectRequest::has_title() const {
  return _internal_has_title();
}
inline void UpdateProjectRequest::clear_title() {
  _impl_.title_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& UpdateProjectRequest::title() const {
  // @@protoc_insertion_point(field_get:gooseai.UpdateProjectRequest.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateProjectRequest::set_title(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gooseai.UpdateProjectRequest.title)
}
inline std::string* UpdateProjectRequest::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:gooseai.UpdateProjectRequest.title)
  return _s;
}
inline const std::string& UpdateProjectRequest::_internal_title() const {
  return _impl_.title_.Get();
}
inline void UpdateProjectRequest::_internal_set_title(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateProjectRequest::_internal_mutable_title() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdateProjectRequest::release_title() {
  // @@protoc_insertion_point(field_release:gooseai.UpdateProjectRequest.title)
  if (!_internal_has_title()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.title_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UpdateProjectRequest::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gooseai.UpdateProjectRequest.title)
}

// optional .gooseai.ProjectAccess access = 4 [json_name = "access"];
inline bool UpdateProjectRequest::_internal_has_access() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool UpdateProjectRequest::has_access() const {
  return _internal_has_access();
}
inline void UpdateProjectRequest::clear_access() {
  _impl_.access_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::gooseai::ProjectAccess UpdateProjectRequest::_internal_access() const {
  return static_cast< ::gooseai::ProjectAccess >(_impl_.access_);
}
inline ::gooseai::ProjectAccess UpdateProjectRequest::access() const {
  // @@protoc_insertion_point(field_get:gooseai.UpdateProjectRequest.access)
  return _internal_access();
}
inline void UpdateProjectRequest::_internal_set_access(::gooseai::ProjectAccess value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.access_ = value;
}
inline void UpdateProjectRequest::set_access(::gooseai::ProjectAccess value) {
  _internal_set_access(value);
  // @@protoc_insertion_point(field_set:gooseai.UpdateProjectRequest.access)
}

// optional .gooseai.ProjectStatus status = 5 [json_name = "status"];
inline bool UpdateProjectRequest::_internal_has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool UpdateProjectRequest::has_status() const {
  return _internal_has_status();
}
inline void UpdateProjectRequest::clear_status() {
  _impl_.status_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::gooseai::ProjectStatus UpdateProjectRequest::_internal_status() const {
  return static_cast< ::gooseai::ProjectStatus >(_impl_.status_);
}
inline ::gooseai::ProjectStatus UpdateProjectRequest::status() const {
  // @@protoc_insertion_point(field_get:gooseai.UpdateProjectRequest.status)
  return _internal_status();
}
inline void UpdateProjectRequest::_internal_set_status(::gooseai::ProjectStatus value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.status_ = value;
}
inline void UpdateProjectRequest::set_status(::gooseai::ProjectStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:gooseai.UpdateProjectRequest.status)
}

// optional .gooseai.ProjectAsset file = 6 [json_name = "file"];
inline bool UpdateProjectRequest::_internal_has_file() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.file_ != nullptr);
  return value;
}
inline bool UpdateProjectRequest::has_file() const {
  return _internal_has_file();
}
inline void UpdateProjectRequest::clear_file() {
  if (_impl_.file_ != nullptr) _impl_.file_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::gooseai::ProjectAsset& UpdateProjectRequest::_internal_file() const {
  const ::gooseai::ProjectAsset* p = _impl_.file_;
  return p != nullptr ? *p : reinterpret_cast<const ::gooseai::ProjectAsset&>(
      ::gooseai::_ProjectAsset_default_instance_);
}
inline const ::gooseai::ProjectAsset& UpdateProjectRequest::file() const {
  // @@protoc_insertion_point(field_get:gooseai.UpdateProjectRequest.file)
  return _internal_file();
}
inline void UpdateProjectRequest::unsafe_arena_set_allocated_file(
    ::gooseai::ProjectAsset* file) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.file_);
  }
  _impl_.file_ = file;
  if (file) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gooseai.UpdateProjectRequest.file)
}
inline ::gooseai::ProjectAsset* UpdateProjectRequest::release_file() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::gooseai::ProjectAsset* temp = _impl_.file_;
  _impl_.file_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gooseai::ProjectAsset* UpdateProjectRequest::unsafe_arena_release_file() {
  // @@protoc_insertion_point(field_release:gooseai.UpdateProjectRequest.file)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::gooseai::ProjectAsset* temp = _impl_.file_;
  _impl_.file_ = nullptr;
  return temp;
}
inline ::gooseai::ProjectAsset* UpdateProjectRequest::_internal_mutable_file() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.file_ == nullptr) {
    auto* p = CreateMaybeMessage<::gooseai::ProjectAsset>(GetArenaForAllocation());
    _impl_.file_ = p;
  }
  return _impl_.file_;
}
inline ::gooseai::ProjectAsset* UpdateProjectRequest::mutable_file() {
  ::gooseai::ProjectAsset* _msg = _internal_mutable_file();
  // @@protoc_insertion_point(field_mutable:gooseai.UpdateProjectRequest.file)
  return _msg;
}
inline void UpdateProjectRequest::set_allocated_file(::gooseai::ProjectAsset* file) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.file_;
  }
  if (file) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(file);
    if (message_arena != submessage_arena) {
      file = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, file, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.file_ = file;
  // @@protoc_insertion_point(field_set_allocated:gooseai.UpdateProjectRequest.file)
}

// -------------------------------------------------------------------

// ListProjectRequest

// optional string owner_id = 1 [json_name = "ownerId"];
inline bool ListProjectRequest::_internal_has_owner_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ListProjectRequest::has_owner_id() const {
  return _internal_has_owner_id();
}
inline void ListProjectRequest::clear_owner_id() {
  _impl_.owner_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ListProjectRequest::owner_id() const {
  // @@protoc_insertion_point(field_get:gooseai.ListProjectRequest.owner_id)
  return _internal_owner_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListProjectRequest::set_owner_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.owner_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gooseai.ListProjectRequest.owner_id)
}
inline std::string* ListProjectRequest::mutable_owner_id() {
  std::string* _s = _internal_mutable_owner_id();
  // @@protoc_insertion_point(field_mutable:gooseai.ListProjectRequest.owner_id)
  return _s;
}
inline const std::string& ListProjectRequest::_internal_owner_id() const {
  return _impl_.owner_id_.Get();
}
inline void ListProjectRequest::_internal_set_owner_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.owner_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ListProjectRequest::_internal_mutable_owner_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.owner_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ListProjectRequest::release_owner_id() {
  // @@protoc_insertion_point(field_release:gooseai.ListProjectRequest.owner_id)
  if (!_internal_has_owner_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.owner_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.owner_id_.IsDefault()) {
    _impl_.owner_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ListProjectRequest::set_allocated_owner_id(std::string* owner_id) {
  if (owner_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.owner_id_.SetAllocated(owner_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.owner_id_.IsDefault()) {
    _impl_.owner_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gooseai.ListProjectRequest.owner_id)
}

// -------------------------------------------------------------------

// GetProjectRequest

// string id = 1 [json_name = "id"];
inline void GetProjectRequest::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& GetProjectRequest::id() const {
  // @@protoc_insertion_point(field_get:gooseai.GetProjectRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetProjectRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gooseai.GetProjectRequest.id)
}
inline std::string* GetProjectRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:gooseai.GetProjectRequest.id)
  return _s;
}
inline const std::string& GetProjectRequest::_internal_id() const {
  return _impl_.id_.Get();
}
inline void GetProjectRequest::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetProjectRequest::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetProjectRequest::release_id() {
  // @@protoc_insertion_point(field_release:gooseai.GetProjectRequest.id)
  return _impl_.id_.Release();
}
inline void GetProjectRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gooseai.GetProjectRequest.id)
}

// optional string owner_id = 2 [json_name = "ownerId"];
inline bool GetProjectRequest::_internal_has_owner_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetProjectRequest::has_owner_id() const {
  return _internal_has_owner_id();
}
inline void GetProjectRequest::clear_owner_id() {
  _impl_.owner_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetProjectRequest::owner_id() const {
  // @@protoc_insertion_point(field_get:gooseai.GetProjectRequest.owner_id)
  return _internal_owner_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetProjectRequest::set_owner_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.owner_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gooseai.GetProjectRequest.owner_id)
}
inline std::string* GetProjectRequest::mutable_owner_id() {
  std::string* _s = _internal_mutable_owner_id();
  // @@protoc_insertion_point(field_mutable:gooseai.GetProjectRequest.owner_id)
  return _s;
}
inline const std::string& GetProjectRequest::_internal_owner_id() const {
  return _impl_.owner_id_.Get();
}
inline void GetProjectRequest::_internal_set_owner_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.owner_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetProjectRequest::_internal_mutable_owner_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.owner_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetProjectRequest::release_owner_id() {
  // @@protoc_insertion_point(field_release:gooseai.GetProjectRequest.owner_id)
  if (!_internal_has_owner_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.owner_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.owner_id_.IsDefault()) {
    _impl_.owner_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GetProjectRequest::set_allocated_owner_id(std::string* owner_id) {
  if (owner_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.owner_id_.SetAllocated(owner_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.owner_id_.IsDefault()) {
    _impl_.owner_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gooseai.GetProjectRequest.owner_id)
}

// -------------------------------------------------------------------

// DeleteProjectRequest

// string id = 1 [json_name = "id"];
inline void DeleteProjectRequest::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& DeleteProjectRequest::id() const {
  // @@protoc_insertion_point(field_get:gooseai.DeleteProjectRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteProjectRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gooseai.DeleteProjectRequest.id)
}
inline std::string* DeleteProjectRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:gooseai.DeleteProjectRequest.id)
  return _s;
}
inline const std::string& DeleteProjectRequest::_internal_id() const {
  return _impl_.id_.Get();
}
inline void DeleteProjectRequest::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteProjectRequest::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteProjectRequest::release_id() {
  // @@protoc_insertion_point(field_release:gooseai.DeleteProjectRequest.id)
  return _impl_.id_.Release();
}
inline void DeleteProjectRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gooseai.DeleteProjectRequest.id)
}

// optional string owner_id = 2 [json_name = "ownerId"];
inline bool DeleteProjectRequest::_internal_has_owner_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeleteProjectRequest::has_owner_id() const {
  return _internal_has_owner_id();
}
inline void DeleteProjectRequest::clear_owner_id() {
  _impl_.owner_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DeleteProjectRequest::owner_id() const {
  // @@protoc_insertion_point(field_get:gooseai.DeleteProjectRequest.owner_id)
  return _internal_owner_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteProjectRequest::set_owner_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.owner_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gooseai.DeleteProjectRequest.owner_id)
}
inline std::string* DeleteProjectRequest::mutable_owner_id() {
  std::string* _s = _internal_mutable_owner_id();
  // @@protoc_insertion_point(field_mutable:gooseai.DeleteProjectRequest.owner_id)
  return _s;
}
inline const std::string& DeleteProjectRequest::_internal_owner_id() const {
  return _impl_.owner_id_.Get();
}
inline void DeleteProjectRequest::_internal_set_owner_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.owner_id_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteProjectRequest::_internal_mutable_owner_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.owner_id_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteProjectRequest::release_owner_id() {
  // @@protoc_insertion_point(field_release:gooseai.DeleteProjectRequest.owner_id)
  if (!_internal_has_owner_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.owner_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.owner_id_.IsDefault()) {
    _impl_.owner_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DeleteProjectRequest::set_allocated_owner_id(std::string* owner_id) {
  if (owner_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.owner_id_.SetAllocated(owner_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.owner_id_.IsDefault()) {
    _impl_.owner_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gooseai.DeleteProjectRequest.owner_id)
}

// -------------------------------------------------------------------

// QueryAssetsRequest

// string id = 1 [json_name = "id"];
inline void QueryAssetsRequest::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& QueryAssetsRequest::id() const {
  // @@protoc_insertion_point(field_get:gooseai.QueryAssetsRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QueryAssetsRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gooseai.QueryAssetsRequest.id)
}
inline std::string* QueryAssetsRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:gooseai.QueryAssetsRequest.id)
  return _s;
}
inline const std::string& QueryAssetsRequest::_internal_id() const {
  return _impl_.id_.Get();
}
inline void QueryAssetsRequest::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryAssetsRequest::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* QueryAssetsRequest::release_id() {
  // @@protoc_insertion_point(field_release:gooseai.QueryAssetsRequest.id)
  return _impl_.id_.Release();
}
inline void QueryAssetsRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gooseai.QueryAssetsRequest.id)
}

// optional string owner_id = 2 [json_name = "ownerId"];
inline bool QueryAssetsRequest::_internal_has_owner_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool QueryAssetsRequest::has_owner_id() const {
  return _internal_has_owner_id();
}
inline void QueryAssetsRequest::clear_owner_id() {
  _impl_.owner_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& QueryAssetsRequest::owner_id() const {
  // @@protoc_insertion_point(field_get:gooseai.QueryAssetsRequest.owner_id)
  return _internal_owner_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QueryAssetsRequest::set_owner_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.owner_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gooseai.QueryAssetsRequest.owner_id)
}
inline std::string* QueryAssetsRequest::mutable_owner_id() {
  std::string* _s = _internal_mutable_owner_id();
  // @@protoc_insertion_point(field_mutable:gooseai.QueryAssetsRequest.owner_id)
  return _s;
}
inline const std::string& QueryAssetsRequest::_internal_owner_id() const {
  return _impl_.owner_id_.Get();
}
inline void QueryAssetsRequest::_internal_set_owner_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.owner_id_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryAssetsRequest::_internal_mutable_owner_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.owner_id_.Mutable(GetArenaForAllocation());
}
inline std::string* QueryAssetsRequest::release_owner_id() {
  // @@protoc_insertion_point(field_release:gooseai.QueryAssetsRequest.owner_id)
  if (!_internal_has_owner_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.owner_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.owner_id_.IsDefault()) {
    _impl_.owner_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void QueryAssetsRequest::set_allocated_owner_id(std::string* owner_id) {
  if (owner_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.owner_id_.SetAllocated(owner_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.owner_id_.IsDefault()) {
    _impl_.owner_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gooseai.QueryAssetsRequest.owner_id)
}

// optional uint64 since = 3 [json_name = "since"];
inline bool QueryAssetsRequest::_internal_has_since() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool QueryAssetsRequest::has_since() const {
  return _internal_has_since();
}
inline void QueryAssetsRequest::clear_since() {
  _impl_.since_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t QueryAssetsRequest::_internal_since() const {
  return _impl_.since_;
}
inline uint64_t QueryAssetsRequest::since() const {
  // @@protoc_insertion_point(field_get:gooseai.QueryAssetsRequest.since)
  return _internal_since();
}
inline void QueryAssetsRequest::_internal_set_since(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.since_ = value;
}
inline void QueryAssetsRequest::set_since(uint64_t value) {
  _internal_set_since(value);
  // @@protoc_insertion_point(field_set:gooseai.QueryAssetsRequest.since)
}

// optional uint64 until = 4 [json_name = "until"];
inline bool QueryAssetsRequest::_internal_has_until() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool QueryAssetsRequest::has_until() const {
  return _internal_has_until();
}
inline void QueryAssetsRequest::clear_until() {
  _impl_.until_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint64_t QueryAssetsRequest::_internal_until() const {
  return _impl_.until_;
}
inline uint64_t QueryAssetsRequest::until() const {
  // @@protoc_insertion_point(field_get:gooseai.QueryAssetsRequest.until)
  return _internal_until();
}
inline void QueryAssetsRequest::_internal_set_until(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.until_ = value;
}
inline void QueryAssetsRequest::set_until(uint64_t value) {
  _internal_set_until(value);
  // @@protoc_insertion_point(field_set:gooseai.QueryAssetsRequest.until)
}

// optional uint64 limit = 5 [json_name = "limit"];
inline bool QueryAssetsRequest::_internal_has_limit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool QueryAssetsRequest::has_limit() const {
  return _internal_has_limit();
}
inline void QueryAssetsRequest::clear_limit() {
  _impl_.limit_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint64_t QueryAssetsRequest::_internal_limit() const {
  return _impl_.limit_;
}
inline uint64_t QueryAssetsRequest::limit() const {
  // @@protoc_insertion_point(field_get:gooseai.QueryAssetsRequest.limit)
  return _internal_limit();
}
inline void QueryAssetsRequest::_internal_set_limit(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.limit_ = value;
}
inline void QueryAssetsRequest::set_limit(uint64_t value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:gooseai.QueryAssetsRequest.limit)
}

// optional string start_key = 6 [json_name = "startKey"];
inline bool QueryAssetsRequest::_internal_has_start_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool QueryAssetsRequest::has_start_key() const {
  return _internal_has_start_key();
}
inline void QueryAssetsRequest::clear_start_key() {
  _impl_.start_key_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& QueryAssetsRequest::start_key() const {
  // @@protoc_insertion_point(field_get:gooseai.QueryAssetsRequest.start_key)
  return _internal_start_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QueryAssetsRequest::set_start_key(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.start_key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gooseai.QueryAssetsRequest.start_key)
}
inline std::string* QueryAssetsRequest::mutable_start_key() {
  std::string* _s = _internal_mutable_start_key();
  // @@protoc_insertion_point(field_mutable:gooseai.QueryAssetsRequest.start_key)
  return _s;
}
inline const std::string& QueryAssetsRequest::_internal_start_key() const {
  return _impl_.start_key_.Get();
}
inline void QueryAssetsRequest::_internal_set_start_key(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.start_key_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryAssetsRequest::_internal_mutable_start_key() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.start_key_.Mutable(GetArenaForAllocation());
}
inline std::string* QueryAssetsRequest::release_start_key() {
  // @@protoc_insertion_point(field_release:gooseai.QueryAssetsRequest.start_key)
  if (!_internal_has_start_key()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.start_key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.start_key_.IsDefault()) {
    _impl_.start_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void QueryAssetsRequest::set_allocated_start_key(std::string* start_key) {
  if (start_key != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.start_key_.SetAllocated(start_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.start_key_.IsDefault()) {
    _impl_.start_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gooseai.QueryAssetsRequest.start_key)
}

// repeated .gooseai.ProjectAssetUse use = 7 [json_name = "use"];
inline int QueryAssetsRequest::_internal_use_size() const {
  return _impl_.use_.size();
}
inline int QueryAssetsRequest::use_size() const {
  return _internal_use_size();
}
inline void QueryAssetsRequest::clear_use() {
  _impl_.use_.Clear();
}
inline ::gooseai::ProjectAssetUse QueryAssetsRequest::_internal_use(int index) const {
  return static_cast< ::gooseai::ProjectAssetUse >(_impl_.use_.Get(index));
}
inline ::gooseai::ProjectAssetUse QueryAssetsRequest::use(int index) const {
  // @@protoc_insertion_point(field_get:gooseai.QueryAssetsRequest.use)
  return _internal_use(index);
}
inline void QueryAssetsRequest::set_use(int index, ::gooseai::ProjectAssetUse value) {
  _impl_.use_.Set(index, value);
  // @@protoc_insertion_point(field_set:gooseai.QueryAssetsRequest.use)
}
inline void QueryAssetsRequest::_internal_add_use(::gooseai::ProjectAssetUse value) {
  _impl_.use_.Add(value);
}
inline void QueryAssetsRequest::add_use(::gooseai::ProjectAssetUse value) {
  _internal_add_use(value);
  // @@protoc_insertion_point(field_add:gooseai.QueryAssetsRequest.use)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
QueryAssetsRequest::use() const {
  // @@protoc_insertion_point(field_list:gooseai.QueryAssetsRequest.use)
  return _impl_.use_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
QueryAssetsRequest::_internal_mutable_use() {
  return &_impl_.use_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
QueryAssetsRequest::mutable_use() {
  // @@protoc_insertion_point(field_mutable_list:gooseai.QueryAssetsRequest.use)
  return _internal_mutable_use();
}

// .gooseai.ProjectSortDir sort_dir = 8 [json_name = "sortDir"];
inline void QueryAssetsRequest::clear_sort_dir() {
  _impl_.sort_dir_ = 0;
}
inline ::gooseai::ProjectSortDir QueryAssetsRequest::_internal_sort_dir() const {
  return static_cast< ::gooseai::ProjectSortDir >(_impl_.sort_dir_);
}
inline ::gooseai::ProjectSortDir QueryAssetsRequest::sort_dir() const {
  // @@protoc_insertion_point(field_get:gooseai.QueryAssetsRequest.sort_dir)
  return _internal_sort_dir();
}
inline void QueryAssetsRequest::_internal_set_sort_dir(::gooseai::ProjectSortDir value) {
  
  _impl_.sort_dir_ = value;
}
inline void QueryAssetsRequest::set_sort_dir(::gooseai::ProjectSortDir value) {
  _internal_set_sort_dir(value);
  // @@protoc_insertion_point(field_set:gooseai.QueryAssetsRequest.sort_dir)
}

// -------------------------------------------------------------------

// QueryAssetsResponse

// repeated .gooseai.ProjectAsset assets = 1 [json_name = "assets"];
inline int QueryAssetsResponse::_internal_assets_size() const {
  return _impl_.assets_.size();
}
inline int QueryAssetsResponse::assets_size() const {
  return _internal_assets_size();
}
inline void QueryAssetsResponse::clear_assets() {
  _impl_.assets_.Clear();
}
inline ::gooseai::ProjectAsset* QueryAssetsResponse::mutable_assets(int index) {
  // @@protoc_insertion_point(field_mutable:gooseai.QueryAssetsResponse.assets)
  return _impl_.assets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gooseai::ProjectAsset >*
QueryAssetsResponse::mutable_assets() {
  // @@protoc_insertion_point(field_mutable_list:gooseai.QueryAssetsResponse.assets)
  return &_impl_.assets_;
}
inline const ::gooseai::ProjectAsset& QueryAssetsResponse::_internal_assets(int index) const {
  return _impl_.assets_.Get(index);
}
inline const ::gooseai::ProjectAsset& QueryAssetsResponse::assets(int index) const {
  // @@protoc_insertion_point(field_get:gooseai.QueryAssetsResponse.assets)
  return _internal_assets(index);
}
inline ::gooseai::ProjectAsset* QueryAssetsResponse::_internal_add_assets() {
  return _impl_.assets_.Add();
}
inline ::gooseai::ProjectAsset* QueryAssetsResponse::add_assets() {
  ::gooseai::ProjectAsset* _add = _internal_add_assets();
  // @@protoc_insertion_point(field_add:gooseai.QueryAssetsResponse.assets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gooseai::ProjectAsset >&
QueryAssetsResponse::assets() const {
  // @@protoc_insertion_point(field_list:gooseai.QueryAssetsResponse.assets)
  return _impl_.assets_;
}

// optional string last_key = 2 [json_name = "lastKey"];
inline bool QueryAssetsResponse::_internal_has_last_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool QueryAssetsResponse::has_last_key() const {
  return _internal_has_last_key();
}
inline void QueryAssetsResponse::clear_last_key() {
  _impl_.last_key_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& QueryAssetsResponse::last_key() const {
  // @@protoc_insertion_point(field_get:gooseai.QueryAssetsResponse.last_key)
  return _internal_last_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QueryAssetsResponse::set_last_key(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.last_key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gooseai.QueryAssetsResponse.last_key)
}
inline std::string* QueryAssetsResponse::mutable_last_key() {
  std::string* _s = _internal_mutable_last_key();
  // @@protoc_insertion_point(field_mutable:gooseai.QueryAssetsResponse.last_key)
  return _s;
}
inline const std::string& QueryAssetsResponse::_internal_last_key() const {
  return _impl_.last_key_.Get();
}
inline void QueryAssetsResponse::_internal_set_last_key(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.last_key_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryAssetsResponse::_internal_mutable_last_key() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.last_key_.Mutable(GetArenaForAllocation());
}
inline std::string* QueryAssetsResponse::release_last_key() {
  // @@protoc_insertion_point(field_release:gooseai.QueryAssetsResponse.last_key)
  if (!_internal_has_last_key()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.last_key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.last_key_.IsDefault()) {
    _impl_.last_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void QueryAssetsResponse::set_allocated_last_key(std::string* last_key) {
  if (last_key != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.last_key_.SetAllocated(last_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.last_key_.IsDefault()) {
    _impl_.last_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gooseai.QueryAssetsResponse.last_key)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gooseai

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::gooseai::ProjectAccess> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gooseai::ProjectAccess>() {
  return ::gooseai::ProjectAccess_descriptor();
}
template <> struct is_proto_enum< ::gooseai::ProjectStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gooseai::ProjectStatus>() {
  return ::gooseai::ProjectStatus_descriptor();
}
template <> struct is_proto_enum< ::gooseai::ProjectAssetUse> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gooseai::ProjectAssetUse>() {
  return ::gooseai::ProjectAssetUse_descriptor();
}
template <> struct is_proto_enum< ::gooseai::ProjectSortDir> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gooseai::ProjectSortDir>() {
  return ::gooseai::ProjectSortDir_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_project_2eproto
