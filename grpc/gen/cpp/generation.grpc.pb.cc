// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: generation.proto

#include "generation.pb.h"
#include "generation.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace gooseai {

static const char* GenerationService_method_names[] = {
  "/gooseai.GenerationService/Generate",
  "/gooseai.GenerationService/ChainGenerate",
};

std::unique_ptr< GenerationService::Stub> GenerationService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< GenerationService::Stub> stub(new GenerationService::Stub(channel, options));
  return stub;
}

GenerationService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Generate_(GenerationService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ChainGenerate_(GenerationService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::gooseai::Answer>* GenerationService::Stub::GenerateRaw(::grpc::ClientContext* context, const ::gooseai::Request& request) {
  return ::grpc::internal::ClientReaderFactory< ::gooseai::Answer>::Create(channel_.get(), rpcmethod_Generate_, context, request);
}

void GenerationService::Stub::async::Generate(::grpc::ClientContext* context, const ::gooseai::Request* request, ::grpc::ClientReadReactor< ::gooseai::Answer>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::gooseai::Answer>::Create(stub_->channel_.get(), stub_->rpcmethod_Generate_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::gooseai::Answer>* GenerationService::Stub::AsyncGenerateRaw(::grpc::ClientContext* context, const ::gooseai::Request& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::gooseai::Answer>::Create(channel_.get(), cq, rpcmethod_Generate_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::gooseai::Answer>* GenerationService::Stub::PrepareAsyncGenerateRaw(::grpc::ClientContext* context, const ::gooseai::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::gooseai::Answer>::Create(channel_.get(), cq, rpcmethod_Generate_, context, request, false, nullptr);
}

::grpc::ClientReader< ::gooseai::Answer>* GenerationService::Stub::ChainGenerateRaw(::grpc::ClientContext* context, const ::gooseai::ChainRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::gooseai::Answer>::Create(channel_.get(), rpcmethod_ChainGenerate_, context, request);
}

void GenerationService::Stub::async::ChainGenerate(::grpc::ClientContext* context, const ::gooseai::ChainRequest* request, ::grpc::ClientReadReactor< ::gooseai::Answer>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::gooseai::Answer>::Create(stub_->channel_.get(), stub_->rpcmethod_ChainGenerate_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::gooseai::Answer>* GenerationService::Stub::AsyncChainGenerateRaw(::grpc::ClientContext* context, const ::gooseai::ChainRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::gooseai::Answer>::Create(channel_.get(), cq, rpcmethod_ChainGenerate_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::gooseai::Answer>* GenerationService::Stub::PrepareAsyncChainGenerateRaw(::grpc::ClientContext* context, const ::gooseai::ChainRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::gooseai::Answer>::Create(channel_.get(), cq, rpcmethod_ChainGenerate_, context, request, false, nullptr);
}

GenerationService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GenerationService_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< GenerationService::Service, ::gooseai::Request, ::gooseai::Answer>(
          [](GenerationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gooseai::Request* req,
             ::grpc::ServerWriter<::gooseai::Answer>* writer) {
               return service->Generate(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GenerationService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< GenerationService::Service, ::gooseai::ChainRequest, ::gooseai::Answer>(
          [](GenerationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gooseai::ChainRequest* req,
             ::grpc::ServerWriter<::gooseai::Answer>* writer) {
               return service->ChainGenerate(ctx, req, writer);
             }, this)));
}

GenerationService::Service::~Service() {
}

::grpc::Status GenerationService::Service::Generate(::grpc::ServerContext* context, const ::gooseai::Request* request, ::grpc::ServerWriter< ::gooseai::Answer>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GenerationService::Service::ChainGenerate(::grpc::ServerContext* context, const ::gooseai::ChainRequest* request, ::grpc::ServerWriter< ::gooseai::Answer>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace gooseai

