// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensors.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensors_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tensors_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tensors_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tensors_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensors_2eproto;
namespace tensors {
class Attribute;
struct AttributeDefaultTypeInternal;
extern AttributeDefaultTypeInternal _Attribute_default_instance_;
class Module;
struct ModuleDefaultTypeInternal;
extern ModuleDefaultTypeInternal _Module_default_instance_;
class Tensor;
struct TensorDefaultTypeInternal;
extern TensorDefaultTypeInternal _Tensor_default_instance_;
}  // namespace tensors
PROTOBUF_NAMESPACE_OPEN
template<> ::tensors::Attribute* Arena::CreateMaybeMessage<::tensors::Attribute>(Arena*);
template<> ::tensors::Module* Arena::CreateMaybeMessage<::tensors::Module>(Arena*);
template<> ::tensors::Tensor* Arena::CreateMaybeMessage<::tensors::Tensor>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tensors {

enum Dtype : int {
  DT_INVALID = 0,
  DT_FLOAT32 = 1,
  DT_FLOAT64 = 2,
  DT_FLOAT16 = 3,
  DT_BFLOAT16 = 4,
  DT_COMPLEX32 = 5,
  DT_COMPLEX64 = 6,
  DT_COMPLEX128 = 7,
  DT_UINT8 = 8,
  DT_INT8 = 9,
  DT_INT16 = 10,
  DT_INT32 = 11,
  DT_INT64 = 12,
  DT_BOOL = 13,
  DT_QUINT8 = 14,
  DT_QINT8 = 15,
  DT_QINT32 = 16,
  DT_QUINT4_2 = 17,
  Dtype_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Dtype_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Dtype_IsValid(int value);
constexpr Dtype Dtype_MIN = DT_INVALID;
constexpr Dtype Dtype_MAX = DT_QUINT4_2;
constexpr int Dtype_ARRAYSIZE = Dtype_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Dtype_descriptor();
template<typename T>
inline const std::string& Dtype_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Dtype>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Dtype_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Dtype_descriptor(), enum_t_value);
}
inline bool Dtype_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Dtype* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Dtype>(
    Dtype_descriptor(), name, value);
}
enum AttributeType : int {
  AT_PARAMETER = 0,
  AT_BUFFER = 1,
  AttributeType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  AttributeType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool AttributeType_IsValid(int value);
constexpr AttributeType AttributeType_MIN = AT_PARAMETER;
constexpr AttributeType AttributeType_MAX = AT_BUFFER;
constexpr int AttributeType_ARRAYSIZE = AttributeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AttributeType_descriptor();
template<typename T>
inline const std::string& AttributeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AttributeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AttributeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AttributeType_descriptor(), enum_t_value);
}
inline bool AttributeType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AttributeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AttributeType>(
    AttributeType_descriptor(), name, value);
}
// ===================================================================

class Tensor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensors.Tensor) */ {
 public:
  inline Tensor() : Tensor(nullptr) {}
  ~Tensor() override;
  explicit PROTOBUF_CONSTEXPR Tensor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Tensor(const Tensor& from);
  Tensor(Tensor&& from) noexcept
    : Tensor() {
    *this = ::std::move(from);
  }

  inline Tensor& operator=(const Tensor& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tensor& operator=(Tensor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Tensor& default_instance() {
    return *internal_default_instance();
  }
  static inline const Tensor* internal_default_instance() {
    return reinterpret_cast<const Tensor*>(
               &_Tensor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Tensor& a, Tensor& b) {
    a.Swap(&b);
  }
  inline void Swap(Tensor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Tensor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Tensor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Tensor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Tensor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Tensor& from) {
    Tensor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tensor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensors.Tensor";
  }
  protected:
  explicit Tensor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShapeFieldNumber = 2,
    kDataFieldNumber = 3,
    kDtypeFieldNumber = 1,
    kAttrTypeFieldNumber = 4,
  };
  // repeated int64 shape = 2 [json_name = "shape"];
  int shape_size() const;
  private:
  int _internal_shape_size() const;
  public:
  void clear_shape();
  private:
  int64_t _internal_shape(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_shape() const;
  void _internal_add_shape(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_shape();
  public:
  int64_t shape(int index) const;
  void set_shape(int index, int64_t value);
  void add_shape(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      shape() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_shape();

  // bytes data = 3 [json_name = "data"];
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .tensors.Dtype dtype = 1 [json_name = "dtype"];
  void clear_dtype();
  ::tensors::Dtype dtype() const;
  void set_dtype(::tensors::Dtype value);
  private:
  ::tensors::Dtype _internal_dtype() const;
  void _internal_set_dtype(::tensors::Dtype value);
  public:

  // optional .tensors.AttributeType attr_type = 4 [json_name = "attrType"];
  bool has_attr_type() const;
  private:
  bool _internal_has_attr_type() const;
  public:
  void clear_attr_type();
  ::tensors::AttributeType attr_type() const;
  void set_attr_type(::tensors::AttributeType value);
  private:
  ::tensors::AttributeType _internal_attr_type() const;
  void _internal_set_attr_type(::tensors::AttributeType value);
  public:

  // @@protoc_insertion_point(class_scope:tensors.Tensor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > shape_;
    mutable std::atomic<int> _shape_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    int dtype_;
    int attr_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensors_2eproto;
};
// -------------------------------------------------------------------

class Attribute final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensors.Attribute) */ {
 public:
  inline Attribute() : Attribute(nullptr) {}
  ~Attribute() override;
  explicit PROTOBUF_CONSTEXPR Attribute(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Attribute(const Attribute& from);
  Attribute(Attribute&& from) noexcept
    : Attribute() {
    *this = ::std::move(from);
  }

  inline Attribute& operator=(const Attribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline Attribute& operator=(Attribute&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Attribute& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kModule = 3,
    kTensor = 4,
    kString = 5,
    kInt64 = 6,
    kFloat = 7,
    kBool = 8,
    VALUE_NOT_SET = 0,
  };

  static inline const Attribute* internal_default_instance() {
    return reinterpret_cast<const Attribute*>(
               &_Attribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Attribute& a, Attribute& b) {
    a.Swap(&b);
  }
  inline void Swap(Attribute* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Attribute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Attribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Attribute>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Attribute& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Attribute& from) {
    Attribute::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Attribute* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensors.Attribute";
  }
  protected:
  explicit Attribute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kModuleFieldNumber = 3,
    kTensorFieldNumber = 4,
    kStringFieldNumber = 5,
    kInt64FieldNumber = 6,
    kFloatFieldNumber = 7,
    kBoolFieldNumber = 8,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .tensors.Module module = 3 [json_name = "module"];
  bool has_module() const;
  private:
  bool _internal_has_module() const;
  public:
  void clear_module();
  const ::tensors::Module& module() const;
  PROTOBUF_NODISCARD ::tensors::Module* release_module();
  ::tensors::Module* mutable_module();
  void set_allocated_module(::tensors::Module* module);
  private:
  const ::tensors::Module& _internal_module() const;
  ::tensors::Module* _internal_mutable_module();
  public:
  void unsafe_arena_set_allocated_module(
      ::tensors::Module* module);
  ::tensors::Module* unsafe_arena_release_module();

  // .tensors.Tensor tensor = 4 [json_name = "tensor"];
  bool has_tensor() const;
  private:
  bool _internal_has_tensor() const;
  public:
  void clear_tensor();
  const ::tensors::Tensor& tensor() const;
  PROTOBUF_NODISCARD ::tensors::Tensor* release_tensor();
  ::tensors::Tensor* mutable_tensor();
  void set_allocated_tensor(::tensors::Tensor* tensor);
  private:
  const ::tensors::Tensor& _internal_tensor() const;
  ::tensors::Tensor* _internal_mutable_tensor();
  public:
  void unsafe_arena_set_allocated_tensor(
      ::tensors::Tensor* tensor);
  ::tensors::Tensor* unsafe_arena_release_tensor();

  // string string = 5 [json_name = "string"];
  bool has_string() const;
  private:
  bool _internal_has_string() const;
  public:
  void clear_string();
  const std::string& string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string();
  PROTOBUF_NODISCARD std::string* release_string();
  void set_allocated_string(std::string* string);
  private:
  const std::string& _internal_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string(const std::string& value);
  std::string* _internal_mutable_string();
  public:

  // int64 int64 = 6 [json_name = "int64"];
  bool has_int64() const;
  private:
  bool _internal_has_int64() const;
  public:
  void clear_int64();
  int64_t int64() const;
  void set_int64(int64_t value);
  private:
  int64_t _internal_int64() const;
  void _internal_set_int64(int64_t value);
  public:

  // float float = 7 [json_name = "float"];
  bool has_float_() const;
  private:
  bool _internal_has_float_() const;
  public:
  void clear_float_();
  float float_() const;
  void set_float_(float value);
  private:
  float _internal_float_() const;
  void _internal_set_float_(float value);
  public:

  // bool bool = 8 [json_name = "bool"];
  bool has_bool_() const;
  private:
  bool _internal_has_bool_() const;
  public:
  void clear_bool_();
  bool bool_() const;
  void set_bool_(bool value);
  private:
  bool _internal_bool_() const;
  void _internal_set_bool_(bool value);
  public:

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:tensors.Attribute)
 private:
  class _Internal;
  void set_has_module();
  void set_has_tensor();
  void set_has_string();
  void set_has_int64();
  void set_has_float_();
  void set_has_bool_();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::tensors::Module* module_;
      ::tensors::Tensor* tensor_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_;
      int64_t int64_;
      float float__;
      bool bool__;
    } value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensors_2eproto;
};
// -------------------------------------------------------------------

class Module final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensors.Module) */ {
 public:
  inline Module() : Module(nullptr) {}
  ~Module() override;
  explicit PROTOBUF_CONSTEXPR Module(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Module(const Module& from);
  Module(Module&& from) noexcept
    : Module() {
    *this = ::std::move(from);
  }

  inline Module& operator=(const Module& from) {
    CopyFrom(from);
    return *this;
  }
  inline Module& operator=(Module&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Module& default_instance() {
    return *internal_default_instance();
  }
  static inline const Module* internal_default_instance() {
    return reinterpret_cast<const Module*>(
               &_Module_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Module& a, Module& b) {
    a.Swap(&b);
  }
  inline void Swap(Module* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Module* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Module* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Module>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Module& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Module& from) {
    Module::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Module* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensors.Module";
  }
  protected:
  explicit Module(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamesFieldNumber = 2,
    kAttributesFieldNumber = 3,
    kNameFieldNumber = 1,
  };
  // repeated string names = 2 [json_name = "names"];
  int names_size() const;
  private:
  int _internal_names_size() const;
  public:
  void clear_names();
  const std::string& names(int index) const;
  std::string* mutable_names(int index);
  void set_names(int index, const std::string& value);
  void set_names(int index, std::string&& value);
  void set_names(int index, const char* value);
  void set_names(int index, const char* value, size_t size);
  std::string* add_names();
  void add_names(const std::string& value);
  void add_names(std::string&& value);
  void add_names(const char* value);
  void add_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_names();
  private:
  const std::string& _internal_names(int index) const;
  std::string* _internal_add_names();
  public:

  // repeated .tensors.Attribute attributes = 3 [json_name = "attributes"];
  int attributes_size() const;
  private:
  int _internal_attributes_size() const;
  public:
  void clear_attributes();
  ::tensors::Attribute* mutable_attributes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensors::Attribute >*
      mutable_attributes();
  private:
  const ::tensors::Attribute& _internal_attributes(int index) const;
  ::tensors::Attribute* _internal_add_attributes();
  public:
  const ::tensors::Attribute& attributes(int index) const;
  ::tensors::Attribute* add_attributes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensors::Attribute >&
      attributes() const;

  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:tensors.Module)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> names_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensors::Attribute > attributes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensors_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Tensor

// .tensors.Dtype dtype = 1 [json_name = "dtype"];
inline void Tensor::clear_dtype() {
  _impl_.dtype_ = 0;
}
inline ::tensors::Dtype Tensor::_internal_dtype() const {
  return static_cast< ::tensors::Dtype >(_impl_.dtype_);
}
inline ::tensors::Dtype Tensor::dtype() const {
  // @@protoc_insertion_point(field_get:tensors.Tensor.dtype)
  return _internal_dtype();
}
inline void Tensor::_internal_set_dtype(::tensors::Dtype value) {
  
  _impl_.dtype_ = value;
}
inline void Tensor::set_dtype(::tensors::Dtype value) {
  _internal_set_dtype(value);
  // @@protoc_insertion_point(field_set:tensors.Tensor.dtype)
}

// repeated int64 shape = 2 [json_name = "shape"];
inline int Tensor::_internal_shape_size() const {
  return _impl_.shape_.size();
}
inline int Tensor::shape_size() const {
  return _internal_shape_size();
}
inline void Tensor::clear_shape() {
  _impl_.shape_.Clear();
}
inline int64_t Tensor::_internal_shape(int index) const {
  return _impl_.shape_.Get(index);
}
inline int64_t Tensor::shape(int index) const {
  // @@protoc_insertion_point(field_get:tensors.Tensor.shape)
  return _internal_shape(index);
}
inline void Tensor::set_shape(int index, int64_t value) {
  _impl_.shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensors.Tensor.shape)
}
inline void Tensor::_internal_add_shape(int64_t value) {
  _impl_.shape_.Add(value);
}
inline void Tensor::add_shape(int64_t value) {
  _internal_add_shape(value);
  // @@protoc_insertion_point(field_add:tensors.Tensor.shape)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
Tensor::_internal_shape() const {
  return _impl_.shape_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
Tensor::shape() const {
  // @@protoc_insertion_point(field_list:tensors.Tensor.shape)
  return _internal_shape();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
Tensor::_internal_mutable_shape() {
  return &_impl_.shape_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
Tensor::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:tensors.Tensor.shape)
  return _internal_mutable_shape();
}

// bytes data = 3 [json_name = "data"];
inline void Tensor::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& Tensor::data() const {
  // @@protoc_insertion_point(field_get:tensors.Tensor.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Tensor::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tensors.Tensor.data)
}
inline std::string* Tensor::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:tensors.Tensor.data)
  return _s;
}
inline const std::string& Tensor::_internal_data() const {
  return _impl_.data_.Get();
}
inline void Tensor::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* Tensor::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* Tensor::release_data() {
  // @@protoc_insertion_point(field_release:tensors.Tensor.data)
  return _impl_.data_.Release();
}
inline void Tensor::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensors.Tensor.data)
}

// optional .tensors.AttributeType attr_type = 4 [json_name = "attrType"];
inline bool Tensor::_internal_has_attr_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Tensor::has_attr_type() const {
  return _internal_has_attr_type();
}
inline void Tensor::clear_attr_type() {
  _impl_.attr_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::tensors::AttributeType Tensor::_internal_attr_type() const {
  return static_cast< ::tensors::AttributeType >(_impl_.attr_type_);
}
inline ::tensors::AttributeType Tensor::attr_type() const {
  // @@protoc_insertion_point(field_get:tensors.Tensor.attr_type)
  return _internal_attr_type();
}
inline void Tensor::_internal_set_attr_type(::tensors::AttributeType value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.attr_type_ = value;
}
inline void Tensor::set_attr_type(::tensors::AttributeType value) {
  _internal_set_attr_type(value);
  // @@protoc_insertion_point(field_set:tensors.Tensor.attr_type)
}

// -------------------------------------------------------------------

// Attribute

// string name = 1 [json_name = "name"];
inline void Attribute::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Attribute::name() const {
  // @@protoc_insertion_point(field_get:tensors.Attribute.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Attribute::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tensors.Attribute.name)
}
inline std::string* Attribute::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:tensors.Attribute.name)
  return _s;
}
inline const std::string& Attribute::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Attribute::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Attribute::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Attribute::release_name() {
  // @@protoc_insertion_point(field_release:tensors.Attribute.name)
  return _impl_.name_.Release();
}
inline void Attribute::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensors.Attribute.name)
}

// .tensors.Module module = 3 [json_name = "module"];
inline bool Attribute::_internal_has_module() const {
  return value_case() == kModule;
}
inline bool Attribute::has_module() const {
  return _internal_has_module();
}
inline void Attribute::set_has_module() {
  _impl_._oneof_case_[0] = kModule;
}
inline void Attribute::clear_module() {
  if (_internal_has_module()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.module_;
    }
    clear_has_value();
  }
}
inline ::tensors::Module* Attribute::release_module() {
  // @@protoc_insertion_point(field_release:tensors.Attribute.module)
  if (_internal_has_module()) {
    clear_has_value();
    ::tensors::Module* temp = _impl_.value_.module_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.module_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tensors::Module& Attribute::_internal_module() const {
  return _internal_has_module()
      ? *_impl_.value_.module_
      : reinterpret_cast< ::tensors::Module&>(::tensors::_Module_default_instance_);
}
inline const ::tensors::Module& Attribute::module() const {
  // @@protoc_insertion_point(field_get:tensors.Attribute.module)
  return _internal_module();
}
inline ::tensors::Module* Attribute::unsafe_arena_release_module() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensors.Attribute.module)
  if (_internal_has_module()) {
    clear_has_value();
    ::tensors::Module* temp = _impl_.value_.module_;
    _impl_.value_.module_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Attribute::unsafe_arena_set_allocated_module(::tensors::Module* module) {
  clear_value();
  if (module) {
    set_has_module();
    _impl_.value_.module_ = module;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensors.Attribute.module)
}
inline ::tensors::Module* Attribute::_internal_mutable_module() {
  if (!_internal_has_module()) {
    clear_value();
    set_has_module();
    _impl_.value_.module_ = CreateMaybeMessage< ::tensors::Module >(GetArenaForAllocation());
  }
  return _impl_.value_.module_;
}
inline ::tensors::Module* Attribute::mutable_module() {
  ::tensors::Module* _msg = _internal_mutable_module();
  // @@protoc_insertion_point(field_mutable:tensors.Attribute.module)
  return _msg;
}

// .tensors.Tensor tensor = 4 [json_name = "tensor"];
inline bool Attribute::_internal_has_tensor() const {
  return value_case() == kTensor;
}
inline bool Attribute::has_tensor() const {
  return _internal_has_tensor();
}
inline void Attribute::set_has_tensor() {
  _impl_._oneof_case_[0] = kTensor;
}
inline void Attribute::clear_tensor() {
  if (_internal_has_tensor()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.tensor_;
    }
    clear_has_value();
  }
}
inline ::tensors::Tensor* Attribute::release_tensor() {
  // @@protoc_insertion_point(field_release:tensors.Attribute.tensor)
  if (_internal_has_tensor()) {
    clear_has_value();
    ::tensors::Tensor* temp = _impl_.value_.tensor_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.tensor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tensors::Tensor& Attribute::_internal_tensor() const {
  return _internal_has_tensor()
      ? *_impl_.value_.tensor_
      : reinterpret_cast< ::tensors::Tensor&>(::tensors::_Tensor_default_instance_);
}
inline const ::tensors::Tensor& Attribute::tensor() const {
  // @@protoc_insertion_point(field_get:tensors.Attribute.tensor)
  return _internal_tensor();
}
inline ::tensors::Tensor* Attribute::unsafe_arena_release_tensor() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensors.Attribute.tensor)
  if (_internal_has_tensor()) {
    clear_has_value();
    ::tensors::Tensor* temp = _impl_.value_.tensor_;
    _impl_.value_.tensor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Attribute::unsafe_arena_set_allocated_tensor(::tensors::Tensor* tensor) {
  clear_value();
  if (tensor) {
    set_has_tensor();
    _impl_.value_.tensor_ = tensor;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensors.Attribute.tensor)
}
inline ::tensors::Tensor* Attribute::_internal_mutable_tensor() {
  if (!_internal_has_tensor()) {
    clear_value();
    set_has_tensor();
    _impl_.value_.tensor_ = CreateMaybeMessage< ::tensors::Tensor >(GetArenaForAllocation());
  }
  return _impl_.value_.tensor_;
}
inline ::tensors::Tensor* Attribute::mutable_tensor() {
  ::tensors::Tensor* _msg = _internal_mutable_tensor();
  // @@protoc_insertion_point(field_mutable:tensors.Attribute.tensor)
  return _msg;
}

// string string = 5 [json_name = "string"];
inline bool Attribute::_internal_has_string() const {
  return value_case() == kString;
}
inline bool Attribute::has_string() const {
  return _internal_has_string();
}
inline void Attribute::set_has_string() {
  _impl_._oneof_case_[0] = kString;
}
inline void Attribute::clear_string() {
  if (_internal_has_string()) {
    _impl_.value_.string_.Destroy();
    clear_has_value();
  }
}
inline const std::string& Attribute::string() const {
  // @@protoc_insertion_point(field_get:tensors.Attribute.string)
  return _internal_string();
}
template <typename ArgT0, typename... ArgT>
inline void Attribute::set_string(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_string()) {
    clear_value();
    set_has_string();
    _impl_.value_.string_.InitDefault();
  }
  _impl_.value_.string_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tensors.Attribute.string)
}
inline std::string* Attribute::mutable_string() {
  std::string* _s = _internal_mutable_string();
  // @@protoc_insertion_point(field_mutable:tensors.Attribute.string)
  return _s;
}
inline const std::string& Attribute::_internal_string() const {
  if (_internal_has_string()) {
    return _impl_.value_.string_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Attribute::_internal_set_string(const std::string& value) {
  if (!_internal_has_string()) {
    clear_value();
    set_has_string();
    _impl_.value_.string_.InitDefault();
  }
  _impl_.value_.string_.Set(value, GetArenaForAllocation());
}
inline std::string* Attribute::_internal_mutable_string() {
  if (!_internal_has_string()) {
    clear_value();
    set_has_string();
    _impl_.value_.string_.InitDefault();
  }
  return _impl_.value_.string_.Mutable(      GetArenaForAllocation());
}
inline std::string* Attribute::release_string() {
  // @@protoc_insertion_point(field_release:tensors.Attribute.string)
  if (_internal_has_string()) {
    clear_has_value();
    return _impl_.value_.string_.Release();
  } else {
    return nullptr;
  }
}
inline void Attribute::set_allocated_string(std::string* string) {
  if (has_value()) {
    clear_value();
  }
  if (string != nullptr) {
    set_has_string();
    _impl_.value_.string_.InitAllocated(string, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:tensors.Attribute.string)
}

// int64 int64 = 6 [json_name = "int64"];
inline bool Attribute::_internal_has_int64() const {
  return value_case() == kInt64;
}
inline bool Attribute::has_int64() const {
  return _internal_has_int64();
}
inline void Attribute::set_has_int64() {
  _impl_._oneof_case_[0] = kInt64;
}
inline void Attribute::clear_int64() {
  if (_internal_has_int64()) {
    _impl_.value_.int64_ = int64_t{0};
    clear_has_value();
  }
}
inline int64_t Attribute::_internal_int64() const {
  if (_internal_has_int64()) {
    return _impl_.value_.int64_;
  }
  return int64_t{0};
}
inline void Attribute::_internal_set_int64(int64_t value) {
  if (!_internal_has_int64()) {
    clear_value();
    set_has_int64();
  }
  _impl_.value_.int64_ = value;
}
inline int64_t Attribute::int64() const {
  // @@protoc_insertion_point(field_get:tensors.Attribute.int64)
  return _internal_int64();
}
inline void Attribute::set_int64(int64_t value) {
  _internal_set_int64(value);
  // @@protoc_insertion_point(field_set:tensors.Attribute.int64)
}

// float float = 7 [json_name = "float"];
inline bool Attribute::_internal_has_float_() const {
  return value_case() == kFloat;
}
inline bool Attribute::has_float_() const {
  return _internal_has_float_();
}
inline void Attribute::set_has_float_() {
  _impl_._oneof_case_[0] = kFloat;
}
inline void Attribute::clear_float_() {
  if (_internal_has_float_()) {
    _impl_.value_.float__ = 0;
    clear_has_value();
  }
}
inline float Attribute::_internal_float_() const {
  if (_internal_has_float_()) {
    return _impl_.value_.float__;
  }
  return 0;
}
inline void Attribute::_internal_set_float_(float value) {
  if (!_internal_has_float_()) {
    clear_value();
    set_has_float_();
  }
  _impl_.value_.float__ = value;
}
inline float Attribute::float_() const {
  // @@protoc_insertion_point(field_get:tensors.Attribute.float)
  return _internal_float_();
}
inline void Attribute::set_float_(float value) {
  _internal_set_float_(value);
  // @@protoc_insertion_point(field_set:tensors.Attribute.float)
}

// bool bool = 8 [json_name = "bool"];
inline bool Attribute::_internal_has_bool_() const {
  return value_case() == kBool;
}
inline bool Attribute::has_bool_() const {
  return _internal_has_bool_();
}
inline void Attribute::set_has_bool_() {
  _impl_._oneof_case_[0] = kBool;
}
inline void Attribute::clear_bool_() {
  if (_internal_has_bool_()) {
    _impl_.value_.bool__ = false;
    clear_has_value();
  }
}
inline bool Attribute::_internal_bool_() const {
  if (_internal_has_bool_()) {
    return _impl_.value_.bool__;
  }
  return false;
}
inline void Attribute::_internal_set_bool_(bool value) {
  if (!_internal_has_bool_()) {
    clear_value();
    set_has_bool_();
  }
  _impl_.value_.bool__ = value;
}
inline bool Attribute::bool_() const {
  // @@protoc_insertion_point(field_get:tensors.Attribute.bool)
  return _internal_bool_();
}
inline void Attribute::set_bool_(bool value) {
  _internal_set_bool_(value);
  // @@protoc_insertion_point(field_set:tensors.Attribute.bool)
}

inline bool Attribute::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void Attribute::clear_has_value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline Attribute::ValueCase Attribute::value_case() const {
  return Attribute::ValueCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Module

// string name = 1 [json_name = "name"];
inline void Module::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Module::name() const {
  // @@protoc_insertion_point(field_get:tensors.Module.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Module::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tensors.Module.name)
}
inline std::string* Module::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:tensors.Module.name)
  return _s;
}
inline const std::string& Module::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Module::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Module::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Module::release_name() {
  // @@protoc_insertion_point(field_release:tensors.Module.name)
  return _impl_.name_.Release();
}
inline void Module::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensors.Module.name)
}

// repeated string names = 2 [json_name = "names"];
inline int Module::_internal_names_size() const {
  return _impl_.names_.size();
}
inline int Module::names_size() const {
  return _internal_names_size();
}
inline void Module::clear_names() {
  _impl_.names_.Clear();
}
inline std::string* Module::add_names() {
  std::string* _s = _internal_add_names();
  // @@protoc_insertion_point(field_add_mutable:tensors.Module.names)
  return _s;
}
inline const std::string& Module::_internal_names(int index) const {
  return _impl_.names_.Get(index);
}
inline const std::string& Module::names(int index) const {
  // @@protoc_insertion_point(field_get:tensors.Module.names)
  return _internal_names(index);
}
inline std::string* Module::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:tensors.Module.names)
  return _impl_.names_.Mutable(index);
}
inline void Module::set_names(int index, const std::string& value) {
  _impl_.names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:tensors.Module.names)
}
inline void Module::set_names(int index, std::string&& value) {
  _impl_.names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:tensors.Module.names)
}
inline void Module::set_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensors.Module.names)
}
inline void Module::set_names(int index, const char* value, size_t size) {
  _impl_.names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensors.Module.names)
}
inline std::string* Module::_internal_add_names() {
  return _impl_.names_.Add();
}
inline void Module::add_names(const std::string& value) {
  _impl_.names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensors.Module.names)
}
inline void Module::add_names(std::string&& value) {
  _impl_.names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tensors.Module.names)
}
inline void Module::add_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensors.Module.names)
}
inline void Module::add_names(const char* value, size_t size) {
  _impl_.names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensors.Module.names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Module::names() const {
  // @@protoc_insertion_point(field_list:tensors.Module.names)
  return _impl_.names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Module::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:tensors.Module.names)
  return &_impl_.names_;
}

// repeated .tensors.Attribute attributes = 3 [json_name = "attributes"];
inline int Module::_internal_attributes_size() const {
  return _impl_.attributes_.size();
}
inline int Module::attributes_size() const {
  return _internal_attributes_size();
}
inline void Module::clear_attributes() {
  _impl_.attributes_.Clear();
}
inline ::tensors::Attribute* Module::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:tensors.Module.attributes)
  return _impl_.attributes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensors::Attribute >*
Module::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:tensors.Module.attributes)
  return &_impl_.attributes_;
}
inline const ::tensors::Attribute& Module::_internal_attributes(int index) const {
  return _impl_.attributes_.Get(index);
}
inline const ::tensors::Attribute& Module::attributes(int index) const {
  // @@protoc_insertion_point(field_get:tensors.Module.attributes)
  return _internal_attributes(index);
}
inline ::tensors::Attribute* Module::_internal_add_attributes() {
  return _impl_.attributes_.Add();
}
inline ::tensors::Attribute* Module::add_attributes() {
  ::tensors::Attribute* _add = _internal_add_attributes();
  // @@protoc_insertion_point(field_add:tensors.Module.attributes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensors::Attribute >&
Module::attributes() const {
  // @@protoc_insertion_point(field_list:tensors.Module.attributes)
  return _impl_.attributes_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tensors

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::tensors::Dtype> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tensors::Dtype>() {
  return ::tensors::Dtype_descriptor();
}
template <> struct is_proto_enum< ::tensors::AttributeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tensors::AttributeType>() {
  return ::tensors::AttributeType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tensors_2eproto
