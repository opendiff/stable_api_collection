// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dashboard.proto

#include "dashboard.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace gooseai {
PROTOBUF_CONSTEXPR OrganizationMember::OrganizationMember(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.organization_)*/nullptr
  , /*decltype(_impl_.user_)*/nullptr
  , /*decltype(_impl_.role_)*/0
  , /*decltype(_impl_.is_default_)*/false} {}
struct OrganizationMemberDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrganizationMemberDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrganizationMemberDefaultTypeInternal() {}
  union {
    OrganizationMember _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrganizationMemberDefaultTypeInternal _OrganizationMember_default_instance_;
PROTOBUF_CONSTEXPR OrganizationGrant::OrganizationGrant(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.amount_granted_)*/0
  , /*decltype(_impl_.amount_used_)*/0
  , /*decltype(_impl_.expires_at_)*/uint64_t{0u}
  , /*decltype(_impl_.granted_at_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OrganizationGrantDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrganizationGrantDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrganizationGrantDefaultTypeInternal() {}
  union {
    OrganizationGrant _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrganizationGrantDefaultTypeInternal _OrganizationGrant_default_instance_;
PROTOBUF_CONSTEXPR OrganizationPaymentInfo::OrganizationPaymentInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.grants_)*/{}
  , /*decltype(_impl_.balance_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OrganizationPaymentInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrganizationPaymentInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrganizationPaymentInfoDefaultTypeInternal() {}
  union {
    OrganizationPaymentInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrganizationPaymentInfoDefaultTypeInternal _OrganizationPaymentInfo_default_instance_;
PROTOBUF_CONSTEXPR OrganizationAutoCharge::OrganizationAutoCharge(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.created_at_)*/uint64_t{0u}
  , /*decltype(_impl_.enabled_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OrganizationAutoChargeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrganizationAutoChargeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrganizationAutoChargeDefaultTypeInternal() {}
  union {
    OrganizationAutoCharge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrganizationAutoChargeDefaultTypeInternal _OrganizationAutoCharge_default_instance_;
PROTOBUF_CONSTEXPR Organization::Organization(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.members_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stripe_customer_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.payment_info_)*/nullptr
  , /*decltype(_impl_.auto_charge_)*/nullptr} {}
struct OrganizationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrganizationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrganizationDefaultTypeInternal() {}
  union {
    Organization _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrganizationDefaultTypeInternal _Organization_default_instance_;
PROTOBUF_CONSTEXPR APIKey::APIKey(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.created_at_)*/uint64_t{0u}
  , /*decltype(_impl_.is_secret_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct APIKeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR APIKeyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~APIKeyDefaultTypeInternal() {}
  union {
    APIKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 APIKeyDefaultTypeInternal _APIKey_default_instance_;
PROTOBUF_CONSTEXPR User::User(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.organizations_)*/{}
  , /*decltype(_impl_.api_keys_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.auth_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.profile_picture_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.email_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.created_at_)*/uint64_t{0u}
  , /*decltype(_impl_.email_verified_)*/false} {}
struct UserDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserDefaultTypeInternal() {}
  union {
    User _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserDefaultTypeInternal _User_default_instance_;
PROTOBUF_CONSTEXPR CostData::CostData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.amount_credits_)*/0
  , /*decltype(_impl_.amount_tokens_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CostDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CostDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CostDataDefaultTypeInternal() {}
  union {
    CostData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CostDataDefaultTypeInternal _CostData_default_instance_;
PROTOBUF_CONSTEXPR UsageMetric::UsageMetric(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.operation_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.engine_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.input_cost_)*/nullptr
  , /*decltype(_impl_.output_cost_)*/nullptr
  , /*decltype(_impl_.aggregation_timestamp_)*/uint64_t{0u}} {}
struct UsageMetricDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UsageMetricDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UsageMetricDefaultTypeInternal() {}
  union {
    UsageMetric _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UsageMetricDefaultTypeInternal _UsageMetric_default_instance_;
PROTOBUF_CONSTEXPR CostTotal::CostTotal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.amount_credits_)*/0
  , /*decltype(_impl_.amount_tokens_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CostTotalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CostTotalDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CostTotalDefaultTypeInternal() {}
  union {
    CostTotal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CostTotalDefaultTypeInternal _CostTotal_default_instance_;
PROTOBUF_CONSTEXPR TotalMetricsData::TotalMetricsData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.input_total_)*/nullptr
  , /*decltype(_impl_.output_total_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TotalMetricsDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TotalMetricsDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TotalMetricsDataDefaultTypeInternal() {}
  union {
    TotalMetricsData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TotalMetricsDataDefaultTypeInternal _TotalMetricsData_default_instance_;
PROTOBUF_CONSTEXPR Metrics::Metrics(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.metrics_)*/{}
  , /*decltype(_impl_.total_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MetricsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetricsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetricsDefaultTypeInternal() {}
  union {
    Metrics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetricsDefaultTypeInternal _Metrics_default_instance_;
PROTOBUF_CONSTEXPR EmptyRequest::EmptyRequest(
    ::_pbi::ConstantInitialized) {}
struct EmptyRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EmptyRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EmptyRequestDefaultTypeInternal() {}
  union {
    EmptyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EmptyRequestDefaultTypeInternal _EmptyRequest_default_instance_;
PROTOBUF_CONSTEXPR GetOrganizationRequest::GetOrganizationRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetOrganizationRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetOrganizationRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetOrganizationRequestDefaultTypeInternal() {}
  union {
    GetOrganizationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetOrganizationRequestDefaultTypeInternal _GetOrganizationRequest_default_instance_;
PROTOBUF_CONSTEXPR GetMetricsRequest::GetMetricsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.organization_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.range_from_)*/uint64_t{0u}
  , /*decltype(_impl_.range_to_)*/uint64_t{0u}
  , /*decltype(_impl_.include_per_request_metrics_)*/false} {}
struct GetMetricsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetMetricsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetMetricsRequestDefaultTypeInternal() {}
  union {
    GetMetricsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetMetricsRequestDefaultTypeInternal _GetMetricsRequest_default_instance_;
PROTOBUF_CONSTEXPR APIKeyRequest::APIKeyRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.is_secret_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct APIKeyRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR APIKeyRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~APIKeyRequestDefaultTypeInternal() {}
  union {
    APIKeyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 APIKeyRequestDefaultTypeInternal _APIKeyRequest_default_instance_;
PROTOBUF_CONSTEXPR APIKeyFindRequest::APIKeyFindRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct APIKeyFindRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR APIKeyFindRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~APIKeyFindRequestDefaultTypeInternal() {}
  union {
    APIKeyFindRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 APIKeyFindRequestDefaultTypeInternal _APIKeyFindRequest_default_instance_;
PROTOBUF_CONSTEXPR UpdateDefaultOrganizationRequest::UpdateDefaultOrganizationRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.organization_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateDefaultOrganizationRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateDefaultOrganizationRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateDefaultOrganizationRequestDefaultTypeInternal() {}
  union {
    UpdateDefaultOrganizationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateDefaultOrganizationRequestDefaultTypeInternal _UpdateDefaultOrganizationRequest_default_instance_;
PROTOBUF_CONSTEXPR ClientSettings::ClientSettings(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.settings_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ClientSettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientSettingsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientSettingsDefaultTypeInternal() {}
  union {
    ClientSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientSettingsDefaultTypeInternal _ClientSettings_default_instance_;
PROTOBUF_CONSTEXPR CreateAutoChargeIntentRequest::CreateAutoChargeIntentRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.organization_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.monthly_maximum_)*/uint64_t{0u}
  , /*decltype(_impl_.minimum_value_)*/uint64_t{0u}
  , /*decltype(_impl_.amount_credits_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateAutoChargeIntentRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateAutoChargeIntentRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateAutoChargeIntentRequestDefaultTypeInternal() {}
  union {
    CreateAutoChargeIntentRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateAutoChargeIntentRequestDefaultTypeInternal _CreateAutoChargeIntentRequest_default_instance_;
PROTOBUF_CONSTEXPR CreateChargeRequest::CreateChargeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.organization_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.amount_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateChargeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateChargeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateChargeRequestDefaultTypeInternal() {}
  union {
    CreateChargeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateChargeRequestDefaultTypeInternal _CreateChargeRequest_default_instance_;
PROTOBUF_CONSTEXPR GetChargesRequest::GetChargesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.organization_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.range_from_)*/uint64_t{0u}
  , /*decltype(_impl_.range_to_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetChargesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetChargesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetChargesRequestDefaultTypeInternal() {}
  union {
    GetChargesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetChargesRequestDefaultTypeInternal _GetChargesRequest_default_instance_;
PROTOBUF_CONSTEXPR Charge::Charge(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.receipt_link_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.payment_link_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.created_at_)*/uint64_t{0u}
  , /*decltype(_impl_.amount_credits_)*/uint64_t{0u}
  , /*decltype(_impl_.paid_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChargeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChargeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChargeDefaultTypeInternal() {}
  union {
    Charge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChargeDefaultTypeInternal _Charge_default_instance_;
PROTOBUF_CONSTEXPR Charges::Charges(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.charges_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChargesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChargesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChargesDefaultTypeInternal() {}
  union {
    Charges _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChargesDefaultTypeInternal _Charges_default_instance_;
PROTOBUF_CONSTEXPR GetAutoChargeRequest::GetAutoChargeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.organization_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetAutoChargeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAutoChargeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAutoChargeRequestDefaultTypeInternal() {}
  union {
    GetAutoChargeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAutoChargeRequestDefaultTypeInternal _GetAutoChargeRequest_default_instance_;
PROTOBUF_CONSTEXPR AutoChargeIntent::AutoChargeIntent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.payment_link_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.created_at_)*/uint64_t{0u}
  , /*decltype(_impl_.monthly_maximum_)*/uint64_t{0u}
  , /*decltype(_impl_.minimum_value_)*/uint64_t{0u}
  , /*decltype(_impl_.amount_credits_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AutoChargeIntentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AutoChargeIntentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AutoChargeIntentDefaultTypeInternal() {}
  union {
    AutoChargeIntent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AutoChargeIntentDefaultTypeInternal _AutoChargeIntent_default_instance_;
PROTOBUF_CONSTEXPR UpdateUserInfoRequest::UpdateUserInfoRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.email_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct UpdateUserInfoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateUserInfoRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateUserInfoRequestDefaultTypeInternal() {}
  union {
    UpdateUserInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateUserInfoRequestDefaultTypeInternal _UpdateUserInfoRequest_default_instance_;
PROTOBUF_CONSTEXPR UserPasswordChangeTicket::UserPasswordChangeTicket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ticket_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserPasswordChangeTicketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserPasswordChangeTicketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserPasswordChangeTicketDefaultTypeInternal() {}
  union {
    UserPasswordChangeTicket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserPasswordChangeTicketDefaultTypeInternal _UserPasswordChangeTicket_default_instance_;
}  // namespace gooseai
static ::_pb::Metadata file_level_metadata_dashboard_2eproto[28];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_dashboard_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_dashboard_2eproto = nullptr;

const uint32_t TableStruct_dashboard_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::gooseai::OrganizationMember, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::gooseai::OrganizationMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gooseai::OrganizationMember, _impl_.organization_),
  PROTOBUF_FIELD_OFFSET(::gooseai::OrganizationMember, _impl_.user_),
  PROTOBUF_FIELD_OFFSET(::gooseai::OrganizationMember, _impl_.role_),
  PROTOBUF_FIELD_OFFSET(::gooseai::OrganizationMember, _impl_.is_default_),
  ~0u,
  0,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gooseai::OrganizationGrant, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gooseai::OrganizationGrant, _impl_.amount_granted_),
  PROTOBUF_FIELD_OFFSET(::gooseai::OrganizationGrant, _impl_.amount_used_),
  PROTOBUF_FIELD_OFFSET(::gooseai::OrganizationGrant, _impl_.expires_at_),
  PROTOBUF_FIELD_OFFSET(::gooseai::OrganizationGrant, _impl_.granted_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gooseai::OrganizationPaymentInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gooseai::OrganizationPaymentInfo, _impl_.balance_),
  PROTOBUF_FIELD_OFFSET(::gooseai::OrganizationPaymentInfo, _impl_.grants_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gooseai::OrganizationAutoCharge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gooseai::OrganizationAutoCharge, _impl_.enabled_),
  PROTOBUF_FIELD_OFFSET(::gooseai::OrganizationAutoCharge, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::gooseai::OrganizationAutoCharge, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::gooseai::Organization, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::gooseai::Organization, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gooseai::Organization, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::gooseai::Organization, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::gooseai::Organization, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::gooseai::Organization, _impl_.members_),
  PROTOBUF_FIELD_OFFSET(::gooseai::Organization, _impl_.payment_info_),
  PROTOBUF_FIELD_OFFSET(::gooseai::Organization, _impl_.stripe_customer_id_),
  PROTOBUF_FIELD_OFFSET(::gooseai::Organization, _impl_.auto_charge_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  0,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gooseai::APIKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gooseai::APIKey, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::gooseai::APIKey, _impl_.is_secret_),
  PROTOBUF_FIELD_OFFSET(::gooseai::APIKey, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::gooseai::User, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::gooseai::User, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gooseai::User, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::gooseai::User, _impl_.auth_id_),
  PROTOBUF_FIELD_OFFSET(::gooseai::User, _impl_.profile_picture_),
  PROTOBUF_FIELD_OFFSET(::gooseai::User, _impl_.email_),
  PROTOBUF_FIELD_OFFSET(::gooseai::User, _impl_.organizations_),
  PROTOBUF_FIELD_OFFSET(::gooseai::User, _impl_.api_keys_),
  PROTOBUF_FIELD_OFFSET(::gooseai::User, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::gooseai::User, _impl_.email_verified_),
  ~0u,
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gooseai::CostData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gooseai::CostData, _impl_.amount_tokens_),
  PROTOBUF_FIELD_OFFSET(::gooseai::CostData, _impl_.amount_credits_),
  PROTOBUF_FIELD_OFFSET(::gooseai::UsageMetric, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::gooseai::UsageMetric, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gooseai::UsageMetric, _impl_.operation_),
  PROTOBUF_FIELD_OFFSET(::gooseai::UsageMetric, _impl_.engine_),
  PROTOBUF_FIELD_OFFSET(::gooseai::UsageMetric, _impl_.input_cost_),
  PROTOBUF_FIELD_OFFSET(::gooseai::UsageMetric, _impl_.output_cost_),
  PROTOBUF_FIELD_OFFSET(::gooseai::UsageMetric, _impl_.user_),
  PROTOBUF_FIELD_OFFSET(::gooseai::UsageMetric, _impl_.aggregation_timestamp_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gooseai::CostTotal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gooseai::CostTotal, _impl_.amount_tokens_),
  PROTOBUF_FIELD_OFFSET(::gooseai::CostTotal, _impl_.amount_credits_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gooseai::TotalMetricsData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gooseai::TotalMetricsData, _impl_.input_total_),
  PROTOBUF_FIELD_OFFSET(::gooseai::TotalMetricsData, _impl_.output_total_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gooseai::Metrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gooseai::Metrics, _impl_.metrics_),
  PROTOBUF_FIELD_OFFSET(::gooseai::Metrics, _impl_.total_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gooseai::EmptyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gooseai::GetOrganizationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gooseai::GetOrganizationRequest, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::gooseai::GetMetricsRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::gooseai::GetMetricsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gooseai::GetMetricsRequest, _impl_.organization_id_),
  PROTOBUF_FIELD_OFFSET(::gooseai::GetMetricsRequest, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::gooseai::GetMetricsRequest, _impl_.range_from_),
  PROTOBUF_FIELD_OFFSET(::gooseai::GetMetricsRequest, _impl_.range_to_),
  PROTOBUF_FIELD_OFFSET(::gooseai::GetMetricsRequest, _impl_.include_per_request_metrics_),
  ~0u,
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gooseai::APIKeyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gooseai::APIKeyRequest, _impl_.is_secret_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gooseai::APIKeyFindRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gooseai::APIKeyFindRequest, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gooseai::UpdateDefaultOrganizationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gooseai::UpdateDefaultOrganizationRequest, _impl_.organization_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gooseai::ClientSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gooseai::ClientSettings, _impl_.settings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gooseai::CreateAutoChargeIntentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gooseai::CreateAutoChargeIntentRequest, _impl_.organization_id_),
  PROTOBUF_FIELD_OFFSET(::gooseai::CreateAutoChargeIntentRequest, _impl_.monthly_maximum_),
  PROTOBUF_FIELD_OFFSET(::gooseai::CreateAutoChargeIntentRequest, _impl_.minimum_value_),
  PROTOBUF_FIELD_OFFSET(::gooseai::CreateAutoChargeIntentRequest, _impl_.amount_credits_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gooseai::CreateChargeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gooseai::CreateChargeRequest, _impl_.amount_),
  PROTOBUF_FIELD_OFFSET(::gooseai::CreateChargeRequest, _impl_.organization_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gooseai::GetChargesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gooseai::GetChargesRequest, _impl_.organization_id_),
  PROTOBUF_FIELD_OFFSET(::gooseai::GetChargesRequest, _impl_.range_from_),
  PROTOBUF_FIELD_OFFSET(::gooseai::GetChargesRequest, _impl_.range_to_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gooseai::Charge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gooseai::Charge, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::gooseai::Charge, _impl_.paid_),
  PROTOBUF_FIELD_OFFSET(::gooseai::Charge, _impl_.receipt_link_),
  PROTOBUF_FIELD_OFFSET(::gooseai::Charge, _impl_.payment_link_),
  PROTOBUF_FIELD_OFFSET(::gooseai::Charge, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::gooseai::Charge, _impl_.amount_credits_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gooseai::Charges, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gooseai::Charges, _impl_.charges_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gooseai::GetAutoChargeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gooseai::GetAutoChargeRequest, _impl_.organization_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gooseai::AutoChargeIntent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gooseai::AutoChargeIntent, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::gooseai::AutoChargeIntent, _impl_.payment_link_),
  PROTOBUF_FIELD_OFFSET(::gooseai::AutoChargeIntent, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::gooseai::AutoChargeIntent, _impl_.monthly_maximum_),
  PROTOBUF_FIELD_OFFSET(::gooseai::AutoChargeIntent, _impl_.minimum_value_),
  PROTOBUF_FIELD_OFFSET(::gooseai::AutoChargeIntent, _impl_.amount_credits_),
  PROTOBUF_FIELD_OFFSET(::gooseai::UpdateUserInfoRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::gooseai::UpdateUserInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gooseai::UpdateUserInfoRequest, _impl_.email_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gooseai::UserPasswordChangeTicket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gooseai::UserPasswordChangeTicket, _impl_.ticket_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::gooseai::OrganizationMember)},
  { 14, -1, -1, sizeof(::gooseai::OrganizationGrant)},
  { 24, -1, -1, sizeof(::gooseai::OrganizationPaymentInfo)},
  { 32, -1, -1, sizeof(::gooseai::OrganizationAutoCharge)},
  { 41, 54, -1, sizeof(::gooseai::Organization)},
  { 61, -1, -1, sizeof(::gooseai::APIKey)},
  { 70, 84, -1, sizeof(::gooseai::User)},
  { 92, -1, -1, sizeof(::gooseai::CostData)},
  { 100, 112, -1, sizeof(::gooseai::UsageMetric)},
  { 118, -1, -1, sizeof(::gooseai::CostTotal)},
  { 126, -1, -1, sizeof(::gooseai::TotalMetricsData)},
  { 134, -1, -1, sizeof(::gooseai::Metrics)},
  { 142, -1, -1, sizeof(::gooseai::EmptyRequest)},
  { 148, -1, -1, sizeof(::gooseai::GetOrganizationRequest)},
  { 155, 166, -1, sizeof(::gooseai::GetMetricsRequest)},
  { 171, -1, -1, sizeof(::gooseai::APIKeyRequest)},
  { 178, -1, -1, sizeof(::gooseai::APIKeyFindRequest)},
  { 185, -1, -1, sizeof(::gooseai::UpdateDefaultOrganizationRequest)},
  { 192, -1, -1, sizeof(::gooseai::ClientSettings)},
  { 199, -1, -1, sizeof(::gooseai::CreateAutoChargeIntentRequest)},
  { 209, -1, -1, sizeof(::gooseai::CreateChargeRequest)},
  { 217, -1, -1, sizeof(::gooseai::GetChargesRequest)},
  { 226, -1, -1, sizeof(::gooseai::Charge)},
  { 238, -1, -1, sizeof(::gooseai::Charges)},
  { 245, -1, -1, sizeof(::gooseai::GetAutoChargeRequest)},
  { 252, -1, -1, sizeof(::gooseai::AutoChargeIntent)},
  { 264, 271, -1, sizeof(::gooseai::UpdateUserInfoRequest)},
  { 272, -1, -1, sizeof(::gooseai::UserPasswordChangeTicket)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::gooseai::_OrganizationMember_default_instance_._instance,
  &::gooseai::_OrganizationGrant_default_instance_._instance,
  &::gooseai::_OrganizationPaymentInfo_default_instance_._instance,
  &::gooseai::_OrganizationAutoCharge_default_instance_._instance,
  &::gooseai::_Organization_default_instance_._instance,
  &::gooseai::_APIKey_default_instance_._instance,
  &::gooseai::_User_default_instance_._instance,
  &::gooseai::_CostData_default_instance_._instance,
  &::gooseai::_UsageMetric_default_instance_._instance,
  &::gooseai::_CostTotal_default_instance_._instance,
  &::gooseai::_TotalMetricsData_default_instance_._instance,
  &::gooseai::_Metrics_default_instance_._instance,
  &::gooseai::_EmptyRequest_default_instance_._instance,
  &::gooseai::_GetOrganizationRequest_default_instance_._instance,
  &::gooseai::_GetMetricsRequest_default_instance_._instance,
  &::gooseai::_APIKeyRequest_default_instance_._instance,
  &::gooseai::_APIKeyFindRequest_default_instance_._instance,
  &::gooseai::_UpdateDefaultOrganizationRequest_default_instance_._instance,
  &::gooseai::_ClientSettings_default_instance_._instance,
  &::gooseai::_CreateAutoChargeIntentRequest_default_instance_._instance,
  &::gooseai::_CreateChargeRequest_default_instance_._instance,
  &::gooseai::_GetChargesRequest_default_instance_._instance,
  &::gooseai::_Charge_default_instance_._instance,
  &::gooseai::_Charges_default_instance_._instance,
  &::gooseai::_GetAutoChargeRequest_default_instance_._instance,
  &::gooseai::_AutoChargeIntent_default_instance_._instance,
  &::gooseai::_UpdateUserInfoRequest_default_instance_._instance,
  &::gooseai::_UserPasswordChangeTicket_default_instance_._instance,
};

const char descriptor_table_protodef_dashboard_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017dashboard.proto\022\007gooseai\"\316\001\n\022Organizat"
  "ionMember\0229\n\014organization\030\001 \001(\0132\025.goosea"
  "i.OrganizationR\014organization\022&\n\004user\030\002 \001"
  "(\0132\r.gooseai.UserH\000R\004user\210\001\001\022-\n\004role\030\003 \001"
  "(\0162\031.gooseai.OrganizationRoleR\004role\022\035\n\ni"
  "s_default\030\004 \001(\010R\tisDefaultB\007\n\005_user\"\231\001\n\021"
  "OrganizationGrant\022%\n\016amount_granted\030\001 \001("
  "\001R\ramountGranted\022\037\n\013amount_used\030\002 \001(\001R\na"
  "mountUsed\022\035\n\nexpires_at\030\003 \001(\004R\texpiresAt"
  "\022\035\n\ngranted_at\030\004 \001(\004R\tgrantedAt\"g\n\027Organ"
  "izationPaymentInfo\022\030\n\007balance\030\001 \001(\001R\007bal"
  "ance\0222\n\006grants\030\002 \003(\0132\032.gooseai.Organizat"
  "ionGrantR\006grants\"a\n\026OrganizationAutoChar"
  "ge\022\030\n\007enabled\030\001 \001(\010R\007enabled\022\016\n\002id\030\002 \001(\t"
  "R\002id\022\035\n\ncreated_at\030\003 \001(\004R\tcreatedAt\"\207\003\n\014"
  "Organization\022\016\n\002id\030\001 \001(\tR\002id\022\022\n\004name\030\002 \001"
  "(\tR\004name\022 \n\013description\030\003 \001(\tR\013descripti"
  "on\0225\n\007members\030\004 \003(\0132\033.gooseai.Organizati"
  "onMemberR\007members\022H\n\014payment_info\030\005 \001(\0132"
  " .gooseai.OrganizationPaymentInfoH\000R\013pay"
  "mentInfo\210\001\001\0221\n\022stripe_customer_id\030\006 \001(\tH"
  "\001R\020stripeCustomerId\210\001\001\022E\n\013auto_charge\030\007 "
  "\001(\0132\037.gooseai.OrganizationAutoChargeH\002R\n"
  "autoCharge\210\001\001B\017\n\r_payment_infoB\025\n\023_strip"
  "e_customer_idB\016\n\014_auto_charge\"V\n\006APIKey\022"
  "\020\n\003key\030\001 \001(\tR\003key\022\033\n\tis_secret\030\002 \001(\010R\010is"
  "Secret\022\035\n\ncreated_at\030\003 \001(\004R\tcreatedAt\"\314\002"
  "\n\004User\022\016\n\002id\030\001 \001(\tR\002id\022\034\n\007auth_id\030\002 \001(\tH"
  "\000R\006authId\210\001\001\022\'\n\017profile_picture\030\003 \001(\tR\016p"
  "rofilePicture\022\024\n\005email\030\004 \001(\tR\005email\022A\n\ro"
  "rganizations\030\005 \003(\0132\033.gooseai.Organizatio"
  "nMemberR\rorganizations\022*\n\010api_keys\030\007 \003(\013"
  "2\017.gooseai.APIKeyR\007apiKeys\022\035\n\ncreated_at"
  "\030\010 \001(\004R\tcreatedAt\022*\n\016email_verified\030\t \001("
  "\010H\001R\remailVerified\210\001\001B\n\n\010_auth_idB\021\n\017_em"
  "ail_verified\"V\n\010CostData\022#\n\ramount_token"
  "s\030\001 \001(\rR\014amountTokens\022%\n\016amount_credits\030"
  "\002 \001(\001R\ramountCredits\"\200\002\n\013UsageMetric\022\034\n\t"
  "operation\030\001 \001(\tR\toperation\022\026\n\006engine\030\002 \001"
  "(\tR\006engine\0220\n\ninput_cost\030\003 \001(\0132\021.gooseai"
  ".CostDataR\tinputCost\0222\n\013output_cost\030\004 \001("
  "\0132\021.gooseai.CostDataR\noutputCost\022\027\n\004user"
  "\030\005 \001(\tH\000R\004user\210\001\001\0223\n\025aggregation_timesta"
  "mp\030\006 \001(\004R\024aggregationTimestampB\007\n\005_user\""
  "W\n\tCostTotal\022#\n\ramount_tokens\030\001 \001(\rR\014amo"
  "untTokens\022%\n\016amount_credits\030\002 \001(\001R\ramoun"
  "tCredits\"~\n\020TotalMetricsData\0223\n\013input_to"
  "tal\030\001 \001(\0132\022.gooseai.CostTotalR\ninputTota"
  "l\0225\n\014output_total\030\002 \001(\0132\022.gooseai.CostTo"
  "talR\013outputTotal\"j\n\007Metrics\022.\n\007metrics\030\001"
  " \003(\0132\024.gooseai.UsageMetricR\007metrics\022/\n\005t"
  "otal\030\002 \001(\0132\031.gooseai.TotalMetricsDataR\005t"
  "otal\"\016\n\014EmptyRequest\"(\n\026GetOrganizationR"
  "equest\022\016\n\002id\030\001 \001(\tR\002id\"\337\001\n\021GetMetricsReq"
  "uest\022\'\n\017organization_id\030\001 \001(\tR\016organizat"
  "ionId\022\034\n\007user_id\030\002 \001(\tH\000R\006userId\210\001\001\022\035\n\nr"
  "ange_from\030\003 \001(\004R\trangeFrom\022\031\n\010range_to\030\004"
  " \001(\004R\007rangeTo\022=\n\033include_per_request_met"
  "rics\030\005 \001(\010R\030includePerRequestMetricsB\n\n\010"
  "_user_id\",\n\rAPIKeyRequest\022\033\n\tis_secret\030\001"
  " \001(\010R\010isSecret\"#\n\021APIKeyFindRequest\022\016\n\002i"
  "d\030\001 \001(\tR\002id\"K\n UpdateDefaultOrganization"
  "Request\022\'\n\017organization_id\030\001 \001(\tR\016organi"
  "zationId\",\n\016ClientSettings\022\032\n\010settings\030\001"
  " \001(\014R\010settings\"\275\001\n\035CreateAutoChargeInten"
  "tRequest\022\'\n\017organization_id\030\001 \001(\tR\016organ"
  "izationId\022\'\n\017monthly_maximum\030\002 \001(\004R\016mont"
  "hlyMaximum\022#\n\rminimum_value\030\003 \001(\004R\014minim"
  "umValue\022%\n\016amount_credits\030\004 \001(\004R\ramountC"
  "redits\"V\n\023CreateChargeRequest\022\026\n\006amount\030"
  "\001 \001(\004R\006amount\022\'\n\017organization_id\030\002 \001(\tR\016"
  "organizationId\"v\n\021GetChargesRequest\022\'\n\017o"
  "rganization_id\030\001 \001(\tR\016organizationId\022\035\n\n"
  "range_from\030\002 \001(\004R\trangeFrom\022\031\n\010range_to\030"
  "\003 \001(\004R\007rangeTo\"\270\001\n\006Charge\022\016\n\002id\030\001 \001(\tR\002i"
  "d\022\022\n\004paid\030\002 \001(\010R\004paid\022!\n\014receipt_link\030\003 "
  "\001(\tR\013receiptLink\022!\n\014payment_link\030\004 \001(\tR\013"
  "paymentLink\022\035\n\ncreated_at\030\005 \001(\004R\tcreated"
  "At\022%\n\016amount_credits\030\006 \001(\004R\ramountCredit"
  "s\"4\n\007Charges\022)\n\007charges\030\001 \003(\0132\017.gooseai."
  "ChargeR\007charges\"\?\n\024GetAutoChargeRequest\022"
  "\'\n\017organization_id\030\001 \001(\tR\016organizationId"
  "\"\331\001\n\020AutoChargeIntent\022\016\n\002id\030\001 \001(\tR\002id\022!\n"
  "\014payment_link\030\002 \001(\tR\013paymentLink\022\035\n\ncrea"
  "ted_at\030\003 \001(\004R\tcreatedAt\022\'\n\017monthly_maxim"
  "um\030\004 \001(\004R\016monthlyMaximum\022#\n\rminimum_valu"
  "e\030\005 \001(\004R\014minimumValue\022%\n\016amount_credits\030"
  "\006 \001(\004R\ramountCredits\"<\n\025UpdateUserInfoRe"
  "quest\022\031\n\005email\030\001 \001(\tH\000R\005email\210\001\001B\010\n\006_ema"
  "il\"2\n\030UserPasswordChangeTicket\022\026\n\006ticket"
  "\030\001 \001(\tR\006ticket*9\n\020OrganizationRole\022\n\n\006ME"
  "MBER\020\000\022\016\n\nACCOUNTANT\020\001\022\t\n\005OWNER\020\0022\367\010\n\020Da"
  "shboardService\022-\n\005GetMe\022\025.gooseai.EmptyR"
  "equest\032\r.gooseai.User\022I\n\017GetOrganization"
  "\022\037.gooseai.GetOrganizationRequest\032\025.goos"
  "eai.Organization\022:\n\nGetMetrics\022\032.gooseai"
  ".GetMetricsRequest\032\020.gooseai.Metrics\0227\n\014"
  "CreateAPIKey\022\026.gooseai.APIKeyRequest\032\017.g"
  "ooseai.APIKey\022;\n\014DeleteAPIKey\022\032.gooseai."
  "APIKeyFindRequest\032\017.gooseai.APIKey\022U\n\031Up"
  "dateDefaultOrganization\022).gooseai.Update"
  "DefaultOrganizationRequest\032\r.gooseai.Use"
  "r\022C\n\021GetClientSettings\022\025.gooseai.EmptyRe"
  "quest\032\027.gooseai.ClientSettings\022E\n\021SetCli"
  "entSettings\022\027.gooseai.ClientSettings\032\027.g"
  "ooseai.ClientSettings\022\?\n\016UpdateUserInfo\022"
  "\036.gooseai.UpdateUserInfoRequest\032\r.goosea"
  "i.User\022V\n\032CreatePasswordChangeTicket\022\025.g"
  "ooseai.EmptyRequest\032!.gooseai.UserPasswo"
  "rdChangeTicket\0225\n\rDeleteAccount\022\025.goosea"
  "i.EmptyRequest\032\r.gooseai.User\022=\n\014CreateC"
  "harge\022\034.gooseai.CreateChargeRequest\032\017.go"
  "oseai.Charge\022:\n\nGetCharges\022\032.gooseai.Get"
  "ChargesRequest\032\020.gooseai.Charges\022[\n\026Crea"
  "teAutoChargeIntent\022&.gooseai.CreateAutoC"
  "hargeIntentRequest\032\031.gooseai.AutoChargeI"
  "ntent\022[\n\026UpdateAutoChargeIntent\022&.goosea"
  "i.CreateAutoChargeIntentRequest\032\031.goosea"
  "i.AutoChargeIntent\022O\n\023GetAutoChargeInten"
  "t\022\035.gooseai.GetAutoChargeRequest\032\031.goose"
  "ai.AutoChargeIntentB:Z8github.com/stabil"
  "ity-ai/api-interfaces/gooseai/dashboardb"
  "\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_dashboard_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dashboard_2eproto = {
    false, false, 4887, descriptor_table_protodef_dashboard_2eproto,
    "dashboard.proto",
    &descriptor_table_dashboard_2eproto_once, nullptr, 0, 28,
    schemas, file_default_instances, TableStruct_dashboard_2eproto::offsets,
    file_level_metadata_dashboard_2eproto, file_level_enum_descriptors_dashboard_2eproto,
    file_level_service_descriptors_dashboard_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dashboard_2eproto_getter() {
  return &descriptor_table_dashboard_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dashboard_2eproto(&descriptor_table_dashboard_2eproto);
namespace gooseai {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrganizationRole_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dashboard_2eproto);
  return file_level_enum_descriptors_dashboard_2eproto[0];
}
bool OrganizationRole_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class OrganizationMember::_Internal {
 public:
  using HasBits = decltype(std::declval<OrganizationMember>()._impl_._has_bits_);
  static const ::gooseai::Organization& organization(const OrganizationMember* msg);
  static const ::gooseai::User& user(const OrganizationMember* msg);
  static void set_has_user(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::gooseai::Organization&
OrganizationMember::_Internal::organization(const OrganizationMember* msg) {
  return *msg->_impl_.organization_;
}
const ::gooseai::User&
OrganizationMember::_Internal::user(const OrganizationMember* msg) {
  return *msg->_impl_.user_;
}
OrganizationMember::OrganizationMember(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:gooseai.OrganizationMember)
}
OrganizationMember::OrganizationMember(const OrganizationMember& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OrganizationMember* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.organization_){nullptr}
    , decltype(_impl_.user_){nullptr}
    , decltype(_impl_.role_){}
    , decltype(_impl_.is_default_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_organization()) {
    _this->_impl_.organization_ = new ::gooseai::Organization(*from._impl_.organization_);
  }
  if (from._internal_has_user()) {
    _this->_impl_.user_ = new ::gooseai::User(*from._impl_.user_);
  }
  ::memcpy(&_impl_.role_, &from._impl_.role_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_default_) -
    reinterpret_cast<char*>(&_impl_.role_)) + sizeof(_impl_.is_default_));
  // @@protoc_insertion_point(copy_constructor:gooseai.OrganizationMember)
}

inline void OrganizationMember::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.organization_){nullptr}
    , decltype(_impl_.user_){nullptr}
    , decltype(_impl_.role_){0}
    , decltype(_impl_.is_default_){false}
  };
}

OrganizationMember::~OrganizationMember() {
  // @@protoc_insertion_point(destructor:gooseai.OrganizationMember)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OrganizationMember::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.organization_;
  if (this != internal_default_instance()) delete _impl_.user_;
}

void OrganizationMember::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OrganizationMember::Clear() {
// @@protoc_insertion_point(message_clear_start:gooseai.OrganizationMember)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.organization_ != nullptr) {
    delete _impl_.organization_;
  }
  _impl_.organization_ = nullptr;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.user_ != nullptr);
    _impl_.user_->Clear();
  }
  ::memset(&_impl_.role_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_default_) -
      reinterpret_cast<char*>(&_impl_.role_)) + sizeof(_impl_.is_default_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrganizationMember::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .gooseai.Organization organization = 1 [json_name = "organization"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_organization(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .gooseai.User user = 2 [json_name = "user"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .gooseai.OrganizationRole role = 3 [json_name = "role"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_role(static_cast<::gooseai::OrganizationRole>(val));
        } else
          goto handle_unusual;
        continue;
      // bool is_default = 4 [json_name = "isDefault"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.is_default_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OrganizationMember::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gooseai.OrganizationMember)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .gooseai.Organization organization = 1 [json_name = "organization"];
  if (this->_internal_has_organization()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::organization(this),
        _Internal::organization(this).GetCachedSize(), target, stream);
  }

  // optional .gooseai.User user = 2 [json_name = "user"];
  if (_internal_has_user()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::user(this),
        _Internal::user(this).GetCachedSize(), target, stream);
  }

  // .gooseai.OrganizationRole role = 3 [json_name = "role"];
  if (this->_internal_role() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_role(), target);
  }

  // bool is_default = 4 [json_name = "isDefault"];
  if (this->_internal_is_default() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_default(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gooseai.OrganizationMember)
  return target;
}

size_t OrganizationMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gooseai.OrganizationMember)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gooseai.Organization organization = 1 [json_name = "organization"];
  if (this->_internal_has_organization()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.organization_);
  }

  // optional .gooseai.User user = 2 [json_name = "user"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_);
  }

  // .gooseai.OrganizationRole role = 3 [json_name = "role"];
  if (this->_internal_role() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_role());
  }

  // bool is_default = 4 [json_name = "isDefault"];
  if (this->_internal_is_default() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrganizationMember::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OrganizationMember::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrganizationMember::GetClassData() const { return &_class_data_; }


void OrganizationMember::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OrganizationMember*>(&to_msg);
  auto& from = static_cast<const OrganizationMember&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:gooseai.OrganizationMember)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_organization()) {
    _this->_internal_mutable_organization()->::gooseai::Organization::MergeFrom(
        from._internal_organization());
  }
  if (from._internal_has_user()) {
    _this->_internal_mutable_user()->::gooseai::User::MergeFrom(
        from._internal_user());
  }
  if (from._internal_role() != 0) {
    _this->_internal_set_role(from._internal_role());
  }
  if (from._internal_is_default() != 0) {
    _this->_internal_set_is_default(from._internal_is_default());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrganizationMember::CopyFrom(const OrganizationMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gooseai.OrganizationMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrganizationMember::IsInitialized() const {
  return true;
}

void OrganizationMember::InternalSwap(OrganizationMember* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrganizationMember, _impl_.is_default_)
      + sizeof(OrganizationMember::_impl_.is_default_)
      - PROTOBUF_FIELD_OFFSET(OrganizationMember, _impl_.organization_)>(
          reinterpret_cast<char*>(&_impl_.organization_),
          reinterpret_cast<char*>(&other->_impl_.organization_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OrganizationMember::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dashboard_2eproto_getter, &descriptor_table_dashboard_2eproto_once,
      file_level_metadata_dashboard_2eproto[0]);
}

// ===================================================================

class OrganizationGrant::_Internal {
 public:
};

OrganizationGrant::OrganizationGrant(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:gooseai.OrganizationGrant)
}
OrganizationGrant::OrganizationGrant(const OrganizationGrant& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OrganizationGrant* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.amount_granted_){}
    , decltype(_impl_.amount_used_){}
    , decltype(_impl_.expires_at_){}
    , decltype(_impl_.granted_at_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.amount_granted_, &from._impl_.amount_granted_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.granted_at_) -
    reinterpret_cast<char*>(&_impl_.amount_granted_)) + sizeof(_impl_.granted_at_));
  // @@protoc_insertion_point(copy_constructor:gooseai.OrganizationGrant)
}

inline void OrganizationGrant::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.amount_granted_){0}
    , decltype(_impl_.amount_used_){0}
    , decltype(_impl_.expires_at_){uint64_t{0u}}
    , decltype(_impl_.granted_at_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OrganizationGrant::~OrganizationGrant() {
  // @@protoc_insertion_point(destructor:gooseai.OrganizationGrant)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OrganizationGrant::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OrganizationGrant::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OrganizationGrant::Clear() {
// @@protoc_insertion_point(message_clear_start:gooseai.OrganizationGrant)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.amount_granted_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.granted_at_) -
      reinterpret_cast<char*>(&_impl_.amount_granted_)) + sizeof(_impl_.granted_at_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrganizationGrant::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double amount_granted = 1 [json_name = "amountGranted"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.amount_granted_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double amount_used = 2 [json_name = "amountUsed"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.amount_used_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint64 expires_at = 3 [json_name = "expiresAt"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.expires_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 granted_at = 4 [json_name = "grantedAt"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.granted_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OrganizationGrant::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gooseai.OrganizationGrant)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double amount_granted = 1 [json_name = "amountGranted"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_amount_granted = this->_internal_amount_granted();
  uint64_t raw_amount_granted;
  memcpy(&raw_amount_granted, &tmp_amount_granted, sizeof(tmp_amount_granted));
  if (raw_amount_granted != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_amount_granted(), target);
  }

  // double amount_used = 2 [json_name = "amountUsed"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_amount_used = this->_internal_amount_used();
  uint64_t raw_amount_used;
  memcpy(&raw_amount_used, &tmp_amount_used, sizeof(tmp_amount_used));
  if (raw_amount_used != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_amount_used(), target);
  }

  // uint64 expires_at = 3 [json_name = "expiresAt"];
  if (this->_internal_expires_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_expires_at(), target);
  }

  // uint64 granted_at = 4 [json_name = "grantedAt"];
  if (this->_internal_granted_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_granted_at(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gooseai.OrganizationGrant)
  return target;
}

size_t OrganizationGrant::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gooseai.OrganizationGrant)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double amount_granted = 1 [json_name = "amountGranted"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_amount_granted = this->_internal_amount_granted();
  uint64_t raw_amount_granted;
  memcpy(&raw_amount_granted, &tmp_amount_granted, sizeof(tmp_amount_granted));
  if (raw_amount_granted != 0) {
    total_size += 1 + 8;
  }

  // double amount_used = 2 [json_name = "amountUsed"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_amount_used = this->_internal_amount_used();
  uint64_t raw_amount_used;
  memcpy(&raw_amount_used, &tmp_amount_used, sizeof(tmp_amount_used));
  if (raw_amount_used != 0) {
    total_size += 1 + 8;
  }

  // uint64 expires_at = 3 [json_name = "expiresAt"];
  if (this->_internal_expires_at() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_expires_at());
  }

  // uint64 granted_at = 4 [json_name = "grantedAt"];
  if (this->_internal_granted_at() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_granted_at());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrganizationGrant::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OrganizationGrant::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrganizationGrant::GetClassData() const { return &_class_data_; }


void OrganizationGrant::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OrganizationGrant*>(&to_msg);
  auto& from = static_cast<const OrganizationGrant&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:gooseai.OrganizationGrant)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_amount_granted = from._internal_amount_granted();
  uint64_t raw_amount_granted;
  memcpy(&raw_amount_granted, &tmp_amount_granted, sizeof(tmp_amount_granted));
  if (raw_amount_granted != 0) {
    _this->_internal_set_amount_granted(from._internal_amount_granted());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_amount_used = from._internal_amount_used();
  uint64_t raw_amount_used;
  memcpy(&raw_amount_used, &tmp_amount_used, sizeof(tmp_amount_used));
  if (raw_amount_used != 0) {
    _this->_internal_set_amount_used(from._internal_amount_used());
  }
  if (from._internal_expires_at() != 0) {
    _this->_internal_set_expires_at(from._internal_expires_at());
  }
  if (from._internal_granted_at() != 0) {
    _this->_internal_set_granted_at(from._internal_granted_at());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrganizationGrant::CopyFrom(const OrganizationGrant& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gooseai.OrganizationGrant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrganizationGrant::IsInitialized() const {
  return true;
}

void OrganizationGrant::InternalSwap(OrganizationGrant* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrganizationGrant, _impl_.granted_at_)
      + sizeof(OrganizationGrant::_impl_.granted_at_)
      - PROTOBUF_FIELD_OFFSET(OrganizationGrant, _impl_.amount_granted_)>(
          reinterpret_cast<char*>(&_impl_.amount_granted_),
          reinterpret_cast<char*>(&other->_impl_.amount_granted_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OrganizationGrant::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dashboard_2eproto_getter, &descriptor_table_dashboard_2eproto_once,
      file_level_metadata_dashboard_2eproto[1]);
}

// ===================================================================

class OrganizationPaymentInfo::_Internal {
 public:
};

OrganizationPaymentInfo::OrganizationPaymentInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:gooseai.OrganizationPaymentInfo)
}
OrganizationPaymentInfo::OrganizationPaymentInfo(const OrganizationPaymentInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OrganizationPaymentInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.grants_){from._impl_.grants_}
    , decltype(_impl_.balance_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.balance_ = from._impl_.balance_;
  // @@protoc_insertion_point(copy_constructor:gooseai.OrganizationPaymentInfo)
}

inline void OrganizationPaymentInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.grants_){arena}
    , decltype(_impl_.balance_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OrganizationPaymentInfo::~OrganizationPaymentInfo() {
  // @@protoc_insertion_point(destructor:gooseai.OrganizationPaymentInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OrganizationPaymentInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.grants_.~RepeatedPtrField();
}

void OrganizationPaymentInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OrganizationPaymentInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:gooseai.OrganizationPaymentInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.grants_.Clear();
  _impl_.balance_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrganizationPaymentInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double balance = 1 [json_name = "balance"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.balance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .gooseai.OrganizationGrant grants = 2 [json_name = "grants"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_grants(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OrganizationPaymentInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gooseai.OrganizationPaymentInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double balance = 1 [json_name = "balance"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_balance = this->_internal_balance();
  uint64_t raw_balance;
  memcpy(&raw_balance, &tmp_balance, sizeof(tmp_balance));
  if (raw_balance != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_balance(), target);
  }

  // repeated .gooseai.OrganizationGrant grants = 2 [json_name = "grants"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_grants_size()); i < n; i++) {
    const auto& repfield = this->_internal_grants(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gooseai.OrganizationPaymentInfo)
  return target;
}

size_t OrganizationPaymentInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gooseai.OrganizationPaymentInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gooseai.OrganizationGrant grants = 2 [json_name = "grants"];
  total_size += 1UL * this->_internal_grants_size();
  for (const auto& msg : this->_impl_.grants_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // double balance = 1 [json_name = "balance"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_balance = this->_internal_balance();
  uint64_t raw_balance;
  memcpy(&raw_balance, &tmp_balance, sizeof(tmp_balance));
  if (raw_balance != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrganizationPaymentInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OrganizationPaymentInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrganizationPaymentInfo::GetClassData() const { return &_class_data_; }


void OrganizationPaymentInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OrganizationPaymentInfo*>(&to_msg);
  auto& from = static_cast<const OrganizationPaymentInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:gooseai.OrganizationPaymentInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.grants_.MergeFrom(from._impl_.grants_);
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_balance = from._internal_balance();
  uint64_t raw_balance;
  memcpy(&raw_balance, &tmp_balance, sizeof(tmp_balance));
  if (raw_balance != 0) {
    _this->_internal_set_balance(from._internal_balance());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrganizationPaymentInfo::CopyFrom(const OrganizationPaymentInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gooseai.OrganizationPaymentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrganizationPaymentInfo::IsInitialized() const {
  return true;
}

void OrganizationPaymentInfo::InternalSwap(OrganizationPaymentInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.grants_.InternalSwap(&other->_impl_.grants_);
  swap(_impl_.balance_, other->_impl_.balance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrganizationPaymentInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dashboard_2eproto_getter, &descriptor_table_dashboard_2eproto_once,
      file_level_metadata_dashboard_2eproto[2]);
}

// ===================================================================

class OrganizationAutoCharge::_Internal {
 public:
};

OrganizationAutoCharge::OrganizationAutoCharge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:gooseai.OrganizationAutoCharge)
}
OrganizationAutoCharge::OrganizationAutoCharge(const OrganizationAutoCharge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OrganizationAutoCharge* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.created_at_){}
    , decltype(_impl_.enabled_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.created_at_, &from._impl_.created_at_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.enabled_) -
    reinterpret_cast<char*>(&_impl_.created_at_)) + sizeof(_impl_.enabled_));
  // @@protoc_insertion_point(copy_constructor:gooseai.OrganizationAutoCharge)
}

inline void OrganizationAutoCharge::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.created_at_){uint64_t{0u}}
    , decltype(_impl_.enabled_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OrganizationAutoCharge::~OrganizationAutoCharge() {
  // @@protoc_insertion_point(destructor:gooseai.OrganizationAutoCharge)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OrganizationAutoCharge::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
}

void OrganizationAutoCharge::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OrganizationAutoCharge::Clear() {
// @@protoc_insertion_point(message_clear_start:gooseai.OrganizationAutoCharge)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  ::memset(&_impl_.created_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.enabled_) -
      reinterpret_cast<char*>(&_impl_.created_at_)) + sizeof(_impl_.enabled_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrganizationAutoCharge::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool enabled = 1 [json_name = "enabled"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string id = 2 [json_name = "id"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "gooseai.OrganizationAutoCharge.id"));
        } else
          goto handle_unusual;
        continue;
      // uint64 created_at = 3 [json_name = "createdAt"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OrganizationAutoCharge::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gooseai.OrganizationAutoCharge)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1 [json_name = "enabled"];
  if (this->_internal_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  // string id = 2 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gooseai.OrganizationAutoCharge.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  // uint64 created_at = 3 [json_name = "createdAt"];
  if (this->_internal_created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_created_at(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gooseai.OrganizationAutoCharge)
  return target;
}

size_t OrganizationAutoCharge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gooseai.OrganizationAutoCharge)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 2 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // uint64 created_at = 3 [json_name = "createdAt"];
  if (this->_internal_created_at() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_created_at());
  }

  // bool enabled = 1 [json_name = "enabled"];
  if (this->_internal_enabled() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrganizationAutoCharge::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OrganizationAutoCharge::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrganizationAutoCharge::GetClassData() const { return &_class_data_; }


void OrganizationAutoCharge::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OrganizationAutoCharge*>(&to_msg);
  auto& from = static_cast<const OrganizationAutoCharge&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:gooseai.OrganizationAutoCharge)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_created_at() != 0) {
    _this->_internal_set_created_at(from._internal_created_at());
  }
  if (from._internal_enabled() != 0) {
    _this->_internal_set_enabled(from._internal_enabled());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrganizationAutoCharge::CopyFrom(const OrganizationAutoCharge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gooseai.OrganizationAutoCharge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrganizationAutoCharge::IsInitialized() const {
  return true;
}

void OrganizationAutoCharge::InternalSwap(OrganizationAutoCharge* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrganizationAutoCharge, _impl_.enabled_)
      + sizeof(OrganizationAutoCharge::_impl_.enabled_)
      - PROTOBUF_FIELD_OFFSET(OrganizationAutoCharge, _impl_.created_at_)>(
          reinterpret_cast<char*>(&_impl_.created_at_),
          reinterpret_cast<char*>(&other->_impl_.created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OrganizationAutoCharge::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dashboard_2eproto_getter, &descriptor_table_dashboard_2eproto_once,
      file_level_metadata_dashboard_2eproto[3]);
}

// ===================================================================

class Organization::_Internal {
 public:
  using HasBits = decltype(std::declval<Organization>()._impl_._has_bits_);
  static const ::gooseai::OrganizationPaymentInfo& payment_info(const Organization* msg);
  static void set_has_payment_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_stripe_customer_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::gooseai::OrganizationAutoCharge& auto_charge(const Organization* msg);
  static void set_has_auto_charge(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::gooseai::OrganizationPaymentInfo&
Organization::_Internal::payment_info(const Organization* msg) {
  return *msg->_impl_.payment_info_;
}
const ::gooseai::OrganizationAutoCharge&
Organization::_Internal::auto_charge(const Organization* msg) {
  return *msg->_impl_.auto_charge_;
}
Organization::Organization(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:gooseai.Organization)
}
Organization::Organization(const Organization& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Organization* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.members_){from._impl_.members_}
    , decltype(_impl_.id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.stripe_customer_id_){}
    , decltype(_impl_.payment_info_){nullptr}
    , decltype(_impl_.auto_charge_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.stripe_customer_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stripe_customer_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_stripe_customer_id()) {
    _this->_impl_.stripe_customer_id_.Set(from._internal_stripe_customer_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_payment_info()) {
    _this->_impl_.payment_info_ = new ::gooseai::OrganizationPaymentInfo(*from._impl_.payment_info_);
  }
  if (from._internal_has_auto_charge()) {
    _this->_impl_.auto_charge_ = new ::gooseai::OrganizationAutoCharge(*from._impl_.auto_charge_);
  }
  // @@protoc_insertion_point(copy_constructor:gooseai.Organization)
}

inline void Organization::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.members_){arena}
    , decltype(_impl_.id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.stripe_customer_id_){}
    , decltype(_impl_.payment_info_){nullptr}
    , decltype(_impl_.auto_charge_){nullptr}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.stripe_customer_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stripe_customer_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Organization::~Organization() {
  // @@protoc_insertion_point(destructor:gooseai.Organization)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Organization::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.members_.~RepeatedPtrField();
  _impl_.id_.Destroy();
  _impl_.name_.Destroy();
  _impl_.description_.Destroy();
  _impl_.stripe_customer_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.payment_info_;
  if (this != internal_default_instance()) delete _impl_.auto_charge_;
}

void Organization::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Organization::Clear() {
// @@protoc_insertion_point(message_clear_start:gooseai.Organization)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.members_.Clear();
  _impl_.id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.stripe_customer_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.payment_info_ != nullptr);
      _impl_.payment_info_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.auto_charge_ != nullptr);
      _impl_.auto_charge_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Organization::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "gooseai.Organization.id"));
        } else
          goto handle_unusual;
        continue;
      // string name = 2 [json_name = "name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "gooseai.Organization.name"));
        } else
          goto handle_unusual;
        continue;
      // string description = 3 [json_name = "description"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "gooseai.Organization.description"));
        } else
          goto handle_unusual;
        continue;
      // repeated .gooseai.OrganizationMember members = 4 [json_name = "members"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .gooseai.OrganizationPaymentInfo payment_info = 5 [json_name = "paymentInfo"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_payment_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string stripe_customer_id = 6 [json_name = "stripeCustomerId"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_stripe_customer_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "gooseai.Organization.stripe_customer_id"));
        } else
          goto handle_unusual;
        continue;
      // optional .gooseai.OrganizationAutoCharge auto_charge = 7 [json_name = "autoCharge"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_auto_charge(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Organization::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gooseai.Organization)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gooseai.Organization.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gooseai.Organization.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string description = 3 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gooseai.Organization.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  // repeated .gooseai.OrganizationMember members = 4 [json_name = "members"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_members_size()); i < n; i++) {
    const auto& repfield = this->_internal_members(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .gooseai.OrganizationPaymentInfo payment_info = 5 [json_name = "paymentInfo"];
  if (_internal_has_payment_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::payment_info(this),
        _Internal::payment_info(this).GetCachedSize(), target, stream);
  }

  // optional string stripe_customer_id = 6 [json_name = "stripeCustomerId"];
  if (_internal_has_stripe_customer_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stripe_customer_id().data(), static_cast<int>(this->_internal_stripe_customer_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gooseai.Organization.stripe_customer_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_stripe_customer_id(), target);
  }

  // optional .gooseai.OrganizationAutoCharge auto_charge = 7 [json_name = "autoCharge"];
  if (_internal_has_auto_charge()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::auto_charge(this),
        _Internal::auto_charge(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gooseai.Organization)
  return target;
}

size_t Organization::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gooseai.Organization)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gooseai.OrganizationMember members = 4 [json_name = "members"];
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->_impl_.members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 3 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string stripe_customer_id = 6 [json_name = "stripeCustomerId"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_stripe_customer_id());
    }

    // optional .gooseai.OrganizationPaymentInfo payment_info = 5 [json_name = "paymentInfo"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payment_info_);
    }

    // optional .gooseai.OrganizationAutoCharge auto_charge = 7 [json_name = "autoCharge"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.auto_charge_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Organization::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Organization::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Organization::GetClassData() const { return &_class_data_; }


void Organization::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Organization*>(&to_msg);
  auto& from = static_cast<const Organization&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:gooseai.Organization)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.members_.MergeFrom(from._impl_.members_);
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_stripe_customer_id(from._internal_stripe_customer_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_payment_info()->::gooseai::OrganizationPaymentInfo::MergeFrom(
          from._internal_payment_info());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_auto_charge()->::gooseai::OrganizationAutoCharge::MergeFrom(
          from._internal_auto_charge());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Organization::CopyFrom(const Organization& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gooseai.Organization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Organization::IsInitialized() const {
  return true;
}

void Organization::InternalSwap(Organization* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.members_.InternalSwap(&other->_impl_.members_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stripe_customer_id_, lhs_arena,
      &other->_impl_.stripe_customer_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Organization, _impl_.auto_charge_)
      + sizeof(Organization::_impl_.auto_charge_)
      - PROTOBUF_FIELD_OFFSET(Organization, _impl_.payment_info_)>(
          reinterpret_cast<char*>(&_impl_.payment_info_),
          reinterpret_cast<char*>(&other->_impl_.payment_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Organization::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dashboard_2eproto_getter, &descriptor_table_dashboard_2eproto_once,
      file_level_metadata_dashboard_2eproto[4]);
}

// ===================================================================

class APIKey::_Internal {
 public:
};

APIKey::APIKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:gooseai.APIKey)
}
APIKey::APIKey(const APIKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  APIKey* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.created_at_){}
    , decltype(_impl_.is_secret_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.created_at_, &from._impl_.created_at_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_secret_) -
    reinterpret_cast<char*>(&_impl_.created_at_)) + sizeof(_impl_.is_secret_));
  // @@protoc_insertion_point(copy_constructor:gooseai.APIKey)
}

inline void APIKey::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.created_at_){uint64_t{0u}}
    , decltype(_impl_.is_secret_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

APIKey::~APIKey() {
  // @@protoc_insertion_point(destructor:gooseai.APIKey)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void APIKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
}

void APIKey::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void APIKey::Clear() {
// @@protoc_insertion_point(message_clear_start:gooseai.APIKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  ::memset(&_impl_.created_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_secret_) -
      reinterpret_cast<char*>(&_impl_.created_at_)) + sizeof(_impl_.is_secret_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* APIKey::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1 [json_name = "key"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "gooseai.APIKey.key"));
        } else
          goto handle_unusual;
        continue;
      // bool is_secret = 2 [json_name = "isSecret"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.is_secret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 created_at = 3 [json_name = "createdAt"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* APIKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gooseai.APIKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1 [json_name = "key"];
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gooseai.APIKey.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // bool is_secret = 2 [json_name = "isSecret"];
  if (this->_internal_is_secret() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_secret(), target);
  }

  // uint64 created_at = 3 [json_name = "createdAt"];
  if (this->_internal_created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_created_at(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gooseai.APIKey)
  return target;
}

size_t APIKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gooseai.APIKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1 [json_name = "key"];
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // uint64 created_at = 3 [json_name = "createdAt"];
  if (this->_internal_created_at() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_created_at());
  }

  // bool is_secret = 2 [json_name = "isSecret"];
  if (this->_internal_is_secret() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData APIKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    APIKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*APIKey::GetClassData() const { return &_class_data_; }


void APIKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<APIKey*>(&to_msg);
  auto& from = static_cast<const APIKey&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:gooseai.APIKey)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (from._internal_created_at() != 0) {
    _this->_internal_set_created_at(from._internal_created_at());
  }
  if (from._internal_is_secret() != 0) {
    _this->_internal_set_is_secret(from._internal_is_secret());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void APIKey::CopyFrom(const APIKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gooseai.APIKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool APIKey::IsInitialized() const {
  return true;
}

void APIKey::InternalSwap(APIKey* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(APIKey, _impl_.is_secret_)
      + sizeof(APIKey::_impl_.is_secret_)
      - PROTOBUF_FIELD_OFFSET(APIKey, _impl_.created_at_)>(
          reinterpret_cast<char*>(&_impl_.created_at_),
          reinterpret_cast<char*>(&other->_impl_.created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata APIKey::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dashboard_2eproto_getter, &descriptor_table_dashboard_2eproto_once,
      file_level_metadata_dashboard_2eproto[5]);
}

// ===================================================================

class User::_Internal {
 public:
  using HasBits = decltype(std::declval<User>()._impl_._has_bits_);
  static void set_has_auth_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_email_verified(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

User::User(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:gooseai.User)
}
User::User(const User& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  User* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.organizations_){from._impl_.organizations_}
    , decltype(_impl_.api_keys_){from._impl_.api_keys_}
    , decltype(_impl_.id_){}
    , decltype(_impl_.auth_id_){}
    , decltype(_impl_.profile_picture_){}
    , decltype(_impl_.email_){}
    , decltype(_impl_.created_at_){}
    , decltype(_impl_.email_verified_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.auth_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.auth_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_auth_id()) {
    _this->_impl_.auth_id_.Set(from._internal_auth_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.profile_picture_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.profile_picture_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_profile_picture().empty()) {
    _this->_impl_.profile_picture_.Set(from._internal_profile_picture(), 
      _this->GetArenaForAllocation());
  }
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_email().empty()) {
    _this->_impl_.email_.Set(from._internal_email(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.created_at_, &from._impl_.created_at_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.email_verified_) -
    reinterpret_cast<char*>(&_impl_.created_at_)) + sizeof(_impl_.email_verified_));
  // @@protoc_insertion_point(copy_constructor:gooseai.User)
}

inline void User::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.organizations_){arena}
    , decltype(_impl_.api_keys_){arena}
    , decltype(_impl_.id_){}
    , decltype(_impl_.auth_id_){}
    , decltype(_impl_.profile_picture_){}
    , decltype(_impl_.email_){}
    , decltype(_impl_.created_at_){uint64_t{0u}}
    , decltype(_impl_.email_verified_){false}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.auth_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.auth_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.profile_picture_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.profile_picture_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

User::~User() {
  // @@protoc_insertion_point(destructor:gooseai.User)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void User::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.organizations_.~RepeatedPtrField();
  _impl_.api_keys_.~RepeatedPtrField();
  _impl_.id_.Destroy();
  _impl_.auth_id_.Destroy();
  _impl_.profile_picture_.Destroy();
  _impl_.email_.Destroy();
}

void User::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void User::Clear() {
// @@protoc_insertion_point(message_clear_start:gooseai.User)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.organizations_.Clear();
  _impl_.api_keys_.Clear();
  _impl_.id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.auth_id_.ClearNonDefaultToEmpty();
  }
  _impl_.profile_picture_.ClearToEmpty();
  _impl_.email_.ClearToEmpty();
  _impl_.created_at_ = uint64_t{0u};
  _impl_.email_verified_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* User::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "gooseai.User.id"));
        } else
          goto handle_unusual;
        continue;
      // optional string auth_id = 2 [json_name = "authId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_auth_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "gooseai.User.auth_id"));
        } else
          goto handle_unusual;
        continue;
      // string profile_picture = 3 [json_name = "profilePicture"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_profile_picture();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "gooseai.User.profile_picture"));
        } else
          goto handle_unusual;
        continue;
      // string email = 4 [json_name = "email"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_email();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "gooseai.User.email"));
        } else
          goto handle_unusual;
        continue;
      // repeated .gooseai.OrganizationMember organizations = 5 [json_name = "organizations"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_organizations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .gooseai.APIKey api_keys = 7 [json_name = "apiKeys"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_api_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 created_at = 8 [json_name = "createdAt"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool email_verified = 9 [json_name = "emailVerified"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_email_verified(&has_bits);
          _impl_.email_verified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* User::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gooseai.User)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gooseai.User.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional string auth_id = 2 [json_name = "authId"];
  if (_internal_has_auth_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_auth_id().data(), static_cast<int>(this->_internal_auth_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gooseai.User.auth_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_auth_id(), target);
  }

  // string profile_picture = 3 [json_name = "profilePicture"];
  if (!this->_internal_profile_picture().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_profile_picture().data(), static_cast<int>(this->_internal_profile_picture().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gooseai.User.profile_picture");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_profile_picture(), target);
  }

  // string email = 4 [json_name = "email"];
  if (!this->_internal_email().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gooseai.User.email");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_email(), target);
  }

  // repeated .gooseai.OrganizationMember organizations = 5 [json_name = "organizations"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_organizations_size()); i < n; i++) {
    const auto& repfield = this->_internal_organizations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .gooseai.APIKey api_keys = 7 [json_name = "apiKeys"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_api_keys_size()); i < n; i++) {
    const auto& repfield = this->_internal_api_keys(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint64 created_at = 8 [json_name = "createdAt"];
  if (this->_internal_created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_created_at(), target);
  }

  // optional bool email_verified = 9 [json_name = "emailVerified"];
  if (_internal_has_email_verified()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_email_verified(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gooseai.User)
  return target;
}

size_t User::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gooseai.User)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gooseai.OrganizationMember organizations = 5 [json_name = "organizations"];
  total_size += 1UL * this->_internal_organizations_size();
  for (const auto& msg : this->_impl_.organizations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .gooseai.APIKey api_keys = 7 [json_name = "apiKeys"];
  total_size += 1UL * this->_internal_api_keys_size();
  for (const auto& msg : this->_impl_.api_keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // optional string auth_id = 2 [json_name = "authId"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_auth_id());
  }

  // string profile_picture = 3 [json_name = "profilePicture"];
  if (!this->_internal_profile_picture().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_profile_picture());
  }

  // string email = 4 [json_name = "email"];
  if (!this->_internal_email().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  // uint64 created_at = 8 [json_name = "createdAt"];
  if (this->_internal_created_at() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_created_at());
  }

  // optional bool email_verified = 9 [json_name = "emailVerified"];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData User::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    User::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*User::GetClassData() const { return &_class_data_; }


void User::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<User*>(&to_msg);
  auto& from = static_cast<const User&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:gooseai.User)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.organizations_.MergeFrom(from._impl_.organizations_);
  _this->_impl_.api_keys_.MergeFrom(from._impl_.api_keys_);
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_has_auth_id()) {
    _this->_internal_set_auth_id(from._internal_auth_id());
  }
  if (!from._internal_profile_picture().empty()) {
    _this->_internal_set_profile_picture(from._internal_profile_picture());
  }
  if (!from._internal_email().empty()) {
    _this->_internal_set_email(from._internal_email());
  }
  if (from._internal_created_at() != 0) {
    _this->_internal_set_created_at(from._internal_created_at());
  }
  if (from._internal_has_email_verified()) {
    _this->_internal_set_email_verified(from._internal_email_verified());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void User::CopyFrom(const User& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gooseai.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User::IsInitialized() const {
  return true;
}

void User::InternalSwap(User* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.organizations_.InternalSwap(&other->_impl_.organizations_);
  _impl_.api_keys_.InternalSwap(&other->_impl_.api_keys_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.auth_id_, lhs_arena,
      &other->_impl_.auth_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.profile_picture_, lhs_arena,
      &other->_impl_.profile_picture_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.email_, lhs_arena,
      &other->_impl_.email_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(User, _impl_.email_verified_)
      + sizeof(User::_impl_.email_verified_)
      - PROTOBUF_FIELD_OFFSET(User, _impl_.created_at_)>(
          reinterpret_cast<char*>(&_impl_.created_at_),
          reinterpret_cast<char*>(&other->_impl_.created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata User::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dashboard_2eproto_getter, &descriptor_table_dashboard_2eproto_once,
      file_level_metadata_dashboard_2eproto[6]);
}

// ===================================================================

class CostData::_Internal {
 public:
};

CostData::CostData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:gooseai.CostData)
}
CostData::CostData(const CostData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CostData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.amount_credits_){}
    , decltype(_impl_.amount_tokens_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.amount_credits_, &from._impl_.amount_credits_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.amount_tokens_) -
    reinterpret_cast<char*>(&_impl_.amount_credits_)) + sizeof(_impl_.amount_tokens_));
  // @@protoc_insertion_point(copy_constructor:gooseai.CostData)
}

inline void CostData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.amount_credits_){0}
    , decltype(_impl_.amount_tokens_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CostData::~CostData() {
  // @@protoc_insertion_point(destructor:gooseai.CostData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CostData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CostData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CostData::Clear() {
// @@protoc_insertion_point(message_clear_start:gooseai.CostData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.amount_credits_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.amount_tokens_) -
      reinterpret_cast<char*>(&_impl_.amount_credits_)) + sizeof(_impl_.amount_tokens_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CostData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 amount_tokens = 1 [json_name = "amountTokens"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.amount_tokens_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double amount_credits = 2 [json_name = "amountCredits"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.amount_credits_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CostData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gooseai.CostData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 amount_tokens = 1 [json_name = "amountTokens"];
  if (this->_internal_amount_tokens() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_amount_tokens(), target);
  }

  // double amount_credits = 2 [json_name = "amountCredits"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_amount_credits = this->_internal_amount_credits();
  uint64_t raw_amount_credits;
  memcpy(&raw_amount_credits, &tmp_amount_credits, sizeof(tmp_amount_credits));
  if (raw_amount_credits != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_amount_credits(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gooseai.CostData)
  return target;
}

size_t CostData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gooseai.CostData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double amount_credits = 2 [json_name = "amountCredits"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_amount_credits = this->_internal_amount_credits();
  uint64_t raw_amount_credits;
  memcpy(&raw_amount_credits, &tmp_amount_credits, sizeof(tmp_amount_credits));
  if (raw_amount_credits != 0) {
    total_size += 1 + 8;
  }

  // uint32 amount_tokens = 1 [json_name = "amountTokens"];
  if (this->_internal_amount_tokens() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_amount_tokens());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CostData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CostData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CostData::GetClassData() const { return &_class_data_; }


void CostData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CostData*>(&to_msg);
  auto& from = static_cast<const CostData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:gooseai.CostData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_amount_credits = from._internal_amount_credits();
  uint64_t raw_amount_credits;
  memcpy(&raw_amount_credits, &tmp_amount_credits, sizeof(tmp_amount_credits));
  if (raw_amount_credits != 0) {
    _this->_internal_set_amount_credits(from._internal_amount_credits());
  }
  if (from._internal_amount_tokens() != 0) {
    _this->_internal_set_amount_tokens(from._internal_amount_tokens());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CostData::CopyFrom(const CostData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gooseai.CostData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CostData::IsInitialized() const {
  return true;
}

void CostData::InternalSwap(CostData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CostData, _impl_.amount_tokens_)
      + sizeof(CostData::_impl_.amount_tokens_)
      - PROTOBUF_FIELD_OFFSET(CostData, _impl_.amount_credits_)>(
          reinterpret_cast<char*>(&_impl_.amount_credits_),
          reinterpret_cast<char*>(&other->_impl_.amount_credits_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CostData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dashboard_2eproto_getter, &descriptor_table_dashboard_2eproto_once,
      file_level_metadata_dashboard_2eproto[7]);
}

// ===================================================================

class UsageMetric::_Internal {
 public:
  using HasBits = decltype(std::declval<UsageMetric>()._impl_._has_bits_);
  static const ::gooseai::CostData& input_cost(const UsageMetric* msg);
  static const ::gooseai::CostData& output_cost(const UsageMetric* msg);
  static void set_has_user(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::gooseai::CostData&
UsageMetric::_Internal::input_cost(const UsageMetric* msg) {
  return *msg->_impl_.input_cost_;
}
const ::gooseai::CostData&
UsageMetric::_Internal::output_cost(const UsageMetric* msg) {
  return *msg->_impl_.output_cost_;
}
UsageMetric::UsageMetric(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:gooseai.UsageMetric)
}
UsageMetric::UsageMetric(const UsageMetric& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UsageMetric* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.operation_){}
    , decltype(_impl_.engine_){}
    , decltype(_impl_.user_){}
    , decltype(_impl_.input_cost_){nullptr}
    , decltype(_impl_.output_cost_){nullptr}
    , decltype(_impl_.aggregation_timestamp_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.operation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.operation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_operation().empty()) {
    _this->_impl_.operation_.Set(from._internal_operation(), 
      _this->GetArenaForAllocation());
  }
  _impl_.engine_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.engine_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_engine().empty()) {
    _this->_impl_.engine_.Set(from._internal_engine(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_user()) {
    _this->_impl_.user_.Set(from._internal_user(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_input_cost()) {
    _this->_impl_.input_cost_ = new ::gooseai::CostData(*from._impl_.input_cost_);
  }
  if (from._internal_has_output_cost()) {
    _this->_impl_.output_cost_ = new ::gooseai::CostData(*from._impl_.output_cost_);
  }
  _this->_impl_.aggregation_timestamp_ = from._impl_.aggregation_timestamp_;
  // @@protoc_insertion_point(copy_constructor:gooseai.UsageMetric)
}

inline void UsageMetric::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.operation_){}
    , decltype(_impl_.engine_){}
    , decltype(_impl_.user_){}
    , decltype(_impl_.input_cost_){nullptr}
    , decltype(_impl_.output_cost_){nullptr}
    , decltype(_impl_.aggregation_timestamp_){uint64_t{0u}}
  };
  _impl_.operation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.operation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.engine_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.engine_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UsageMetric::~UsageMetric() {
  // @@protoc_insertion_point(destructor:gooseai.UsageMetric)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UsageMetric::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.operation_.Destroy();
  _impl_.engine_.Destroy();
  _impl_.user_.Destroy();
  if (this != internal_default_instance()) delete _impl_.input_cost_;
  if (this != internal_default_instance()) delete _impl_.output_cost_;
}

void UsageMetric::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UsageMetric::Clear() {
// @@protoc_insertion_point(message_clear_start:gooseai.UsageMetric)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.operation_.ClearToEmpty();
  _impl_.engine_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.user_.ClearNonDefaultToEmpty();
  }
  if (GetArenaForAllocation() == nullptr && _impl_.input_cost_ != nullptr) {
    delete _impl_.input_cost_;
  }
  _impl_.input_cost_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.output_cost_ != nullptr) {
    delete _impl_.output_cost_;
  }
  _impl_.output_cost_ = nullptr;
  _impl_.aggregation_timestamp_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UsageMetric::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string operation = 1 [json_name = "operation"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_operation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "gooseai.UsageMetric.operation"));
        } else
          goto handle_unusual;
        continue;
      // string engine = 2 [json_name = "engine"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_engine();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "gooseai.UsageMetric.engine"));
        } else
          goto handle_unusual;
        continue;
      // .gooseai.CostData input_cost = 3 [json_name = "inputCost"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_input_cost(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .gooseai.CostData output_cost = 4 [json_name = "outputCost"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_output_cost(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string user = 5 [json_name = "user"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_user();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "gooseai.UsageMetric.user"));
        } else
          goto handle_unusual;
        continue;
      // uint64 aggregation_timestamp = 6 [json_name = "aggregationTimestamp"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.aggregation_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UsageMetric::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gooseai.UsageMetric)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string operation = 1 [json_name = "operation"];
  if (!this->_internal_operation().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_operation().data(), static_cast<int>(this->_internal_operation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gooseai.UsageMetric.operation");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_operation(), target);
  }

  // string engine = 2 [json_name = "engine"];
  if (!this->_internal_engine().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_engine().data(), static_cast<int>(this->_internal_engine().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gooseai.UsageMetric.engine");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_engine(), target);
  }

  // .gooseai.CostData input_cost = 3 [json_name = "inputCost"];
  if (this->_internal_has_input_cost()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::input_cost(this),
        _Internal::input_cost(this).GetCachedSize(), target, stream);
  }

  // .gooseai.CostData output_cost = 4 [json_name = "outputCost"];
  if (this->_internal_has_output_cost()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::output_cost(this),
        _Internal::output_cost(this).GetCachedSize(), target, stream);
  }

  // optional string user = 5 [json_name = "user"];
  if (_internal_has_user()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user().data(), static_cast<int>(this->_internal_user().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gooseai.UsageMetric.user");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_user(), target);
  }

  // uint64 aggregation_timestamp = 6 [json_name = "aggregationTimestamp"];
  if (this->_internal_aggregation_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_aggregation_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gooseai.UsageMetric)
  return target;
}

size_t UsageMetric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gooseai.UsageMetric)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string operation = 1 [json_name = "operation"];
  if (!this->_internal_operation().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_operation());
  }

  // string engine = 2 [json_name = "engine"];
  if (!this->_internal_engine().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_engine());
  }

  // optional string user = 5 [json_name = "user"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user());
  }

  // .gooseai.CostData input_cost = 3 [json_name = "inputCost"];
  if (this->_internal_has_input_cost()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.input_cost_);
  }

  // .gooseai.CostData output_cost = 4 [json_name = "outputCost"];
  if (this->_internal_has_output_cost()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.output_cost_);
  }

  // uint64 aggregation_timestamp = 6 [json_name = "aggregationTimestamp"];
  if (this->_internal_aggregation_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_aggregation_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UsageMetric::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UsageMetric::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UsageMetric::GetClassData() const { return &_class_data_; }


void UsageMetric::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UsageMetric*>(&to_msg);
  auto& from = static_cast<const UsageMetric&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:gooseai.UsageMetric)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_operation().empty()) {
    _this->_internal_set_operation(from._internal_operation());
  }
  if (!from._internal_engine().empty()) {
    _this->_internal_set_engine(from._internal_engine());
  }
  if (from._internal_has_user()) {
    _this->_internal_set_user(from._internal_user());
  }
  if (from._internal_has_input_cost()) {
    _this->_internal_mutable_input_cost()->::gooseai::CostData::MergeFrom(
        from._internal_input_cost());
  }
  if (from._internal_has_output_cost()) {
    _this->_internal_mutable_output_cost()->::gooseai::CostData::MergeFrom(
        from._internal_output_cost());
  }
  if (from._internal_aggregation_timestamp() != 0) {
    _this->_internal_set_aggregation_timestamp(from._internal_aggregation_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UsageMetric::CopyFrom(const UsageMetric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gooseai.UsageMetric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsageMetric::IsInitialized() const {
  return true;
}

void UsageMetric::InternalSwap(UsageMetric* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.operation_, lhs_arena,
      &other->_impl_.operation_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.engine_, lhs_arena,
      &other->_impl_.engine_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_, lhs_arena,
      &other->_impl_.user_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UsageMetric, _impl_.aggregation_timestamp_)
      + sizeof(UsageMetric::_impl_.aggregation_timestamp_)
      - PROTOBUF_FIELD_OFFSET(UsageMetric, _impl_.input_cost_)>(
          reinterpret_cast<char*>(&_impl_.input_cost_),
          reinterpret_cast<char*>(&other->_impl_.input_cost_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UsageMetric::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dashboard_2eproto_getter, &descriptor_table_dashboard_2eproto_once,
      file_level_metadata_dashboard_2eproto[8]);
}

// ===================================================================

class CostTotal::_Internal {
 public:
};

CostTotal::CostTotal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:gooseai.CostTotal)
}
CostTotal::CostTotal(const CostTotal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CostTotal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.amount_credits_){}
    , decltype(_impl_.amount_tokens_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.amount_credits_, &from._impl_.amount_credits_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.amount_tokens_) -
    reinterpret_cast<char*>(&_impl_.amount_credits_)) + sizeof(_impl_.amount_tokens_));
  // @@protoc_insertion_point(copy_constructor:gooseai.CostTotal)
}

inline void CostTotal::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.amount_credits_){0}
    , decltype(_impl_.amount_tokens_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CostTotal::~CostTotal() {
  // @@protoc_insertion_point(destructor:gooseai.CostTotal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CostTotal::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CostTotal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CostTotal::Clear() {
// @@protoc_insertion_point(message_clear_start:gooseai.CostTotal)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.amount_credits_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.amount_tokens_) -
      reinterpret_cast<char*>(&_impl_.amount_credits_)) + sizeof(_impl_.amount_tokens_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CostTotal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 amount_tokens = 1 [json_name = "amountTokens"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.amount_tokens_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double amount_credits = 2 [json_name = "amountCredits"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.amount_credits_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CostTotal::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gooseai.CostTotal)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 amount_tokens = 1 [json_name = "amountTokens"];
  if (this->_internal_amount_tokens() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_amount_tokens(), target);
  }

  // double amount_credits = 2 [json_name = "amountCredits"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_amount_credits = this->_internal_amount_credits();
  uint64_t raw_amount_credits;
  memcpy(&raw_amount_credits, &tmp_amount_credits, sizeof(tmp_amount_credits));
  if (raw_amount_credits != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_amount_credits(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gooseai.CostTotal)
  return target;
}

size_t CostTotal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gooseai.CostTotal)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double amount_credits = 2 [json_name = "amountCredits"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_amount_credits = this->_internal_amount_credits();
  uint64_t raw_amount_credits;
  memcpy(&raw_amount_credits, &tmp_amount_credits, sizeof(tmp_amount_credits));
  if (raw_amount_credits != 0) {
    total_size += 1 + 8;
  }

  // uint32 amount_tokens = 1 [json_name = "amountTokens"];
  if (this->_internal_amount_tokens() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_amount_tokens());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CostTotal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CostTotal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CostTotal::GetClassData() const { return &_class_data_; }


void CostTotal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CostTotal*>(&to_msg);
  auto& from = static_cast<const CostTotal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:gooseai.CostTotal)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_amount_credits = from._internal_amount_credits();
  uint64_t raw_amount_credits;
  memcpy(&raw_amount_credits, &tmp_amount_credits, sizeof(tmp_amount_credits));
  if (raw_amount_credits != 0) {
    _this->_internal_set_amount_credits(from._internal_amount_credits());
  }
  if (from._internal_amount_tokens() != 0) {
    _this->_internal_set_amount_tokens(from._internal_amount_tokens());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CostTotal::CopyFrom(const CostTotal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gooseai.CostTotal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CostTotal::IsInitialized() const {
  return true;
}

void CostTotal::InternalSwap(CostTotal* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CostTotal, _impl_.amount_tokens_)
      + sizeof(CostTotal::_impl_.amount_tokens_)
      - PROTOBUF_FIELD_OFFSET(CostTotal, _impl_.amount_credits_)>(
          reinterpret_cast<char*>(&_impl_.amount_credits_),
          reinterpret_cast<char*>(&other->_impl_.amount_credits_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CostTotal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dashboard_2eproto_getter, &descriptor_table_dashboard_2eproto_once,
      file_level_metadata_dashboard_2eproto[9]);
}

// ===================================================================

class TotalMetricsData::_Internal {
 public:
  static const ::gooseai::CostTotal& input_total(const TotalMetricsData* msg);
  static const ::gooseai::CostTotal& output_total(const TotalMetricsData* msg);
};

const ::gooseai::CostTotal&
TotalMetricsData::_Internal::input_total(const TotalMetricsData* msg) {
  return *msg->_impl_.input_total_;
}
const ::gooseai::CostTotal&
TotalMetricsData::_Internal::output_total(const TotalMetricsData* msg) {
  return *msg->_impl_.output_total_;
}
TotalMetricsData::TotalMetricsData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:gooseai.TotalMetricsData)
}
TotalMetricsData::TotalMetricsData(const TotalMetricsData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TotalMetricsData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.input_total_){nullptr}
    , decltype(_impl_.output_total_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_input_total()) {
    _this->_impl_.input_total_ = new ::gooseai::CostTotal(*from._impl_.input_total_);
  }
  if (from._internal_has_output_total()) {
    _this->_impl_.output_total_ = new ::gooseai::CostTotal(*from._impl_.output_total_);
  }
  // @@protoc_insertion_point(copy_constructor:gooseai.TotalMetricsData)
}

inline void TotalMetricsData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.input_total_){nullptr}
    , decltype(_impl_.output_total_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TotalMetricsData::~TotalMetricsData() {
  // @@protoc_insertion_point(destructor:gooseai.TotalMetricsData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TotalMetricsData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.input_total_;
  if (this != internal_default_instance()) delete _impl_.output_total_;
}

void TotalMetricsData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TotalMetricsData::Clear() {
// @@protoc_insertion_point(message_clear_start:gooseai.TotalMetricsData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.input_total_ != nullptr) {
    delete _impl_.input_total_;
  }
  _impl_.input_total_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.output_total_ != nullptr) {
    delete _impl_.output_total_;
  }
  _impl_.output_total_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TotalMetricsData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .gooseai.CostTotal input_total = 1 [json_name = "inputTotal"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_input_total(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .gooseai.CostTotal output_total = 2 [json_name = "outputTotal"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_output_total(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TotalMetricsData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gooseai.TotalMetricsData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .gooseai.CostTotal input_total = 1 [json_name = "inputTotal"];
  if (this->_internal_has_input_total()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::input_total(this),
        _Internal::input_total(this).GetCachedSize(), target, stream);
  }

  // .gooseai.CostTotal output_total = 2 [json_name = "outputTotal"];
  if (this->_internal_has_output_total()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::output_total(this),
        _Internal::output_total(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gooseai.TotalMetricsData)
  return target;
}

size_t TotalMetricsData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gooseai.TotalMetricsData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gooseai.CostTotal input_total = 1 [json_name = "inputTotal"];
  if (this->_internal_has_input_total()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.input_total_);
  }

  // .gooseai.CostTotal output_total = 2 [json_name = "outputTotal"];
  if (this->_internal_has_output_total()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.output_total_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TotalMetricsData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TotalMetricsData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TotalMetricsData::GetClassData() const { return &_class_data_; }


void TotalMetricsData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TotalMetricsData*>(&to_msg);
  auto& from = static_cast<const TotalMetricsData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:gooseai.TotalMetricsData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_input_total()) {
    _this->_internal_mutable_input_total()->::gooseai::CostTotal::MergeFrom(
        from._internal_input_total());
  }
  if (from._internal_has_output_total()) {
    _this->_internal_mutable_output_total()->::gooseai::CostTotal::MergeFrom(
        from._internal_output_total());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TotalMetricsData::CopyFrom(const TotalMetricsData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gooseai.TotalMetricsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TotalMetricsData::IsInitialized() const {
  return true;
}

void TotalMetricsData::InternalSwap(TotalMetricsData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TotalMetricsData, _impl_.output_total_)
      + sizeof(TotalMetricsData::_impl_.output_total_)
      - PROTOBUF_FIELD_OFFSET(TotalMetricsData, _impl_.input_total_)>(
          reinterpret_cast<char*>(&_impl_.input_total_),
          reinterpret_cast<char*>(&other->_impl_.input_total_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TotalMetricsData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dashboard_2eproto_getter, &descriptor_table_dashboard_2eproto_once,
      file_level_metadata_dashboard_2eproto[10]);
}

// ===================================================================

class Metrics::_Internal {
 public:
  static const ::gooseai::TotalMetricsData& total(const Metrics* msg);
};

const ::gooseai::TotalMetricsData&
Metrics::_Internal::total(const Metrics* msg) {
  return *msg->_impl_.total_;
}
Metrics::Metrics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:gooseai.Metrics)
}
Metrics::Metrics(const Metrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Metrics* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.metrics_){from._impl_.metrics_}
    , decltype(_impl_.total_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_total()) {
    _this->_impl_.total_ = new ::gooseai::TotalMetricsData(*from._impl_.total_);
  }
  // @@protoc_insertion_point(copy_constructor:gooseai.Metrics)
}

inline void Metrics::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.metrics_){arena}
    , decltype(_impl_.total_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Metrics::~Metrics() {
  // @@protoc_insertion_point(destructor:gooseai.Metrics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Metrics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.metrics_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.total_;
}

void Metrics::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Metrics::Clear() {
// @@protoc_insertion_point(message_clear_start:gooseai.Metrics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.metrics_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.total_ != nullptr) {
    delete _impl_.total_;
  }
  _impl_.total_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Metrics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .gooseai.UsageMetric metrics = 1 [json_name = "metrics"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .gooseai.TotalMetricsData total = 2 [json_name = "total"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_total(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Metrics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gooseai.Metrics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gooseai.UsageMetric metrics = 1 [json_name = "metrics"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_metrics_size()); i < n; i++) {
    const auto& repfield = this->_internal_metrics(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .gooseai.TotalMetricsData total = 2 [json_name = "total"];
  if (this->_internal_has_total()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::total(this),
        _Internal::total(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gooseai.Metrics)
  return target;
}

size_t Metrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gooseai.Metrics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gooseai.UsageMetric metrics = 1 [json_name = "metrics"];
  total_size += 1UL * this->_internal_metrics_size();
  for (const auto& msg : this->_impl_.metrics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .gooseai.TotalMetricsData total = 2 [json_name = "total"];
  if (this->_internal_has_total()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.total_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Metrics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Metrics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Metrics::GetClassData() const { return &_class_data_; }


void Metrics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Metrics*>(&to_msg);
  auto& from = static_cast<const Metrics&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:gooseai.Metrics)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.metrics_.MergeFrom(from._impl_.metrics_);
  if (from._internal_has_total()) {
    _this->_internal_mutable_total()->::gooseai::TotalMetricsData::MergeFrom(
        from._internal_total());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Metrics::CopyFrom(const Metrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gooseai.Metrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metrics::IsInitialized() const {
  return true;
}

void Metrics::InternalSwap(Metrics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.metrics_.InternalSwap(&other->_impl_.metrics_);
  swap(_impl_.total_, other->_impl_.total_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Metrics::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dashboard_2eproto_getter, &descriptor_table_dashboard_2eproto_once,
      file_level_metadata_dashboard_2eproto[11]);
}

// ===================================================================

class EmptyRequest::_Internal {
 public:
};

EmptyRequest::EmptyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:gooseai.EmptyRequest)
}
EmptyRequest::EmptyRequest(const EmptyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  EmptyRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gooseai.EmptyRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EmptyRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EmptyRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata EmptyRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dashboard_2eproto_getter, &descriptor_table_dashboard_2eproto_once,
      file_level_metadata_dashboard_2eproto[12]);
}

// ===================================================================

class GetOrganizationRequest::_Internal {
 public:
};

GetOrganizationRequest::GetOrganizationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:gooseai.GetOrganizationRequest)
}
GetOrganizationRequest::GetOrganizationRequest(const GetOrganizationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetOrganizationRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:gooseai.GetOrganizationRequest)
}

inline void GetOrganizationRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetOrganizationRequest::~GetOrganizationRequest() {
  // @@protoc_insertion_point(destructor:gooseai.GetOrganizationRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetOrganizationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
}

void GetOrganizationRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetOrganizationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gooseai.GetOrganizationRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetOrganizationRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "gooseai.GetOrganizationRequest.id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetOrganizationRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gooseai.GetOrganizationRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gooseai.GetOrganizationRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gooseai.GetOrganizationRequest)
  return target;
}

size_t GetOrganizationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gooseai.GetOrganizationRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetOrganizationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetOrganizationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetOrganizationRequest::GetClassData() const { return &_class_data_; }


void GetOrganizationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetOrganizationRequest*>(&to_msg);
  auto& from = static_cast<const GetOrganizationRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:gooseai.GetOrganizationRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetOrganizationRequest::CopyFrom(const GetOrganizationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gooseai.GetOrganizationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOrganizationRequest::IsInitialized() const {
  return true;
}

void GetOrganizationRequest::InternalSwap(GetOrganizationRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetOrganizationRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dashboard_2eproto_getter, &descriptor_table_dashboard_2eproto_once,
      file_level_metadata_dashboard_2eproto[13]);
}

// ===================================================================

class GetMetricsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetMetricsRequest>()._impl_._has_bits_);
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GetMetricsRequest::GetMetricsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:gooseai.GetMetricsRequest)
}
GetMetricsRequest::GetMetricsRequest(const GetMetricsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetMetricsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.organization_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.range_from_){}
    , decltype(_impl_.range_to_){}
    , decltype(_impl_.include_per_request_metrics_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.organization_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.organization_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_organization_id().empty()) {
    _this->_impl_.organization_id_.Set(from._internal_organization_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_user_id()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.range_from_, &from._impl_.range_from_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.include_per_request_metrics_) -
    reinterpret_cast<char*>(&_impl_.range_from_)) + sizeof(_impl_.include_per_request_metrics_));
  // @@protoc_insertion_point(copy_constructor:gooseai.GetMetricsRequest)
}

inline void GetMetricsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.organization_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.range_from_){uint64_t{0u}}
    , decltype(_impl_.range_to_){uint64_t{0u}}
    , decltype(_impl_.include_per_request_metrics_){false}
  };
  _impl_.organization_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.organization_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetMetricsRequest::~GetMetricsRequest() {
  // @@protoc_insertion_point(destructor:gooseai.GetMetricsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetMetricsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.organization_id_.Destroy();
  _impl_.user_id_.Destroy();
}

void GetMetricsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetMetricsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gooseai.GetMetricsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.organization_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.user_id_.ClearNonDefaultToEmpty();
  }
  ::memset(&_impl_.range_from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.include_per_request_metrics_) -
      reinterpret_cast<char*>(&_impl_.range_from_)) + sizeof(_impl_.include_per_request_metrics_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetMetricsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string organization_id = 1 [json_name = "organizationId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_organization_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "gooseai.GetMetricsRequest.organization_id"));
        } else
          goto handle_unusual;
        continue;
      // optional string user_id = 2 [json_name = "userId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "gooseai.GetMetricsRequest.user_id"));
        } else
          goto handle_unusual;
        continue;
      // uint64 range_from = 3 [json_name = "rangeFrom"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.range_from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 range_to = 4 [json_name = "rangeTo"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.range_to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool include_per_request_metrics = 5 [json_name = "includePerRequestMetrics"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.include_per_request_metrics_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetMetricsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gooseai.GetMetricsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string organization_id = 1 [json_name = "organizationId"];
  if (!this->_internal_organization_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_organization_id().data(), static_cast<int>(this->_internal_organization_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gooseai.GetMetricsRequest.organization_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_organization_id(), target);
  }

  // optional string user_id = 2 [json_name = "userId"];
  if (_internal_has_user_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gooseai.GetMetricsRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_id(), target);
  }

  // uint64 range_from = 3 [json_name = "rangeFrom"];
  if (this->_internal_range_from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_range_from(), target);
  }

  // uint64 range_to = 4 [json_name = "rangeTo"];
  if (this->_internal_range_to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_range_to(), target);
  }

  // bool include_per_request_metrics = 5 [json_name = "includePerRequestMetrics"];
  if (this->_internal_include_per_request_metrics() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_include_per_request_metrics(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gooseai.GetMetricsRequest)
  return target;
}

size_t GetMetricsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gooseai.GetMetricsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string organization_id = 1 [json_name = "organizationId"];
  if (!this->_internal_organization_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_organization_id());
  }

  // optional string user_id = 2 [json_name = "userId"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // uint64 range_from = 3 [json_name = "rangeFrom"];
  if (this->_internal_range_from() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_range_from());
  }

  // uint64 range_to = 4 [json_name = "rangeTo"];
  if (this->_internal_range_to() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_range_to());
  }

  // bool include_per_request_metrics = 5 [json_name = "includePerRequestMetrics"];
  if (this->_internal_include_per_request_metrics() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetMetricsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetMetricsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetMetricsRequest::GetClassData() const { return &_class_data_; }


void GetMetricsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetMetricsRequest*>(&to_msg);
  auto& from = static_cast<const GetMetricsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:gooseai.GetMetricsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_organization_id().empty()) {
    _this->_internal_set_organization_id(from._internal_organization_id());
  }
  if (from._internal_has_user_id()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_range_from() != 0) {
    _this->_internal_set_range_from(from._internal_range_from());
  }
  if (from._internal_range_to() != 0) {
    _this->_internal_set_range_to(from._internal_range_to());
  }
  if (from._internal_include_per_request_metrics() != 0) {
    _this->_internal_set_include_per_request_metrics(from._internal_include_per_request_metrics());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetMetricsRequest::CopyFrom(const GetMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gooseai.GetMetricsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMetricsRequest::IsInitialized() const {
  return true;
}

void GetMetricsRequest::InternalSwap(GetMetricsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.organization_id_, lhs_arena,
      &other->_impl_.organization_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetMetricsRequest, _impl_.include_per_request_metrics_)
      + sizeof(GetMetricsRequest::_impl_.include_per_request_metrics_)
      - PROTOBUF_FIELD_OFFSET(GetMetricsRequest, _impl_.range_from_)>(
          reinterpret_cast<char*>(&_impl_.range_from_),
          reinterpret_cast<char*>(&other->_impl_.range_from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMetricsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dashboard_2eproto_getter, &descriptor_table_dashboard_2eproto_once,
      file_level_metadata_dashboard_2eproto[14]);
}

// ===================================================================

class APIKeyRequest::_Internal {
 public:
};

APIKeyRequest::APIKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:gooseai.APIKeyRequest)
}
APIKeyRequest::APIKeyRequest(const APIKeyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  APIKeyRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.is_secret_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.is_secret_ = from._impl_.is_secret_;
  // @@protoc_insertion_point(copy_constructor:gooseai.APIKeyRequest)
}

inline void APIKeyRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.is_secret_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

APIKeyRequest::~APIKeyRequest() {
  // @@protoc_insertion_point(destructor:gooseai.APIKeyRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void APIKeyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void APIKeyRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void APIKeyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gooseai.APIKeyRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.is_secret_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* APIKeyRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool is_secret = 1 [json_name = "isSecret"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.is_secret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* APIKeyRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gooseai.APIKeyRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_secret = 1 [json_name = "isSecret"];
  if (this->_internal_is_secret() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_is_secret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gooseai.APIKeyRequest)
  return target;
}

size_t APIKeyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gooseai.APIKeyRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_secret = 1 [json_name = "isSecret"];
  if (this->_internal_is_secret() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData APIKeyRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    APIKeyRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*APIKeyRequest::GetClassData() const { return &_class_data_; }


void APIKeyRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<APIKeyRequest*>(&to_msg);
  auto& from = static_cast<const APIKeyRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:gooseai.APIKeyRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_is_secret() != 0) {
    _this->_internal_set_is_secret(from._internal_is_secret());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void APIKeyRequest::CopyFrom(const APIKeyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gooseai.APIKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool APIKeyRequest::IsInitialized() const {
  return true;
}

void APIKeyRequest::InternalSwap(APIKeyRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.is_secret_, other->_impl_.is_secret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata APIKeyRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dashboard_2eproto_getter, &descriptor_table_dashboard_2eproto_once,
      file_level_metadata_dashboard_2eproto[15]);
}

// ===================================================================

class APIKeyFindRequest::_Internal {
 public:
};

APIKeyFindRequest::APIKeyFindRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:gooseai.APIKeyFindRequest)
}
APIKeyFindRequest::APIKeyFindRequest(const APIKeyFindRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  APIKeyFindRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:gooseai.APIKeyFindRequest)
}

inline void APIKeyFindRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

APIKeyFindRequest::~APIKeyFindRequest() {
  // @@protoc_insertion_point(destructor:gooseai.APIKeyFindRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void APIKeyFindRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
}

void APIKeyFindRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void APIKeyFindRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gooseai.APIKeyFindRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* APIKeyFindRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "gooseai.APIKeyFindRequest.id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* APIKeyFindRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gooseai.APIKeyFindRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gooseai.APIKeyFindRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gooseai.APIKeyFindRequest)
  return target;
}

size_t APIKeyFindRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gooseai.APIKeyFindRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData APIKeyFindRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    APIKeyFindRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*APIKeyFindRequest::GetClassData() const { return &_class_data_; }


void APIKeyFindRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<APIKeyFindRequest*>(&to_msg);
  auto& from = static_cast<const APIKeyFindRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:gooseai.APIKeyFindRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void APIKeyFindRequest::CopyFrom(const APIKeyFindRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gooseai.APIKeyFindRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool APIKeyFindRequest::IsInitialized() const {
  return true;
}

void APIKeyFindRequest::InternalSwap(APIKeyFindRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata APIKeyFindRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dashboard_2eproto_getter, &descriptor_table_dashboard_2eproto_once,
      file_level_metadata_dashboard_2eproto[16]);
}

// ===================================================================

class UpdateDefaultOrganizationRequest::_Internal {
 public:
};

UpdateDefaultOrganizationRequest::UpdateDefaultOrganizationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:gooseai.UpdateDefaultOrganizationRequest)
}
UpdateDefaultOrganizationRequest::UpdateDefaultOrganizationRequest(const UpdateDefaultOrganizationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateDefaultOrganizationRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.organization_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.organization_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.organization_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_organization_id().empty()) {
    _this->_impl_.organization_id_.Set(from._internal_organization_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:gooseai.UpdateDefaultOrganizationRequest)
}

inline void UpdateDefaultOrganizationRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.organization_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.organization_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.organization_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UpdateDefaultOrganizationRequest::~UpdateDefaultOrganizationRequest() {
  // @@protoc_insertion_point(destructor:gooseai.UpdateDefaultOrganizationRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateDefaultOrganizationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.organization_id_.Destroy();
}

void UpdateDefaultOrganizationRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateDefaultOrganizationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gooseai.UpdateDefaultOrganizationRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.organization_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateDefaultOrganizationRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string organization_id = 1 [json_name = "organizationId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_organization_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "gooseai.UpdateDefaultOrganizationRequest.organization_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateDefaultOrganizationRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gooseai.UpdateDefaultOrganizationRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string organization_id = 1 [json_name = "organizationId"];
  if (!this->_internal_organization_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_organization_id().data(), static_cast<int>(this->_internal_organization_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gooseai.UpdateDefaultOrganizationRequest.organization_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_organization_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gooseai.UpdateDefaultOrganizationRequest)
  return target;
}

size_t UpdateDefaultOrganizationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gooseai.UpdateDefaultOrganizationRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string organization_id = 1 [json_name = "organizationId"];
  if (!this->_internal_organization_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_organization_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateDefaultOrganizationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateDefaultOrganizationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateDefaultOrganizationRequest::GetClassData() const { return &_class_data_; }


void UpdateDefaultOrganizationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateDefaultOrganizationRequest*>(&to_msg);
  auto& from = static_cast<const UpdateDefaultOrganizationRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:gooseai.UpdateDefaultOrganizationRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_organization_id().empty()) {
    _this->_internal_set_organization_id(from._internal_organization_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateDefaultOrganizationRequest::CopyFrom(const UpdateDefaultOrganizationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gooseai.UpdateDefaultOrganizationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateDefaultOrganizationRequest::IsInitialized() const {
  return true;
}

void UpdateDefaultOrganizationRequest::InternalSwap(UpdateDefaultOrganizationRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.organization_id_, lhs_arena,
      &other->_impl_.organization_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateDefaultOrganizationRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dashboard_2eproto_getter, &descriptor_table_dashboard_2eproto_once,
      file_level_metadata_dashboard_2eproto[17]);
}

// ===================================================================

class ClientSettings::_Internal {
 public:
};

ClientSettings::ClientSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:gooseai.ClientSettings)
}
ClientSettings::ClientSettings(const ClientSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ClientSettings* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.settings_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.settings_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.settings_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_settings().empty()) {
    _this->_impl_.settings_.Set(from._internal_settings(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:gooseai.ClientSettings)
}

inline void ClientSettings::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.settings_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.settings_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.settings_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ClientSettings::~ClientSettings() {
  // @@protoc_insertion_point(destructor:gooseai.ClientSettings)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.settings_.Destroy();
}

void ClientSettings::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClientSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:gooseai.ClientSettings)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.settings_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientSettings::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes settings = 1 [json_name = "settings"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_settings();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientSettings::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gooseai.ClientSettings)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes settings = 1 [json_name = "settings"];
  if (!this->_internal_settings().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_settings(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gooseai.ClientSettings)
  return target;
}

size_t ClientSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gooseai.ClientSettings)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes settings = 1 [json_name = "settings"];
  if (!this->_internal_settings().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_settings());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientSettings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClientSettings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientSettings::GetClassData() const { return &_class_data_; }


void ClientSettings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClientSettings*>(&to_msg);
  auto& from = static_cast<const ClientSettings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:gooseai.ClientSettings)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_settings().empty()) {
    _this->_internal_set_settings(from._internal_settings());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientSettings::CopyFrom(const ClientSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gooseai.ClientSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientSettings::IsInitialized() const {
  return true;
}

void ClientSettings::InternalSwap(ClientSettings* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.settings_, lhs_arena,
      &other->_impl_.settings_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientSettings::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dashboard_2eproto_getter, &descriptor_table_dashboard_2eproto_once,
      file_level_metadata_dashboard_2eproto[18]);
}

// ===================================================================

class CreateAutoChargeIntentRequest::_Internal {
 public:
};

CreateAutoChargeIntentRequest::CreateAutoChargeIntentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:gooseai.CreateAutoChargeIntentRequest)
}
CreateAutoChargeIntentRequest::CreateAutoChargeIntentRequest(const CreateAutoChargeIntentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateAutoChargeIntentRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.organization_id_){}
    , decltype(_impl_.monthly_maximum_){}
    , decltype(_impl_.minimum_value_){}
    , decltype(_impl_.amount_credits_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.organization_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.organization_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_organization_id().empty()) {
    _this->_impl_.organization_id_.Set(from._internal_organization_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.monthly_maximum_, &from._impl_.monthly_maximum_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.amount_credits_) -
    reinterpret_cast<char*>(&_impl_.monthly_maximum_)) + sizeof(_impl_.amount_credits_));
  // @@protoc_insertion_point(copy_constructor:gooseai.CreateAutoChargeIntentRequest)
}

inline void CreateAutoChargeIntentRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.organization_id_){}
    , decltype(_impl_.monthly_maximum_){uint64_t{0u}}
    , decltype(_impl_.minimum_value_){uint64_t{0u}}
    , decltype(_impl_.amount_credits_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.organization_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.organization_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateAutoChargeIntentRequest::~CreateAutoChargeIntentRequest() {
  // @@protoc_insertion_point(destructor:gooseai.CreateAutoChargeIntentRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateAutoChargeIntentRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.organization_id_.Destroy();
}

void CreateAutoChargeIntentRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateAutoChargeIntentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gooseai.CreateAutoChargeIntentRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.organization_id_.ClearToEmpty();
  ::memset(&_impl_.monthly_maximum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.amount_credits_) -
      reinterpret_cast<char*>(&_impl_.monthly_maximum_)) + sizeof(_impl_.amount_credits_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateAutoChargeIntentRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string organization_id = 1 [json_name = "organizationId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_organization_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "gooseai.CreateAutoChargeIntentRequest.organization_id"));
        } else
          goto handle_unusual;
        continue;
      // uint64 monthly_maximum = 2 [json_name = "monthlyMaximum"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.monthly_maximum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 minimum_value = 3 [json_name = "minimumValue"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.minimum_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 amount_credits = 4 [json_name = "amountCredits"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.amount_credits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateAutoChargeIntentRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gooseai.CreateAutoChargeIntentRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string organization_id = 1 [json_name = "organizationId"];
  if (!this->_internal_organization_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_organization_id().data(), static_cast<int>(this->_internal_organization_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gooseai.CreateAutoChargeIntentRequest.organization_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_organization_id(), target);
  }

  // uint64 monthly_maximum = 2 [json_name = "monthlyMaximum"];
  if (this->_internal_monthly_maximum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_monthly_maximum(), target);
  }

  // uint64 minimum_value = 3 [json_name = "minimumValue"];
  if (this->_internal_minimum_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_minimum_value(), target);
  }

  // uint64 amount_credits = 4 [json_name = "amountCredits"];
  if (this->_internal_amount_credits() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_amount_credits(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gooseai.CreateAutoChargeIntentRequest)
  return target;
}

size_t CreateAutoChargeIntentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gooseai.CreateAutoChargeIntentRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string organization_id = 1 [json_name = "organizationId"];
  if (!this->_internal_organization_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_organization_id());
  }

  // uint64 monthly_maximum = 2 [json_name = "monthlyMaximum"];
  if (this->_internal_monthly_maximum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_monthly_maximum());
  }

  // uint64 minimum_value = 3 [json_name = "minimumValue"];
  if (this->_internal_minimum_value() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_minimum_value());
  }

  // uint64 amount_credits = 4 [json_name = "amountCredits"];
  if (this->_internal_amount_credits() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_amount_credits());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateAutoChargeIntentRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateAutoChargeIntentRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateAutoChargeIntentRequest::GetClassData() const { return &_class_data_; }


void CreateAutoChargeIntentRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateAutoChargeIntentRequest*>(&to_msg);
  auto& from = static_cast<const CreateAutoChargeIntentRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:gooseai.CreateAutoChargeIntentRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_organization_id().empty()) {
    _this->_internal_set_organization_id(from._internal_organization_id());
  }
  if (from._internal_monthly_maximum() != 0) {
    _this->_internal_set_monthly_maximum(from._internal_monthly_maximum());
  }
  if (from._internal_minimum_value() != 0) {
    _this->_internal_set_minimum_value(from._internal_minimum_value());
  }
  if (from._internal_amount_credits() != 0) {
    _this->_internal_set_amount_credits(from._internal_amount_credits());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateAutoChargeIntentRequest::CopyFrom(const CreateAutoChargeIntentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gooseai.CreateAutoChargeIntentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateAutoChargeIntentRequest::IsInitialized() const {
  return true;
}

void CreateAutoChargeIntentRequest::InternalSwap(CreateAutoChargeIntentRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.organization_id_, lhs_arena,
      &other->_impl_.organization_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateAutoChargeIntentRequest, _impl_.amount_credits_)
      + sizeof(CreateAutoChargeIntentRequest::_impl_.amount_credits_)
      - PROTOBUF_FIELD_OFFSET(CreateAutoChargeIntentRequest, _impl_.monthly_maximum_)>(
          reinterpret_cast<char*>(&_impl_.monthly_maximum_),
          reinterpret_cast<char*>(&other->_impl_.monthly_maximum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateAutoChargeIntentRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dashboard_2eproto_getter, &descriptor_table_dashboard_2eproto_once,
      file_level_metadata_dashboard_2eproto[19]);
}

// ===================================================================

class CreateChargeRequest::_Internal {
 public:
};

CreateChargeRequest::CreateChargeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:gooseai.CreateChargeRequest)
}
CreateChargeRequest::CreateChargeRequest(const CreateChargeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateChargeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.organization_id_){}
    , decltype(_impl_.amount_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.organization_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.organization_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_organization_id().empty()) {
    _this->_impl_.organization_id_.Set(from._internal_organization_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.amount_ = from._impl_.amount_;
  // @@protoc_insertion_point(copy_constructor:gooseai.CreateChargeRequest)
}

inline void CreateChargeRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.organization_id_){}
    , decltype(_impl_.amount_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.organization_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.organization_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateChargeRequest::~CreateChargeRequest() {
  // @@protoc_insertion_point(destructor:gooseai.CreateChargeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateChargeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.organization_id_.Destroy();
}

void CreateChargeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateChargeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gooseai.CreateChargeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.organization_id_.ClearToEmpty();
  _impl_.amount_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateChargeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 amount = 1 [json_name = "amount"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string organization_id = 2 [json_name = "organizationId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_organization_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "gooseai.CreateChargeRequest.organization_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateChargeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gooseai.CreateChargeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 amount = 1 [json_name = "amount"];
  if (this->_internal_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_amount(), target);
  }

  // string organization_id = 2 [json_name = "organizationId"];
  if (!this->_internal_organization_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_organization_id().data(), static_cast<int>(this->_internal_organization_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gooseai.CreateChargeRequest.organization_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_organization_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gooseai.CreateChargeRequest)
  return target;
}

size_t CreateChargeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gooseai.CreateChargeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string organization_id = 2 [json_name = "organizationId"];
  if (!this->_internal_organization_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_organization_id());
  }

  // uint64 amount = 1 [json_name = "amount"];
  if (this->_internal_amount() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_amount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateChargeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateChargeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateChargeRequest::GetClassData() const { return &_class_data_; }


void CreateChargeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateChargeRequest*>(&to_msg);
  auto& from = static_cast<const CreateChargeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:gooseai.CreateChargeRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_organization_id().empty()) {
    _this->_internal_set_organization_id(from._internal_organization_id());
  }
  if (from._internal_amount() != 0) {
    _this->_internal_set_amount(from._internal_amount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateChargeRequest::CopyFrom(const CreateChargeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gooseai.CreateChargeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateChargeRequest::IsInitialized() const {
  return true;
}

void CreateChargeRequest::InternalSwap(CreateChargeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.organization_id_, lhs_arena,
      &other->_impl_.organization_id_, rhs_arena
  );
  swap(_impl_.amount_, other->_impl_.amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateChargeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dashboard_2eproto_getter, &descriptor_table_dashboard_2eproto_once,
      file_level_metadata_dashboard_2eproto[20]);
}

// ===================================================================

class GetChargesRequest::_Internal {
 public:
};

GetChargesRequest::GetChargesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:gooseai.GetChargesRequest)
}
GetChargesRequest::GetChargesRequest(const GetChargesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetChargesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.organization_id_){}
    , decltype(_impl_.range_from_){}
    , decltype(_impl_.range_to_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.organization_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.organization_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_organization_id().empty()) {
    _this->_impl_.organization_id_.Set(from._internal_organization_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.range_from_, &from._impl_.range_from_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.range_to_) -
    reinterpret_cast<char*>(&_impl_.range_from_)) + sizeof(_impl_.range_to_));
  // @@protoc_insertion_point(copy_constructor:gooseai.GetChargesRequest)
}

inline void GetChargesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.organization_id_){}
    , decltype(_impl_.range_from_){uint64_t{0u}}
    , decltype(_impl_.range_to_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.organization_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.organization_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetChargesRequest::~GetChargesRequest() {
  // @@protoc_insertion_point(destructor:gooseai.GetChargesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetChargesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.organization_id_.Destroy();
}

void GetChargesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetChargesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gooseai.GetChargesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.organization_id_.ClearToEmpty();
  ::memset(&_impl_.range_from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.range_to_) -
      reinterpret_cast<char*>(&_impl_.range_from_)) + sizeof(_impl_.range_to_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetChargesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string organization_id = 1 [json_name = "organizationId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_organization_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "gooseai.GetChargesRequest.organization_id"));
        } else
          goto handle_unusual;
        continue;
      // uint64 range_from = 2 [json_name = "rangeFrom"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.range_from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 range_to = 3 [json_name = "rangeTo"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.range_to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetChargesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gooseai.GetChargesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string organization_id = 1 [json_name = "organizationId"];
  if (!this->_internal_organization_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_organization_id().data(), static_cast<int>(this->_internal_organization_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gooseai.GetChargesRequest.organization_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_organization_id(), target);
  }

  // uint64 range_from = 2 [json_name = "rangeFrom"];
  if (this->_internal_range_from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_range_from(), target);
  }

  // uint64 range_to = 3 [json_name = "rangeTo"];
  if (this->_internal_range_to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_range_to(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gooseai.GetChargesRequest)
  return target;
}

size_t GetChargesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gooseai.GetChargesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string organization_id = 1 [json_name = "organizationId"];
  if (!this->_internal_organization_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_organization_id());
  }

  // uint64 range_from = 2 [json_name = "rangeFrom"];
  if (this->_internal_range_from() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_range_from());
  }

  // uint64 range_to = 3 [json_name = "rangeTo"];
  if (this->_internal_range_to() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_range_to());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetChargesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetChargesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetChargesRequest::GetClassData() const { return &_class_data_; }


void GetChargesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetChargesRequest*>(&to_msg);
  auto& from = static_cast<const GetChargesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:gooseai.GetChargesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_organization_id().empty()) {
    _this->_internal_set_organization_id(from._internal_organization_id());
  }
  if (from._internal_range_from() != 0) {
    _this->_internal_set_range_from(from._internal_range_from());
  }
  if (from._internal_range_to() != 0) {
    _this->_internal_set_range_to(from._internal_range_to());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetChargesRequest::CopyFrom(const GetChargesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gooseai.GetChargesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChargesRequest::IsInitialized() const {
  return true;
}

void GetChargesRequest::InternalSwap(GetChargesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.organization_id_, lhs_arena,
      &other->_impl_.organization_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetChargesRequest, _impl_.range_to_)
      + sizeof(GetChargesRequest::_impl_.range_to_)
      - PROTOBUF_FIELD_OFFSET(GetChargesRequest, _impl_.range_from_)>(
          reinterpret_cast<char*>(&_impl_.range_from_),
          reinterpret_cast<char*>(&other->_impl_.range_from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetChargesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dashboard_2eproto_getter, &descriptor_table_dashboard_2eproto_once,
      file_level_metadata_dashboard_2eproto[21]);
}

// ===================================================================

class Charge::_Internal {
 public:
};

Charge::Charge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:gooseai.Charge)
}
Charge::Charge(const Charge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Charge* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.receipt_link_){}
    , decltype(_impl_.payment_link_){}
    , decltype(_impl_.created_at_){}
    , decltype(_impl_.amount_credits_){}
    , decltype(_impl_.paid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.receipt_link_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.receipt_link_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_receipt_link().empty()) {
    _this->_impl_.receipt_link_.Set(from._internal_receipt_link(), 
      _this->GetArenaForAllocation());
  }
  _impl_.payment_link_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payment_link_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payment_link().empty()) {
    _this->_impl_.payment_link_.Set(from._internal_payment_link(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.created_at_, &from._impl_.created_at_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.paid_) -
    reinterpret_cast<char*>(&_impl_.created_at_)) + sizeof(_impl_.paid_));
  // @@protoc_insertion_point(copy_constructor:gooseai.Charge)
}

inline void Charge::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.receipt_link_){}
    , decltype(_impl_.payment_link_){}
    , decltype(_impl_.created_at_){uint64_t{0u}}
    , decltype(_impl_.amount_credits_){uint64_t{0u}}
    , decltype(_impl_.paid_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.receipt_link_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.receipt_link_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.payment_link_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payment_link_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Charge::~Charge() {
  // @@protoc_insertion_point(destructor:gooseai.Charge)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Charge::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.receipt_link_.Destroy();
  _impl_.payment_link_.Destroy();
}

void Charge::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Charge::Clear() {
// @@protoc_insertion_point(message_clear_start:gooseai.Charge)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.receipt_link_.ClearToEmpty();
  _impl_.payment_link_.ClearToEmpty();
  ::memset(&_impl_.created_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.paid_) -
      reinterpret_cast<char*>(&_impl_.created_at_)) + sizeof(_impl_.paid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Charge::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "gooseai.Charge.id"));
        } else
          goto handle_unusual;
        continue;
      // bool paid = 2 [json_name = "paid"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.paid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string receipt_link = 3 [json_name = "receiptLink"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_receipt_link();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "gooseai.Charge.receipt_link"));
        } else
          goto handle_unusual;
        continue;
      // string payment_link = 4 [json_name = "paymentLink"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_payment_link();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "gooseai.Charge.payment_link"));
        } else
          goto handle_unusual;
        continue;
      // uint64 created_at = 5 [json_name = "createdAt"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 amount_credits = 6 [json_name = "amountCredits"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.amount_credits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Charge::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gooseai.Charge)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gooseai.Charge.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // bool paid = 2 [json_name = "paid"];
  if (this->_internal_paid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_paid(), target);
  }

  // string receipt_link = 3 [json_name = "receiptLink"];
  if (!this->_internal_receipt_link().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_receipt_link().data(), static_cast<int>(this->_internal_receipt_link().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gooseai.Charge.receipt_link");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_receipt_link(), target);
  }

  // string payment_link = 4 [json_name = "paymentLink"];
  if (!this->_internal_payment_link().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payment_link().data(), static_cast<int>(this->_internal_payment_link().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gooseai.Charge.payment_link");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_payment_link(), target);
  }

  // uint64 created_at = 5 [json_name = "createdAt"];
  if (this->_internal_created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_created_at(), target);
  }

  // uint64 amount_credits = 6 [json_name = "amountCredits"];
  if (this->_internal_amount_credits() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_amount_credits(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gooseai.Charge)
  return target;
}

size_t Charge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gooseai.Charge)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string receipt_link = 3 [json_name = "receiptLink"];
  if (!this->_internal_receipt_link().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_receipt_link());
  }

  // string payment_link = 4 [json_name = "paymentLink"];
  if (!this->_internal_payment_link().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payment_link());
  }

  // uint64 created_at = 5 [json_name = "createdAt"];
  if (this->_internal_created_at() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_created_at());
  }

  // uint64 amount_credits = 6 [json_name = "amountCredits"];
  if (this->_internal_amount_credits() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_amount_credits());
  }

  // bool paid = 2 [json_name = "paid"];
  if (this->_internal_paid() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Charge::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Charge::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Charge::GetClassData() const { return &_class_data_; }


void Charge::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Charge*>(&to_msg);
  auto& from = static_cast<const Charge&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:gooseai.Charge)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_receipt_link().empty()) {
    _this->_internal_set_receipt_link(from._internal_receipt_link());
  }
  if (!from._internal_payment_link().empty()) {
    _this->_internal_set_payment_link(from._internal_payment_link());
  }
  if (from._internal_created_at() != 0) {
    _this->_internal_set_created_at(from._internal_created_at());
  }
  if (from._internal_amount_credits() != 0) {
    _this->_internal_set_amount_credits(from._internal_amount_credits());
  }
  if (from._internal_paid() != 0) {
    _this->_internal_set_paid(from._internal_paid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Charge::CopyFrom(const Charge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gooseai.Charge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Charge::IsInitialized() const {
  return true;
}

void Charge::InternalSwap(Charge* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.receipt_link_, lhs_arena,
      &other->_impl_.receipt_link_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.payment_link_, lhs_arena,
      &other->_impl_.payment_link_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Charge, _impl_.paid_)
      + sizeof(Charge::_impl_.paid_)
      - PROTOBUF_FIELD_OFFSET(Charge, _impl_.created_at_)>(
          reinterpret_cast<char*>(&_impl_.created_at_),
          reinterpret_cast<char*>(&other->_impl_.created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Charge::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dashboard_2eproto_getter, &descriptor_table_dashboard_2eproto_once,
      file_level_metadata_dashboard_2eproto[22]);
}

// ===================================================================

class Charges::_Internal {
 public:
};

Charges::Charges(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:gooseai.Charges)
}
Charges::Charges(const Charges& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Charges* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.charges_){from._impl_.charges_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gooseai.Charges)
}

inline void Charges::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.charges_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Charges::~Charges() {
  // @@protoc_insertion_point(destructor:gooseai.Charges)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Charges::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.charges_.~RepeatedPtrField();
}

void Charges::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Charges::Clear() {
// @@protoc_insertion_point(message_clear_start:gooseai.Charges)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.charges_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Charges::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .gooseai.Charge charges = 1 [json_name = "charges"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_charges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Charges::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gooseai.Charges)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gooseai.Charge charges = 1 [json_name = "charges"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_charges_size()); i < n; i++) {
    const auto& repfield = this->_internal_charges(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gooseai.Charges)
  return target;
}

size_t Charges::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gooseai.Charges)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gooseai.Charge charges = 1 [json_name = "charges"];
  total_size += 1UL * this->_internal_charges_size();
  for (const auto& msg : this->_impl_.charges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Charges::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Charges::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Charges::GetClassData() const { return &_class_data_; }


void Charges::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Charges*>(&to_msg);
  auto& from = static_cast<const Charges&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:gooseai.Charges)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.charges_.MergeFrom(from._impl_.charges_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Charges::CopyFrom(const Charges& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gooseai.Charges)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Charges::IsInitialized() const {
  return true;
}

void Charges::InternalSwap(Charges* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.charges_.InternalSwap(&other->_impl_.charges_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Charges::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dashboard_2eproto_getter, &descriptor_table_dashboard_2eproto_once,
      file_level_metadata_dashboard_2eproto[23]);
}

// ===================================================================

class GetAutoChargeRequest::_Internal {
 public:
};

GetAutoChargeRequest::GetAutoChargeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:gooseai.GetAutoChargeRequest)
}
GetAutoChargeRequest::GetAutoChargeRequest(const GetAutoChargeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetAutoChargeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.organization_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.organization_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.organization_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_organization_id().empty()) {
    _this->_impl_.organization_id_.Set(from._internal_organization_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:gooseai.GetAutoChargeRequest)
}

inline void GetAutoChargeRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.organization_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.organization_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.organization_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetAutoChargeRequest::~GetAutoChargeRequest() {
  // @@protoc_insertion_point(destructor:gooseai.GetAutoChargeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetAutoChargeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.organization_id_.Destroy();
}

void GetAutoChargeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetAutoChargeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gooseai.GetAutoChargeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.organization_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAutoChargeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string organization_id = 1 [json_name = "organizationId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_organization_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "gooseai.GetAutoChargeRequest.organization_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetAutoChargeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gooseai.GetAutoChargeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string organization_id = 1 [json_name = "organizationId"];
  if (!this->_internal_organization_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_organization_id().data(), static_cast<int>(this->_internal_organization_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gooseai.GetAutoChargeRequest.organization_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_organization_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gooseai.GetAutoChargeRequest)
  return target;
}

size_t GetAutoChargeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gooseai.GetAutoChargeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string organization_id = 1 [json_name = "organizationId"];
  if (!this->_internal_organization_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_organization_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAutoChargeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetAutoChargeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAutoChargeRequest::GetClassData() const { return &_class_data_; }


void GetAutoChargeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetAutoChargeRequest*>(&to_msg);
  auto& from = static_cast<const GetAutoChargeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:gooseai.GetAutoChargeRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_organization_id().empty()) {
    _this->_internal_set_organization_id(from._internal_organization_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetAutoChargeRequest::CopyFrom(const GetAutoChargeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gooseai.GetAutoChargeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAutoChargeRequest::IsInitialized() const {
  return true;
}

void GetAutoChargeRequest::InternalSwap(GetAutoChargeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.organization_id_, lhs_arena,
      &other->_impl_.organization_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAutoChargeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dashboard_2eproto_getter, &descriptor_table_dashboard_2eproto_once,
      file_level_metadata_dashboard_2eproto[24]);
}

// ===================================================================

class AutoChargeIntent::_Internal {
 public:
};

AutoChargeIntent::AutoChargeIntent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:gooseai.AutoChargeIntent)
}
AutoChargeIntent::AutoChargeIntent(const AutoChargeIntent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AutoChargeIntent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.payment_link_){}
    , decltype(_impl_.created_at_){}
    , decltype(_impl_.monthly_maximum_){}
    , decltype(_impl_.minimum_value_){}
    , decltype(_impl_.amount_credits_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.payment_link_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payment_link_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payment_link().empty()) {
    _this->_impl_.payment_link_.Set(from._internal_payment_link(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.created_at_, &from._impl_.created_at_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.amount_credits_) -
    reinterpret_cast<char*>(&_impl_.created_at_)) + sizeof(_impl_.amount_credits_));
  // @@protoc_insertion_point(copy_constructor:gooseai.AutoChargeIntent)
}

inline void AutoChargeIntent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.payment_link_){}
    , decltype(_impl_.created_at_){uint64_t{0u}}
    , decltype(_impl_.monthly_maximum_){uint64_t{0u}}
    , decltype(_impl_.minimum_value_){uint64_t{0u}}
    , decltype(_impl_.amount_credits_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.payment_link_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payment_link_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AutoChargeIntent::~AutoChargeIntent() {
  // @@protoc_insertion_point(destructor:gooseai.AutoChargeIntent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AutoChargeIntent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.payment_link_.Destroy();
}

void AutoChargeIntent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AutoChargeIntent::Clear() {
// @@protoc_insertion_point(message_clear_start:gooseai.AutoChargeIntent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.payment_link_.ClearToEmpty();
  ::memset(&_impl_.created_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.amount_credits_) -
      reinterpret_cast<char*>(&_impl_.created_at_)) + sizeof(_impl_.amount_credits_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AutoChargeIntent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "gooseai.AutoChargeIntent.id"));
        } else
          goto handle_unusual;
        continue;
      // string payment_link = 2 [json_name = "paymentLink"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_payment_link();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "gooseai.AutoChargeIntent.payment_link"));
        } else
          goto handle_unusual;
        continue;
      // uint64 created_at = 3 [json_name = "createdAt"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 monthly_maximum = 4 [json_name = "monthlyMaximum"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.monthly_maximum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 minimum_value = 5 [json_name = "minimumValue"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.minimum_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 amount_credits = 6 [json_name = "amountCredits"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.amount_credits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AutoChargeIntent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gooseai.AutoChargeIntent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gooseai.AutoChargeIntent.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string payment_link = 2 [json_name = "paymentLink"];
  if (!this->_internal_payment_link().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payment_link().data(), static_cast<int>(this->_internal_payment_link().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gooseai.AutoChargeIntent.payment_link");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_payment_link(), target);
  }

  // uint64 created_at = 3 [json_name = "createdAt"];
  if (this->_internal_created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_created_at(), target);
  }

  // uint64 monthly_maximum = 4 [json_name = "monthlyMaximum"];
  if (this->_internal_monthly_maximum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_monthly_maximum(), target);
  }

  // uint64 minimum_value = 5 [json_name = "minimumValue"];
  if (this->_internal_minimum_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_minimum_value(), target);
  }

  // uint64 amount_credits = 6 [json_name = "amountCredits"];
  if (this->_internal_amount_credits() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_amount_credits(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gooseai.AutoChargeIntent)
  return target;
}

size_t AutoChargeIntent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gooseai.AutoChargeIntent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string payment_link = 2 [json_name = "paymentLink"];
  if (!this->_internal_payment_link().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payment_link());
  }

  // uint64 created_at = 3 [json_name = "createdAt"];
  if (this->_internal_created_at() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_created_at());
  }

  // uint64 monthly_maximum = 4 [json_name = "monthlyMaximum"];
  if (this->_internal_monthly_maximum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_monthly_maximum());
  }

  // uint64 minimum_value = 5 [json_name = "minimumValue"];
  if (this->_internal_minimum_value() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_minimum_value());
  }

  // uint64 amount_credits = 6 [json_name = "amountCredits"];
  if (this->_internal_amount_credits() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_amount_credits());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AutoChargeIntent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AutoChargeIntent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AutoChargeIntent::GetClassData() const { return &_class_data_; }


void AutoChargeIntent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AutoChargeIntent*>(&to_msg);
  auto& from = static_cast<const AutoChargeIntent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:gooseai.AutoChargeIntent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_payment_link().empty()) {
    _this->_internal_set_payment_link(from._internal_payment_link());
  }
  if (from._internal_created_at() != 0) {
    _this->_internal_set_created_at(from._internal_created_at());
  }
  if (from._internal_monthly_maximum() != 0) {
    _this->_internal_set_monthly_maximum(from._internal_monthly_maximum());
  }
  if (from._internal_minimum_value() != 0) {
    _this->_internal_set_minimum_value(from._internal_minimum_value());
  }
  if (from._internal_amount_credits() != 0) {
    _this->_internal_set_amount_credits(from._internal_amount_credits());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AutoChargeIntent::CopyFrom(const AutoChargeIntent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gooseai.AutoChargeIntent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoChargeIntent::IsInitialized() const {
  return true;
}

void AutoChargeIntent::InternalSwap(AutoChargeIntent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.payment_link_, lhs_arena,
      &other->_impl_.payment_link_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AutoChargeIntent, _impl_.amount_credits_)
      + sizeof(AutoChargeIntent::_impl_.amount_credits_)
      - PROTOBUF_FIELD_OFFSET(AutoChargeIntent, _impl_.created_at_)>(
          reinterpret_cast<char*>(&_impl_.created_at_),
          reinterpret_cast<char*>(&other->_impl_.created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AutoChargeIntent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dashboard_2eproto_getter, &descriptor_table_dashboard_2eproto_once,
      file_level_metadata_dashboard_2eproto[25]);
}

// ===================================================================

class UpdateUserInfoRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<UpdateUserInfoRequest>()._impl_._has_bits_);
  static void set_has_email(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UpdateUserInfoRequest::UpdateUserInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:gooseai.UpdateUserInfoRequest)
}
UpdateUserInfoRequest::UpdateUserInfoRequest(const UpdateUserInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateUserInfoRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.email_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_email()) {
    _this->_impl_.email_.Set(from._internal_email(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:gooseai.UpdateUserInfoRequest)
}

inline void UpdateUserInfoRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.email_){}
  };
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UpdateUserInfoRequest::~UpdateUserInfoRequest() {
  // @@protoc_insertion_point(destructor:gooseai.UpdateUserInfoRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateUserInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.email_.Destroy();
}

void UpdateUserInfoRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateUserInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gooseai.UpdateUserInfoRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.email_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateUserInfoRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string email = 1 [json_name = "email"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_email();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "gooseai.UpdateUserInfoRequest.email"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateUserInfoRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gooseai.UpdateUserInfoRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string email = 1 [json_name = "email"];
  if (_internal_has_email()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gooseai.UpdateUserInfoRequest.email");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_email(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gooseai.UpdateUserInfoRequest)
  return target;
}

size_t UpdateUserInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gooseai.UpdateUserInfoRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string email = 1 [json_name = "email"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateUserInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateUserInfoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateUserInfoRequest::GetClassData() const { return &_class_data_; }


void UpdateUserInfoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateUserInfoRequest*>(&to_msg);
  auto& from = static_cast<const UpdateUserInfoRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:gooseai.UpdateUserInfoRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_email()) {
    _this->_internal_set_email(from._internal_email());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateUserInfoRequest::CopyFrom(const UpdateUserInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gooseai.UpdateUserInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateUserInfoRequest::IsInitialized() const {
  return true;
}

void UpdateUserInfoRequest::InternalSwap(UpdateUserInfoRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.email_, lhs_arena,
      &other->_impl_.email_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateUserInfoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dashboard_2eproto_getter, &descriptor_table_dashboard_2eproto_once,
      file_level_metadata_dashboard_2eproto[26]);
}

// ===================================================================

class UserPasswordChangeTicket::_Internal {
 public:
};

UserPasswordChangeTicket::UserPasswordChangeTicket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:gooseai.UserPasswordChangeTicket)
}
UserPasswordChangeTicket::UserPasswordChangeTicket(const UserPasswordChangeTicket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserPasswordChangeTicket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ticket_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ticket_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ticket_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ticket().empty()) {
    _this->_impl_.ticket_.Set(from._internal_ticket(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:gooseai.UserPasswordChangeTicket)
}

inline void UserPasswordChangeTicket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ticket_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.ticket_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ticket_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserPasswordChangeTicket::~UserPasswordChangeTicket() {
  // @@protoc_insertion_point(destructor:gooseai.UserPasswordChangeTicket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserPasswordChangeTicket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ticket_.Destroy();
}

void UserPasswordChangeTicket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserPasswordChangeTicket::Clear() {
// @@protoc_insertion_point(message_clear_start:gooseai.UserPasswordChangeTicket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ticket_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserPasswordChangeTicket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ticket = 1 [json_name = "ticket"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ticket();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "gooseai.UserPasswordChangeTicket.ticket"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserPasswordChangeTicket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gooseai.UserPasswordChangeTicket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ticket = 1 [json_name = "ticket"];
  if (!this->_internal_ticket().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ticket().data(), static_cast<int>(this->_internal_ticket().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gooseai.UserPasswordChangeTicket.ticket");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ticket(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gooseai.UserPasswordChangeTicket)
  return target;
}

size_t UserPasswordChangeTicket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gooseai.UserPasswordChangeTicket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ticket = 1 [json_name = "ticket"];
  if (!this->_internal_ticket().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ticket());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserPasswordChangeTicket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserPasswordChangeTicket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserPasswordChangeTicket::GetClassData() const { return &_class_data_; }


void UserPasswordChangeTicket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserPasswordChangeTicket*>(&to_msg);
  auto& from = static_cast<const UserPasswordChangeTicket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:gooseai.UserPasswordChangeTicket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ticket().empty()) {
    _this->_internal_set_ticket(from._internal_ticket());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserPasswordChangeTicket::CopyFrom(const UserPasswordChangeTicket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gooseai.UserPasswordChangeTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserPasswordChangeTicket::IsInitialized() const {
  return true;
}

void UserPasswordChangeTicket::InternalSwap(UserPasswordChangeTicket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ticket_, lhs_arena,
      &other->_impl_.ticket_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UserPasswordChangeTicket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dashboard_2eproto_getter, &descriptor_table_dashboard_2eproto_once,
      file_level_metadata_dashboard_2eproto[27]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace gooseai
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gooseai::OrganizationMember*
Arena::CreateMaybeMessage< ::gooseai::OrganizationMember >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gooseai::OrganizationMember >(arena);
}
template<> PROTOBUF_NOINLINE ::gooseai::OrganizationGrant*
Arena::CreateMaybeMessage< ::gooseai::OrganizationGrant >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gooseai::OrganizationGrant >(arena);
}
template<> PROTOBUF_NOINLINE ::gooseai::OrganizationPaymentInfo*
Arena::CreateMaybeMessage< ::gooseai::OrganizationPaymentInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gooseai::OrganizationPaymentInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::gooseai::OrganizationAutoCharge*
Arena::CreateMaybeMessage< ::gooseai::OrganizationAutoCharge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gooseai::OrganizationAutoCharge >(arena);
}
template<> PROTOBUF_NOINLINE ::gooseai::Organization*
Arena::CreateMaybeMessage< ::gooseai::Organization >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gooseai::Organization >(arena);
}
template<> PROTOBUF_NOINLINE ::gooseai::APIKey*
Arena::CreateMaybeMessage< ::gooseai::APIKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gooseai::APIKey >(arena);
}
template<> PROTOBUF_NOINLINE ::gooseai::User*
Arena::CreateMaybeMessage< ::gooseai::User >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gooseai::User >(arena);
}
template<> PROTOBUF_NOINLINE ::gooseai::CostData*
Arena::CreateMaybeMessage< ::gooseai::CostData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gooseai::CostData >(arena);
}
template<> PROTOBUF_NOINLINE ::gooseai::UsageMetric*
Arena::CreateMaybeMessage< ::gooseai::UsageMetric >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gooseai::UsageMetric >(arena);
}
template<> PROTOBUF_NOINLINE ::gooseai::CostTotal*
Arena::CreateMaybeMessage< ::gooseai::CostTotal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gooseai::CostTotal >(arena);
}
template<> PROTOBUF_NOINLINE ::gooseai::TotalMetricsData*
Arena::CreateMaybeMessage< ::gooseai::TotalMetricsData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gooseai::TotalMetricsData >(arena);
}
template<> PROTOBUF_NOINLINE ::gooseai::Metrics*
Arena::CreateMaybeMessage< ::gooseai::Metrics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gooseai::Metrics >(arena);
}
template<> PROTOBUF_NOINLINE ::gooseai::EmptyRequest*
Arena::CreateMaybeMessage< ::gooseai::EmptyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gooseai::EmptyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gooseai::GetOrganizationRequest*
Arena::CreateMaybeMessage< ::gooseai::GetOrganizationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gooseai::GetOrganizationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gooseai::GetMetricsRequest*
Arena::CreateMaybeMessage< ::gooseai::GetMetricsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gooseai::GetMetricsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gooseai::APIKeyRequest*
Arena::CreateMaybeMessage< ::gooseai::APIKeyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gooseai::APIKeyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gooseai::APIKeyFindRequest*
Arena::CreateMaybeMessage< ::gooseai::APIKeyFindRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gooseai::APIKeyFindRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gooseai::UpdateDefaultOrganizationRequest*
Arena::CreateMaybeMessage< ::gooseai::UpdateDefaultOrganizationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gooseai::UpdateDefaultOrganizationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gooseai::ClientSettings*
Arena::CreateMaybeMessage< ::gooseai::ClientSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gooseai::ClientSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::gooseai::CreateAutoChargeIntentRequest*
Arena::CreateMaybeMessage< ::gooseai::CreateAutoChargeIntentRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gooseai::CreateAutoChargeIntentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gooseai::CreateChargeRequest*
Arena::CreateMaybeMessage< ::gooseai::CreateChargeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gooseai::CreateChargeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gooseai::GetChargesRequest*
Arena::CreateMaybeMessage< ::gooseai::GetChargesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gooseai::GetChargesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gooseai::Charge*
Arena::CreateMaybeMessage< ::gooseai::Charge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gooseai::Charge >(arena);
}
template<> PROTOBUF_NOINLINE ::gooseai::Charges*
Arena::CreateMaybeMessage< ::gooseai::Charges >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gooseai::Charges >(arena);
}
template<> PROTOBUF_NOINLINE ::gooseai::GetAutoChargeRequest*
Arena::CreateMaybeMessage< ::gooseai::GetAutoChargeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gooseai::GetAutoChargeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gooseai::AutoChargeIntent*
Arena::CreateMaybeMessage< ::gooseai::AutoChargeIntent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gooseai::AutoChargeIntent >(arena);
}
template<> PROTOBUF_NOINLINE ::gooseai::UpdateUserInfoRequest*
Arena::CreateMaybeMessage< ::gooseai::UpdateUserInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gooseai::UpdateUserInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gooseai::UserPasswordChangeTicket*
Arena::CreateMaybeMessage< ::gooseai::UserPasswordChangeTicket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gooseai::UserPasswordChangeTicket >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
