// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: engines.proto

#include "engines.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace gooseai {
PROTOBUF_CONSTEXPR EngineInfo::EngineInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.owner_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ready_)*/false
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.tokenizer_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EngineInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EngineInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EngineInfoDefaultTypeInternal() {}
  union {
    EngineInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EngineInfoDefaultTypeInternal _EngineInfo_default_instance_;
PROTOBUF_CONSTEXPR ListEnginesRequest::ListEnginesRequest(
    ::_pbi::ConstantInitialized) {}
struct ListEnginesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListEnginesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListEnginesRequestDefaultTypeInternal() {}
  union {
    ListEnginesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListEnginesRequestDefaultTypeInternal _ListEnginesRequest_default_instance_;
PROTOBUF_CONSTEXPR Engines::Engines(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.engine_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EnginesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnginesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnginesDefaultTypeInternal() {}
  union {
    Engines _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnginesDefaultTypeInternal _Engines_default_instance_;
}  // namespace gooseai
static ::_pb::Metadata file_level_metadata_engines_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_engines_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_engines_2eproto = nullptr;

const uint32_t TableStruct_engines_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gooseai::EngineInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gooseai::EngineInfo, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::gooseai::EngineInfo, _impl_.owner_),
  PROTOBUF_FIELD_OFFSET(::gooseai::EngineInfo, _impl_.ready_),
  PROTOBUF_FIELD_OFFSET(::gooseai::EngineInfo, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::gooseai::EngineInfo, _impl_.tokenizer_),
  PROTOBUF_FIELD_OFFSET(::gooseai::EngineInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::gooseai::EngineInfo, _impl_.description_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gooseai::ListEnginesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gooseai::Engines, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gooseai::Engines, _impl_.engine_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::gooseai::EngineInfo)},
  { 13, -1, -1, sizeof(::gooseai::ListEnginesRequest)},
  { 19, -1, -1, sizeof(::gooseai::Engines)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::gooseai::_EngineInfo_default_instance_._instance,
  &::gooseai::_ListEnginesRequest_default_instance_._instance,
  &::gooseai::_Engines_default_instance_._instance,
};

const char descriptor_table_protodef_engines_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rengines.proto\022\007gooseai\"\337\001\n\nEngineInfo\022"
  "\016\n\002id\030\001 \001(\tR\002id\022\024\n\005owner\030\002 \001(\tR\005owner\022\024\n"
  "\005ready\030\003 \001(\010R\005ready\022\'\n\004type\030\004 \001(\0162\023.goos"
  "eai.EngineTypeR\004type\0226\n\ttokenizer\030\005 \001(\0162"
  "\030.gooseai.EngineTokenizerR\ttokenizer\022\022\n\004"
  "name\030\006 \001(\tR\004name\022 \n\013description\030\007 \001(\tR\013d"
  "escription\"\024\n\022ListEnginesRequest\"6\n\007Engi"
  "nes\022+\n\006engine\030\001 \003(\0132\023.gooseai.EngineInfo"
  "R\006engine*Z\n\nEngineType\022\010\n\004TEXT\020\000\022\013\n\007PICT"
  "URE\020\001\022\t\n\005AUDIO\020\002\022\t\n\005VIDEO\020\003\022\022\n\016CLASSIFIC"
  "ATION\020\004\022\013\n\007STORAGE\020\005*%\n\017EngineTokenizer\022"
  "\010\n\004GPT2\020\000\022\010\n\004PILE\020\0012P\n\016EnginesService\022>\n"
  "\013ListEngines\022\033.gooseai.ListEnginesReques"
  "t\032\020.gooseai.Engines\"\000B8Z6github.com/stab"
  "ility-ai/api-interfaces/gooseai/enginesb"
  "\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_engines_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_engines_2eproto = {
    false, false, 607, descriptor_table_protodef_engines_2eproto,
    "engines.proto",
    &descriptor_table_engines_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_engines_2eproto::offsets,
    file_level_metadata_engines_2eproto, file_level_enum_descriptors_engines_2eproto,
    file_level_service_descriptors_engines_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_engines_2eproto_getter() {
  return &descriptor_table_engines_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_engines_2eproto(&descriptor_table_engines_2eproto);
namespace gooseai {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EngineType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_engines_2eproto);
  return file_level_enum_descriptors_engines_2eproto[0];
}
bool EngineType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EngineTokenizer_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_engines_2eproto);
  return file_level_enum_descriptors_engines_2eproto[1];
}
bool EngineTokenizer_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class EngineInfo::_Internal {
 public:
};

EngineInfo::EngineInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:gooseai.EngineInfo)
}
EngineInfo::EngineInfo(const EngineInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EngineInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.owner_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.ready_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.tokenizer_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.owner_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.owner_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_owner().empty()) {
    _this->_impl_.owner_.Set(from._internal_owner(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.ready_, &from._impl_.ready_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tokenizer_) -
    reinterpret_cast<char*>(&_impl_.ready_)) + sizeof(_impl_.tokenizer_));
  // @@protoc_insertion_point(copy_constructor:gooseai.EngineInfo)
}

inline void EngineInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.owner_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.ready_){false}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.tokenizer_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.owner_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.owner_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EngineInfo::~EngineInfo() {
  // @@protoc_insertion_point(destructor:gooseai.EngineInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EngineInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.owner_.Destroy();
  _impl_.name_.Destroy();
  _impl_.description_.Destroy();
}

void EngineInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EngineInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:gooseai.EngineInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.owner_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  ::memset(&_impl_.ready_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.tokenizer_) -
      reinterpret_cast<char*>(&_impl_.ready_)) + sizeof(_impl_.tokenizer_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EngineInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "gooseai.EngineInfo.id"));
        } else
          goto handle_unusual;
        continue;
      // string owner = 2 [json_name = "owner"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_owner();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "gooseai.EngineInfo.owner"));
        } else
          goto handle_unusual;
        continue;
      // bool ready = 3 [json_name = "ready"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.ready_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .gooseai.EngineType type = 4 [json_name = "type"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::gooseai::EngineType>(val));
        } else
          goto handle_unusual;
        continue;
      // .gooseai.EngineTokenizer tokenizer = 5 [json_name = "tokenizer"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_tokenizer(static_cast<::gooseai::EngineTokenizer>(val));
        } else
          goto handle_unusual;
        continue;
      // string name = 6 [json_name = "name"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "gooseai.EngineInfo.name"));
        } else
          goto handle_unusual;
        continue;
      // string description = 7 [json_name = "description"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "gooseai.EngineInfo.description"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EngineInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gooseai.EngineInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gooseai.EngineInfo.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string owner = 2 [json_name = "owner"];
  if (!this->_internal_owner().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner().data(), static_cast<int>(this->_internal_owner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gooseai.EngineInfo.owner");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_owner(), target);
  }

  // bool ready = 3 [json_name = "ready"];
  if (this->_internal_ready() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_ready(), target);
  }

  // .gooseai.EngineType type = 4 [json_name = "type"];
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_type(), target);
  }

  // .gooseai.EngineTokenizer tokenizer = 5 [json_name = "tokenizer"];
  if (this->_internal_tokenizer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_tokenizer(), target);
  }

  // string name = 6 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gooseai.EngineInfo.name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_name(), target);
  }

  // string description = 7 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gooseai.EngineInfo.description");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gooseai.EngineInfo)
  return target;
}

size_t EngineInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gooseai.EngineInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string owner = 2 [json_name = "owner"];
  if (!this->_internal_owner().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner());
  }

  // string name = 6 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 7 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // bool ready = 3 [json_name = "ready"];
  if (this->_internal_ready() != 0) {
    total_size += 1 + 1;
  }

  // .gooseai.EngineType type = 4 [json_name = "type"];
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .gooseai.EngineTokenizer tokenizer = 5 [json_name = "tokenizer"];
  if (this->_internal_tokenizer() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_tokenizer());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EngineInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EngineInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EngineInfo::GetClassData() const { return &_class_data_; }


void EngineInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EngineInfo*>(&to_msg);
  auto& from = static_cast<const EngineInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:gooseai.EngineInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_owner().empty()) {
    _this->_internal_set_owner(from._internal_owner());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (from._internal_ready() != 0) {
    _this->_internal_set_ready(from._internal_ready());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_tokenizer() != 0) {
    _this->_internal_set_tokenizer(from._internal_tokenizer());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EngineInfo::CopyFrom(const EngineInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gooseai.EngineInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EngineInfo::IsInitialized() const {
  return true;
}

void EngineInfo::InternalSwap(EngineInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.owner_, lhs_arena,
      &other->_impl_.owner_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EngineInfo, _impl_.tokenizer_)
      + sizeof(EngineInfo::_impl_.tokenizer_)
      - PROTOBUF_FIELD_OFFSET(EngineInfo, _impl_.ready_)>(
          reinterpret_cast<char*>(&_impl_.ready_),
          reinterpret_cast<char*>(&other->_impl_.ready_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EngineInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_engines_2eproto_getter, &descriptor_table_engines_2eproto_once,
      file_level_metadata_engines_2eproto[0]);
}

// ===================================================================

class ListEnginesRequest::_Internal {
 public:
};

ListEnginesRequest::ListEnginesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:gooseai.ListEnginesRequest)
}
ListEnginesRequest::ListEnginesRequest(const ListEnginesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ListEnginesRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gooseai.ListEnginesRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListEnginesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListEnginesRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ListEnginesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_engines_2eproto_getter, &descriptor_table_engines_2eproto_once,
      file_level_metadata_engines_2eproto[1]);
}

// ===================================================================

class Engines::_Internal {
 public:
};

Engines::Engines(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:gooseai.Engines)
}
Engines::Engines(const Engines& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Engines* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.engine_){from._impl_.engine_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gooseai.Engines)
}

inline void Engines::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.engine_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Engines::~Engines() {
  // @@protoc_insertion_point(destructor:gooseai.Engines)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Engines::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.engine_.~RepeatedPtrField();
}

void Engines::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Engines::Clear() {
// @@protoc_insertion_point(message_clear_start:gooseai.Engines)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.engine_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Engines::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .gooseai.EngineInfo engine = 1 [json_name = "engine"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_engine(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Engines::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gooseai.Engines)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gooseai.EngineInfo engine = 1 [json_name = "engine"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_engine_size()); i < n; i++) {
    const auto& repfield = this->_internal_engine(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gooseai.Engines)
  return target;
}

size_t Engines::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gooseai.Engines)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gooseai.EngineInfo engine = 1 [json_name = "engine"];
  total_size += 1UL * this->_internal_engine_size();
  for (const auto& msg : this->_impl_.engine_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Engines::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Engines::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Engines::GetClassData() const { return &_class_data_; }


void Engines::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Engines*>(&to_msg);
  auto& from = static_cast<const Engines&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:gooseai.Engines)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.engine_.MergeFrom(from._impl_.engine_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Engines::CopyFrom(const Engines& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gooseai.Engines)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Engines::IsInitialized() const {
  return true;
}

void Engines::InternalSwap(Engines* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.engine_.InternalSwap(&other->_impl_.engine_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Engines::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_engines_2eproto_getter, &descriptor_table_engines_2eproto_once,
      file_level_metadata_engines_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace gooseai
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gooseai::EngineInfo*
Arena::CreateMaybeMessage< ::gooseai::EngineInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gooseai::EngineInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::gooseai::ListEnginesRequest*
Arena::CreateMaybeMessage< ::gooseai::ListEnginesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gooseai::ListEnginesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gooseai::Engines*
Arena::CreateMaybeMessage< ::gooseai::Engines >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gooseai::Engines >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
