// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: project.proto
#ifndef GRPC_project_2eproto__INCLUDED
#define GRPC_project_2eproto__INCLUDED

#include "project.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace gooseai {

//
// gRPC services
//
class ProjectService final {
 public:
  static constexpr char const* service_full_name() {
    return "gooseai.ProjectService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Create a new project if it does not exist
    virtual ::grpc::Status Create(::grpc::ClientContext* context, const ::gooseai::CreateProjectRequest& request, ::gooseai::Project* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::Project>> AsyncCreate(::grpc::ClientContext* context, const ::gooseai::CreateProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::Project>>(AsyncCreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::Project>> PrepareAsyncCreate(::grpc::ClientContext* context, const ::gooseai::CreateProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::Project>>(PrepareAsyncCreateRaw(context, request, cq));
    }
    // Update an existing project
    virtual ::grpc::Status Update(::grpc::ClientContext* context, const ::gooseai::UpdateProjectRequest& request, ::gooseai::Project* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::Project>> AsyncUpdate(::grpc::ClientContext* context, const ::gooseai::UpdateProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::Project>>(AsyncUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::Project>> PrepareAsyncUpdate(::grpc::ClientContext* context, const ::gooseai::UpdateProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::Project>>(PrepareAsyncUpdateRaw(context, request, cq));
    }
    // List all the projects for an organization
    std::unique_ptr< ::grpc::ClientReaderInterface< ::gooseai::Project>> List(::grpc::ClientContext* context, const ::gooseai::ListProjectRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::gooseai::Project>>(ListRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::gooseai::Project>> AsyncList(::grpc::ClientContext* context, const ::gooseai::ListProjectRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::gooseai::Project>>(AsyncListRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::gooseai::Project>> PrepareAsyncList(::grpc::ClientContext* context, const ::gooseai::ListProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::gooseai::Project>>(PrepareAsyncListRaw(context, request, cq));
    }
    // Get a project
    virtual ::grpc::Status Get(::grpc::ClientContext* context, const ::gooseai::GetProjectRequest& request, ::gooseai::Project* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::Project>> AsyncGet(::grpc::ClientContext* context, const ::gooseai::GetProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::Project>>(AsyncGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::Project>> PrepareAsyncGet(::grpc::ClientContext* context, const ::gooseai::GetProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::Project>>(PrepareAsyncGetRaw(context, request, cq));
    }
    // Delete a project
    virtual ::grpc::Status Delete(::grpc::ClientContext* context, const ::gooseai::DeleteProjectRequest& request, ::gooseai::Project* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::Project>> AsyncDelete(::grpc::ClientContext* context, const ::gooseai::DeleteProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::Project>>(AsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::Project>> PrepareAsyncDelete(::grpc::ClientContext* context, const ::gooseai::DeleteProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::Project>>(PrepareAsyncDeleteRaw(context, request, cq));
    }
    // Query the assets of a project, with additional filtering
    virtual ::grpc::Status QueryAssets(::grpc::ClientContext* context, const ::gooseai::QueryAssetsRequest& request, ::gooseai::QueryAssetsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::QueryAssetsResponse>> AsyncQueryAssets(::grpc::ClientContext* context, const ::gooseai::QueryAssetsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::QueryAssetsResponse>>(AsyncQueryAssetsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::QueryAssetsResponse>> PrepareAsyncQueryAssets(::grpc::ClientContext* context, const ::gooseai::QueryAssetsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::QueryAssetsResponse>>(PrepareAsyncQueryAssetsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Create a new project if it does not exist
      virtual void Create(::grpc::ClientContext* context, const ::gooseai::CreateProjectRequest* request, ::gooseai::Project* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Create(::grpc::ClientContext* context, const ::gooseai::CreateProjectRequest* request, ::gooseai::Project* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Update an existing project
      virtual void Update(::grpc::ClientContext* context, const ::gooseai::UpdateProjectRequest* request, ::gooseai::Project* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Update(::grpc::ClientContext* context, const ::gooseai::UpdateProjectRequest* request, ::gooseai::Project* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // List all the projects for an organization
      virtual void List(::grpc::ClientContext* context, const ::gooseai::ListProjectRequest* request, ::grpc::ClientReadReactor< ::gooseai::Project>* reactor) = 0;
      // Get a project
      virtual void Get(::grpc::ClientContext* context, const ::gooseai::GetProjectRequest* request, ::gooseai::Project* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Get(::grpc::ClientContext* context, const ::gooseai::GetProjectRequest* request, ::gooseai::Project* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Delete a project
      virtual void Delete(::grpc::ClientContext* context, const ::gooseai::DeleteProjectRequest* request, ::gooseai::Project* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Delete(::grpc::ClientContext* context, const ::gooseai::DeleteProjectRequest* request, ::gooseai::Project* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Query the assets of a project, with additional filtering
      virtual void QueryAssets(::grpc::ClientContext* context, const ::gooseai::QueryAssetsRequest* request, ::gooseai::QueryAssetsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void QueryAssets(::grpc::ClientContext* context, const ::gooseai::QueryAssetsRequest* request, ::gooseai::QueryAssetsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::Project>* AsyncCreateRaw(::grpc::ClientContext* context, const ::gooseai::CreateProjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::Project>* PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::gooseai::CreateProjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::Project>* AsyncUpdateRaw(::grpc::ClientContext* context, const ::gooseai::UpdateProjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::Project>* PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::gooseai::UpdateProjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::gooseai::Project>* ListRaw(::grpc::ClientContext* context, const ::gooseai::ListProjectRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::gooseai::Project>* AsyncListRaw(::grpc::ClientContext* context, const ::gooseai::ListProjectRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::gooseai::Project>* PrepareAsyncListRaw(::grpc::ClientContext* context, const ::gooseai::ListProjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::Project>* AsyncGetRaw(::grpc::ClientContext* context, const ::gooseai::GetProjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::Project>* PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::gooseai::GetProjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::Project>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::gooseai::DeleteProjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::Project>* PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::gooseai::DeleteProjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::QueryAssetsResponse>* AsyncQueryAssetsRaw(::grpc::ClientContext* context, const ::gooseai::QueryAssetsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gooseai::QueryAssetsResponse>* PrepareAsyncQueryAssetsRaw(::grpc::ClientContext* context, const ::gooseai::QueryAssetsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Create(::grpc::ClientContext* context, const ::gooseai::CreateProjectRequest& request, ::gooseai::Project* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::Project>> AsyncCreate(::grpc::ClientContext* context, const ::gooseai::CreateProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::Project>>(AsyncCreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::Project>> PrepareAsyncCreate(::grpc::ClientContext* context, const ::gooseai::CreateProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::Project>>(PrepareAsyncCreateRaw(context, request, cq));
    }
    ::grpc::Status Update(::grpc::ClientContext* context, const ::gooseai::UpdateProjectRequest& request, ::gooseai::Project* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::Project>> AsyncUpdate(::grpc::ClientContext* context, const ::gooseai::UpdateProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::Project>>(AsyncUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::Project>> PrepareAsyncUpdate(::grpc::ClientContext* context, const ::gooseai::UpdateProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::Project>>(PrepareAsyncUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::gooseai::Project>> List(::grpc::ClientContext* context, const ::gooseai::ListProjectRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::gooseai::Project>>(ListRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::gooseai::Project>> AsyncList(::grpc::ClientContext* context, const ::gooseai::ListProjectRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::gooseai::Project>>(AsyncListRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::gooseai::Project>> PrepareAsyncList(::grpc::ClientContext* context, const ::gooseai::ListProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::gooseai::Project>>(PrepareAsyncListRaw(context, request, cq));
    }
    ::grpc::Status Get(::grpc::ClientContext* context, const ::gooseai::GetProjectRequest& request, ::gooseai::Project* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::Project>> AsyncGet(::grpc::ClientContext* context, const ::gooseai::GetProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::Project>>(AsyncGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::Project>> PrepareAsyncGet(::grpc::ClientContext* context, const ::gooseai::GetProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::Project>>(PrepareAsyncGetRaw(context, request, cq));
    }
    ::grpc::Status Delete(::grpc::ClientContext* context, const ::gooseai::DeleteProjectRequest& request, ::gooseai::Project* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::Project>> AsyncDelete(::grpc::ClientContext* context, const ::gooseai::DeleteProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::Project>>(AsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::Project>> PrepareAsyncDelete(::grpc::ClientContext* context, const ::gooseai::DeleteProjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::Project>>(PrepareAsyncDeleteRaw(context, request, cq));
    }
    ::grpc::Status QueryAssets(::grpc::ClientContext* context, const ::gooseai::QueryAssetsRequest& request, ::gooseai::QueryAssetsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::QueryAssetsResponse>> AsyncQueryAssets(::grpc::ClientContext* context, const ::gooseai::QueryAssetsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::QueryAssetsResponse>>(AsyncQueryAssetsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::QueryAssetsResponse>> PrepareAsyncQueryAssets(::grpc::ClientContext* context, const ::gooseai::QueryAssetsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gooseai::QueryAssetsResponse>>(PrepareAsyncQueryAssetsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Create(::grpc::ClientContext* context, const ::gooseai::CreateProjectRequest* request, ::gooseai::Project* response, std::function<void(::grpc::Status)>) override;
      void Create(::grpc::ClientContext* context, const ::gooseai::CreateProjectRequest* request, ::gooseai::Project* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Update(::grpc::ClientContext* context, const ::gooseai::UpdateProjectRequest* request, ::gooseai::Project* response, std::function<void(::grpc::Status)>) override;
      void Update(::grpc::ClientContext* context, const ::gooseai::UpdateProjectRequest* request, ::gooseai::Project* response, ::grpc::ClientUnaryReactor* reactor) override;
      void List(::grpc::ClientContext* context, const ::gooseai::ListProjectRequest* request, ::grpc::ClientReadReactor< ::gooseai::Project>* reactor) override;
      void Get(::grpc::ClientContext* context, const ::gooseai::GetProjectRequest* request, ::gooseai::Project* response, std::function<void(::grpc::Status)>) override;
      void Get(::grpc::ClientContext* context, const ::gooseai::GetProjectRequest* request, ::gooseai::Project* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Delete(::grpc::ClientContext* context, const ::gooseai::DeleteProjectRequest* request, ::gooseai::Project* response, std::function<void(::grpc::Status)>) override;
      void Delete(::grpc::ClientContext* context, const ::gooseai::DeleteProjectRequest* request, ::gooseai::Project* response, ::grpc::ClientUnaryReactor* reactor) override;
      void QueryAssets(::grpc::ClientContext* context, const ::gooseai::QueryAssetsRequest* request, ::gooseai::QueryAssetsResponse* response, std::function<void(::grpc::Status)>) override;
      void QueryAssets(::grpc::ClientContext* context, const ::gooseai::QueryAssetsRequest* request, ::gooseai::QueryAssetsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::gooseai::Project>* AsyncCreateRaw(::grpc::ClientContext* context, const ::gooseai::CreateProjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gooseai::Project>* PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::gooseai::CreateProjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gooseai::Project>* AsyncUpdateRaw(::grpc::ClientContext* context, const ::gooseai::UpdateProjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gooseai::Project>* PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::gooseai::UpdateProjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::gooseai::Project>* ListRaw(::grpc::ClientContext* context, const ::gooseai::ListProjectRequest& request) override;
    ::grpc::ClientAsyncReader< ::gooseai::Project>* AsyncListRaw(::grpc::ClientContext* context, const ::gooseai::ListProjectRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::gooseai::Project>* PrepareAsyncListRaw(::grpc::ClientContext* context, const ::gooseai::ListProjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gooseai::Project>* AsyncGetRaw(::grpc::ClientContext* context, const ::gooseai::GetProjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gooseai::Project>* PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::gooseai::GetProjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gooseai::Project>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::gooseai::DeleteProjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gooseai::Project>* PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::gooseai::DeleteProjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gooseai::QueryAssetsResponse>* AsyncQueryAssetsRaw(::grpc::ClientContext* context, const ::gooseai::QueryAssetsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gooseai::QueryAssetsResponse>* PrepareAsyncQueryAssetsRaw(::grpc::ClientContext* context, const ::gooseai::QueryAssetsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Create_;
    const ::grpc::internal::RpcMethod rpcmethod_Update_;
    const ::grpc::internal::RpcMethod rpcmethod_List_;
    const ::grpc::internal::RpcMethod rpcmethod_Get_;
    const ::grpc::internal::RpcMethod rpcmethod_Delete_;
    const ::grpc::internal::RpcMethod rpcmethod_QueryAssets_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Create a new project if it does not exist
    virtual ::grpc::Status Create(::grpc::ServerContext* context, const ::gooseai::CreateProjectRequest* request, ::gooseai::Project* response);
    // Update an existing project
    virtual ::grpc::Status Update(::grpc::ServerContext* context, const ::gooseai::UpdateProjectRequest* request, ::gooseai::Project* response);
    // List all the projects for an organization
    virtual ::grpc::Status List(::grpc::ServerContext* context, const ::gooseai::ListProjectRequest* request, ::grpc::ServerWriter< ::gooseai::Project>* writer);
    // Get a project
    virtual ::grpc::Status Get(::grpc::ServerContext* context, const ::gooseai::GetProjectRequest* request, ::gooseai::Project* response);
    // Delete a project
    virtual ::grpc::Status Delete(::grpc::ServerContext* context, const ::gooseai::DeleteProjectRequest* request, ::gooseai::Project* response);
    // Query the assets of a project, with additional filtering
    virtual ::grpc::Status QueryAssets(::grpc::ServerContext* context, const ::gooseai::QueryAssetsRequest* request, ::gooseai::QueryAssetsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Create() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::gooseai::CreateProjectRequest* /*request*/, ::gooseai::Project* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreate(::grpc::ServerContext* context, ::gooseai::CreateProjectRequest* request, ::grpc::ServerAsyncResponseWriter< ::gooseai::Project>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Update() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::gooseai::UpdateProjectRequest* /*request*/, ::gooseai::Project* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdate(::grpc::ServerContext* context, ::gooseai::UpdateProjectRequest* request, ::grpc::ServerAsyncResponseWriter< ::gooseai::Project>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_List() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::gooseai::ListProjectRequest* /*request*/, ::grpc::ServerWriter< ::gooseai::Project>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestList(::grpc::ServerContext* context, ::gooseai::ListProjectRequest* request, ::grpc::ServerAsyncWriter< ::gooseai::Project>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Get() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::gooseai::GetProjectRequest* /*request*/, ::gooseai::Project* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::gooseai::GetProjectRequest* request, ::grpc::ServerAsyncResponseWriter< ::gooseai::Project>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Delete() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::gooseai::DeleteProjectRequest* /*request*/, ::gooseai::Project* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelete(::grpc::ServerContext* context, ::gooseai::DeleteProjectRequest* request, ::grpc::ServerAsyncResponseWriter< ::gooseai::Project>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_QueryAssets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_QueryAssets() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_QueryAssets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryAssets(::grpc::ServerContext* /*context*/, const ::gooseai::QueryAssetsRequest* /*request*/, ::gooseai::QueryAssetsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryAssets(::grpc::ServerContext* context, ::gooseai::QueryAssetsRequest* request, ::grpc::ServerAsyncResponseWriter< ::gooseai::QueryAssetsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Create<WithAsyncMethod_Update<WithAsyncMethod_List<WithAsyncMethod_Get<WithAsyncMethod_Delete<WithAsyncMethod_QueryAssets<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Create() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::gooseai::CreateProjectRequest, ::gooseai::Project>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::gooseai::CreateProjectRequest* request, ::gooseai::Project* response) { return this->Create(context, request, response); }));}
    void SetMessageAllocatorFor_Create(
        ::grpc::MessageAllocator< ::gooseai::CreateProjectRequest, ::gooseai::Project>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gooseai::CreateProjectRequest, ::gooseai::Project>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::gooseai::CreateProjectRequest* /*request*/, ::gooseai::Project* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Create(
      ::grpc::CallbackServerContext* /*context*/, const ::gooseai::CreateProjectRequest* /*request*/, ::gooseai::Project* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Update() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::gooseai::UpdateProjectRequest, ::gooseai::Project>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::gooseai::UpdateProjectRequest* request, ::gooseai::Project* response) { return this->Update(context, request, response); }));}
    void SetMessageAllocatorFor_Update(
        ::grpc::MessageAllocator< ::gooseai::UpdateProjectRequest, ::gooseai::Project>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gooseai::UpdateProjectRequest, ::gooseai::Project>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::gooseai::UpdateProjectRequest* /*request*/, ::gooseai::Project* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Update(
      ::grpc::CallbackServerContext* /*context*/, const ::gooseai::UpdateProjectRequest* /*request*/, ::gooseai::Project* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_List() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::gooseai::ListProjectRequest, ::gooseai::Project>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::gooseai::ListProjectRequest* request) { return this->List(context, request); }));
    }
    ~WithCallbackMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::gooseai::ListProjectRequest* /*request*/, ::grpc::ServerWriter< ::gooseai::Project>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::gooseai::Project>* List(
      ::grpc::CallbackServerContext* /*context*/, const ::gooseai::ListProjectRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Get() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::gooseai::GetProjectRequest, ::gooseai::Project>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::gooseai::GetProjectRequest* request, ::gooseai::Project* response) { return this->Get(context, request, response); }));}
    void SetMessageAllocatorFor_Get(
        ::grpc::MessageAllocator< ::gooseai::GetProjectRequest, ::gooseai::Project>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gooseai::GetProjectRequest, ::gooseai::Project>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::gooseai::GetProjectRequest* /*request*/, ::gooseai::Project* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Get(
      ::grpc::CallbackServerContext* /*context*/, const ::gooseai::GetProjectRequest* /*request*/, ::gooseai::Project* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Delete() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::gooseai::DeleteProjectRequest, ::gooseai::Project>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::gooseai::DeleteProjectRequest* request, ::gooseai::Project* response) { return this->Delete(context, request, response); }));}
    void SetMessageAllocatorFor_Delete(
        ::grpc::MessageAllocator< ::gooseai::DeleteProjectRequest, ::gooseai::Project>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gooseai::DeleteProjectRequest, ::gooseai::Project>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::gooseai::DeleteProjectRequest* /*request*/, ::gooseai::Project* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Delete(
      ::grpc::CallbackServerContext* /*context*/, const ::gooseai::DeleteProjectRequest* /*request*/, ::gooseai::Project* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_QueryAssets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_QueryAssets() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::gooseai::QueryAssetsRequest, ::gooseai::QueryAssetsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::gooseai::QueryAssetsRequest* request, ::gooseai::QueryAssetsResponse* response) { return this->QueryAssets(context, request, response); }));}
    void SetMessageAllocatorFor_QueryAssets(
        ::grpc::MessageAllocator< ::gooseai::QueryAssetsRequest, ::gooseai::QueryAssetsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gooseai::QueryAssetsRequest, ::gooseai::QueryAssetsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_QueryAssets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryAssets(::grpc::ServerContext* /*context*/, const ::gooseai::QueryAssetsRequest* /*request*/, ::gooseai::QueryAssetsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* QueryAssets(
      ::grpc::CallbackServerContext* /*context*/, const ::gooseai::QueryAssetsRequest* /*request*/, ::gooseai::QueryAssetsResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Create<WithCallbackMethod_Update<WithCallbackMethod_List<WithCallbackMethod_Get<WithCallbackMethod_Delete<WithCallbackMethod_QueryAssets<Service > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Create() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::gooseai::CreateProjectRequest* /*request*/, ::gooseai::Project* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Update() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::gooseai::UpdateProjectRequest* /*request*/, ::gooseai::Project* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_List() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::gooseai::ListProjectRequest* /*request*/, ::grpc::ServerWriter< ::gooseai::Project>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Get() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::gooseai::GetProjectRequest* /*request*/, ::gooseai::Project* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Delete() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::gooseai::DeleteProjectRequest* /*request*/, ::gooseai::Project* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_QueryAssets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_QueryAssets() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_QueryAssets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryAssets(::grpc::ServerContext* /*context*/, const ::gooseai::QueryAssetsRequest* /*request*/, ::gooseai::QueryAssetsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Create() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::gooseai::CreateProjectRequest* /*request*/, ::gooseai::Project* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Update() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::gooseai::UpdateProjectRequest* /*request*/, ::gooseai::Project* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_List() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::gooseai::ListProjectRequest* /*request*/, ::grpc::ServerWriter< ::gooseai::Project>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Get() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::gooseai::GetProjectRequest* /*request*/, ::gooseai::Project* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Delete() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::gooseai::DeleteProjectRequest* /*request*/, ::gooseai::Project* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelete(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_QueryAssets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_QueryAssets() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_QueryAssets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryAssets(::grpc::ServerContext* /*context*/, const ::gooseai::QueryAssetsRequest* /*request*/, ::gooseai::QueryAssetsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryAssets(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Create() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Create(context, request, response); }));
    }
    ~WithRawCallbackMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::gooseai::CreateProjectRequest* /*request*/, ::gooseai::Project* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Create(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Update() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Update(context, request, response); }));
    }
    ~WithRawCallbackMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::gooseai::UpdateProjectRequest* /*request*/, ::gooseai::Project* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Update(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_List() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->List(context, request); }));
    }
    ~WithRawCallbackMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::gooseai::ListProjectRequest* /*request*/, ::grpc::ServerWriter< ::gooseai::Project>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* List(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Get() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Get(context, request, response); }));
    }
    ~WithRawCallbackMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::gooseai::GetProjectRequest* /*request*/, ::gooseai::Project* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Get(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Delete() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Delete(context, request, response); }));
    }
    ~WithRawCallbackMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::gooseai::DeleteProjectRequest* /*request*/, ::gooseai::Project* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Delete(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_QueryAssets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_QueryAssets() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->QueryAssets(context, request, response); }));
    }
    ~WithRawCallbackMethod_QueryAssets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryAssets(::grpc::ServerContext* /*context*/, const ::gooseai::QueryAssetsRequest* /*request*/, ::gooseai::QueryAssetsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* QueryAssets(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Create() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gooseai::CreateProjectRequest, ::gooseai::Project>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gooseai::CreateProjectRequest, ::gooseai::Project>* streamer) {
                       return this->StreamedCreate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::gooseai::CreateProjectRequest* /*request*/, ::gooseai::Project* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gooseai::CreateProjectRequest,::gooseai::Project>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Update() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gooseai::UpdateProjectRequest, ::gooseai::Project>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gooseai::UpdateProjectRequest, ::gooseai::Project>* streamer) {
                       return this->StreamedUpdate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::gooseai::UpdateProjectRequest* /*request*/, ::gooseai::Project* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gooseai::UpdateProjectRequest,::gooseai::Project>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Get() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gooseai::GetProjectRequest, ::gooseai::Project>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gooseai::GetProjectRequest, ::gooseai::Project>* streamer) {
                       return this->StreamedGet(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::gooseai::GetProjectRequest* /*request*/, ::gooseai::Project* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gooseai::GetProjectRequest,::gooseai::Project>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Delete() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gooseai::DeleteProjectRequest, ::gooseai::Project>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gooseai::DeleteProjectRequest, ::gooseai::Project>* streamer) {
                       return this->StreamedDelete(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::gooseai::DeleteProjectRequest* /*request*/, ::gooseai::Project* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDelete(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gooseai::DeleteProjectRequest,::gooseai::Project>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_QueryAssets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_QueryAssets() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gooseai::QueryAssetsRequest, ::gooseai::QueryAssetsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gooseai::QueryAssetsRequest, ::gooseai::QueryAssetsResponse>* streamer) {
                       return this->StreamedQueryAssets(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_QueryAssets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status QueryAssets(::grpc::ServerContext* /*context*/, const ::gooseai::QueryAssetsRequest* /*request*/, ::gooseai::QueryAssetsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedQueryAssets(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gooseai::QueryAssetsRequest,::gooseai::QueryAssetsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Create<WithStreamedUnaryMethod_Update<WithStreamedUnaryMethod_Get<WithStreamedUnaryMethod_Delete<WithStreamedUnaryMethod_QueryAssets<Service > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_List() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::gooseai::ListProjectRequest, ::gooseai::Project>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::gooseai::ListProjectRequest, ::gooseai::Project>* streamer) {
                       return this->StreamedList(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::gooseai::ListProjectRequest* /*request*/, ::grpc::ServerWriter< ::gooseai::Project>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedList(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::gooseai::ListProjectRequest,::gooseai::Project>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_List<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_Create<WithStreamedUnaryMethod_Update<WithSplitStreamingMethod_List<WithStreamedUnaryMethod_Get<WithStreamedUnaryMethod_Delete<WithStreamedUnaryMethod_QueryAssets<Service > > > > > > StreamedService;
};

}  // namespace gooseai


#endif  // GRPC_project_2eproto__INCLUDED
